Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTBLOCK
    INTERFACE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> imprimir_instr
Rule 5     instruccion -> declaracion
Rule 6     instruccion -> asignacion PUNTOCOMA
Rule 7     instruccion -> sIf
Rule 8     instruccion -> sWhile
Rule 9     instruccion -> sFor
Rule 10    instruccion -> sContinue
Rule 11    instruccion -> sBreak
Rule 12    instruccion -> sReturn
Rule 13    instruccion -> sSwitch
Rule 14    instruccion -> declaracion_Funcion
Rule 15    declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
Rule 16    parametros -> PARDER
Rule 17    parametros -> lista_Parametros PARDER
Rule 18    lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo
Rule 19    lista_Parametros -> ID DOSPUNTOS tipo
Rule 20    tipoFuncion -> DOSPUNTOS tipo LLAVIZQ
Rule 21    tipoFuncion -> LLAVIZQ
Rule 22    sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
Rule 23    listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones
Rule 24    listCases -> listCases DEFAULT DOSPUNTOS instrucciones
Rule 25    listCases -> CASE op_Ternario DOSPUNTOS instrucciones
Rule 26    listCases -> DEFAULT DOSPUNTOS instrucciones
Rule 27    sContinue -> CONTINUE PUNTOCOMA
Rule 28    sBreak -> BREAK PUNTOCOMA
Rule 29    sReturn -> RETURN PUNTOCOMA
Rule 30    sReturn -> RETURN op_Ternario PUNTOCOMA
Rule 31    sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
Rule 32    sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
Rule 33    sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
Rule 34    sIf2 -> LLAVDER ELSE sElse
Rule 35    sIf2 -> LLAVDER
Rule 36    sElse -> LLAVIZQ instrucciones LLAVDER
Rule 37    sElse -> sIf
Rule 38    asignacion -> ID IGUAL op_Ternario
Rule 39    asignacion -> ID MAS IGUAL op_Ternario
Rule 40    asignacion -> ID MENOS IGUAL op_Ternario
Rule 41    asignacion -> ID MAS MAS
Rule 42    asignacion -> ID MENOS MENOS
Rule 43    declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita
Rule 44    declaracion -> tipoVar ID declaracion_implicita
Rule 45    declaracion_explicita -> PUNTOCOMA
Rule 46    declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA
Rule 47    declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA
Rule 48    tipoVar -> VAR
Rule 49    tipoVar -> CONST
Rule 50    tipo -> NUMBER
Rule 51    tipo -> FLOAT
Rule 52    tipo -> STRING
Rule 53    tipo -> BOOLEAN
Rule 54    tipo -> CHAR
Rule 55    imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
Rule 56    lista_exp -> lista_exp COMA op_Ternario
Rule 57    lista_exp -> op_Ternario
Rule 58    op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
Rule 59    op_Ternario -> exp_Or
Rule 60    exp_Or -> exp_Or OR exp_And
Rule 61    exp_Or -> exp_And
Rule 62    exp_And -> exp_And AND exp_Not
Rule 63    exp_And -> exp_Not
Rule 64    exp_Not -> lNot exp_Comp
Rule 65    exp_Not -> exp_Comp
Rule 66    lNot -> lNot NOT
Rule 67    lNot -> NOT
Rule 68    exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
Rule 69    exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos
Rule 70    exp_Comp -> exp_rel
Rule 71    exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos
Rule 72    exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos
Rule 73    exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
Rule 74    exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos
Rule 75    exp_rel -> exp_Sum_Menos
Rule 76    exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div
Rule 77    exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div
Rule 78    exp_Sum_Menos -> exp_Mul_Div
Rule 79    exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis
Rule 80    exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis
Rule 81    exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis
Rule 82    exp_Mul_Div -> exp_Parentesis
Rule 83    exp_Parentesis -> PARIZQ exp_Or PARDER
Rule 84    exp_Parentesis -> exp_Negativo
Rule 85    exp_Negativo -> MENOS valor
Rule 86    exp_Negativo -> valor
Rule 87    valor -> ENTERO
Rule 88    valor -> CADENA
Rule 89    valor -> DECIMAL
Rule 90    valor -> CARACTER
Rule 91    valor -> TRUE
Rule 92    valor -> FALSE
Rule 93    valor -> NULL
Rule 94    valor -> ID

Terminals, with rules where they appear

AND                  : 62
BOOLEAN              : 53
BREAK                : 28
CADENA               : 88
CARACTER             : 90
CASE                 : 23 25
CHAR                 : 54
COMA                 : 18 56
COMMENTBLOCK         : 
CONSOLE              : 55
CONST                : 49
CONTINUE             : 27
DECIMAL              : 89
DEFAULT              : 24 26
DISTINTO             : 69
DIVIDIDO             : 80
DOSPUNTOS            : 18 19 20 23 24 25 26 43 58
ELSE                 : 34
ENTERO               : 87
EQUIVALENTE          : 68
FALSE                : 92
FLOAT                : 51
FOR                  : 31
FUNCTION             : 15
ID                   : 15 18 19 38 39 40 41 42 43 44 94
IF                   : 33
IGUAL                : 38 39 40 46 47
INTERFACE            : 
INTERROGACION        : 58
LLAVDER              : 15 22 31 32 34 35 36
LLAVIZQ              : 20 21 22 31 32 33 36
LOG                  : 55
MAS                  : 39 41 41 76
MAYOR                : 71
MAYORIGUAL           : 73
MENOR                : 72
MENORIGUAL           : 74
MENOS                : 40 42 42 77 85
MODULO               : 81
NOT                  : 66 67
NULL                 : 93
NUMBER               : 50
OR                   : 60
PARDER               : 16 17 22 31 32 33 55 83
PARIZQ               : 15 22 31 32 33 55 83
POR                  : 79
PUNTO                : 55
PUNTOCOMA            : 6 27 28 29 30 31 45 46 47 55
RETURN               : 29 30
STRING               : 52
SWITCH               : 22
TRUE                 : 91
VAR                  : 48
WHILE                : 32
error                : 

Nonterminals, with rules where they appear

asignacion           : 6 31
declaracion          : 5 31
declaracion_Funcion  : 14
declaracion_explicita : 43
declaracion_implicita : 44
exp_And              : 60 61 62
exp_Comp             : 64 65
exp_Mul_Div          : 76 77 78 79 80 81
exp_Negativo         : 84
exp_Not              : 62 63
exp_Or               : 58 58 58 59 60 83
exp_Parentesis       : 79 80 81 82
exp_Sum_Menos        : 68 68 69 69 71 71 72 72 73 73 74 74 75 76 77
exp_rel              : 70
imprimir_instr       : 4
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 15 23 24 25 26 31 32 33 36
lNot                 : 64 66
listCases            : 22 23 24
lista_Parametros     : 17 18
lista_exp            : 55 56
op_Ternario          : 22 23 25 30 31 32 33 38 39 40 46 47 56 57
parametros           : 15
sBreak               : 11
sContinue            : 10
sElse                : 34
sFor                 : 9
sIf                  : 7 37
sIf2                 : 33
sReturn              : 12
sSwitch              : 13
sWhile               : 8
tipo                 : 18 19 20 43
tipoFuncion          : 15
tipoVar              : 43 44
valor                : 85 86

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    $end            reduce using rule 1 (init -> instrucciones .)
    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instruccion                    shift and go to state 28
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 3

    (3) instrucciones -> instruccion .

    CONSOLE         reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
    SWITCH          reduce using rule 3 (instrucciones -> instruccion .)
    FUNCTION        reduce using rule 3 (instrucciones -> instruccion .)
    VAR             reduce using rule 3 (instrucciones -> instruccion .)
    CONST           reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    LLAVDER         reduce using rule 3 (instrucciones -> instruccion .)
    CASE            reduce using rule 3 (instrucciones -> instruccion .)
    DEFAULT         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> imprimir_instr .

    CONSOLE         reduce using rule 4 (instruccion -> imprimir_instr .)
    ID              reduce using rule 4 (instruccion -> imprimir_instr .)
    IF              reduce using rule 4 (instruccion -> imprimir_instr .)
    WHILE           reduce using rule 4 (instruccion -> imprimir_instr .)
    FOR             reduce using rule 4 (instruccion -> imprimir_instr .)
    CONTINUE        reduce using rule 4 (instruccion -> imprimir_instr .)
    BREAK           reduce using rule 4 (instruccion -> imprimir_instr .)
    RETURN          reduce using rule 4 (instruccion -> imprimir_instr .)
    SWITCH          reduce using rule 4 (instruccion -> imprimir_instr .)
    FUNCTION        reduce using rule 4 (instruccion -> imprimir_instr .)
    VAR             reduce using rule 4 (instruccion -> imprimir_instr .)
    CONST           reduce using rule 4 (instruccion -> imprimir_instr .)
    $end            reduce using rule 4 (instruccion -> imprimir_instr .)
    LLAVDER         reduce using rule 4 (instruccion -> imprimir_instr .)
    CASE            reduce using rule 4 (instruccion -> imprimir_instr .)
    DEFAULT         reduce using rule 4 (instruccion -> imprimir_instr .)


state 5

    (5) instruccion -> declaracion .

    CONSOLE         reduce using rule 5 (instruccion -> declaracion .)
    ID              reduce using rule 5 (instruccion -> declaracion .)
    IF              reduce using rule 5 (instruccion -> declaracion .)
    WHILE           reduce using rule 5 (instruccion -> declaracion .)
    FOR             reduce using rule 5 (instruccion -> declaracion .)
    CONTINUE        reduce using rule 5 (instruccion -> declaracion .)
    BREAK           reduce using rule 5 (instruccion -> declaracion .)
    RETURN          reduce using rule 5 (instruccion -> declaracion .)
    SWITCH          reduce using rule 5 (instruccion -> declaracion .)
    FUNCTION        reduce using rule 5 (instruccion -> declaracion .)
    VAR             reduce using rule 5 (instruccion -> declaracion .)
    CONST           reduce using rule 5 (instruccion -> declaracion .)
    $end            reduce using rule 5 (instruccion -> declaracion .)
    LLAVDER         reduce using rule 5 (instruccion -> declaracion .)
    CASE            reduce using rule 5 (instruccion -> declaracion .)
    DEFAULT         reduce using rule 5 (instruccion -> declaracion .)


state 6

    (6) instruccion -> asignacion . PUNTOCOMA

    PUNTOCOMA       shift and go to state 29


state 7

    (7) instruccion -> sIf .

    CONSOLE         reduce using rule 7 (instruccion -> sIf .)
    ID              reduce using rule 7 (instruccion -> sIf .)
    IF              reduce using rule 7 (instruccion -> sIf .)
    WHILE           reduce using rule 7 (instruccion -> sIf .)
    FOR             reduce using rule 7 (instruccion -> sIf .)
    CONTINUE        reduce using rule 7 (instruccion -> sIf .)
    BREAK           reduce using rule 7 (instruccion -> sIf .)
    RETURN          reduce using rule 7 (instruccion -> sIf .)
    SWITCH          reduce using rule 7 (instruccion -> sIf .)
    FUNCTION        reduce using rule 7 (instruccion -> sIf .)
    VAR             reduce using rule 7 (instruccion -> sIf .)
    CONST           reduce using rule 7 (instruccion -> sIf .)
    $end            reduce using rule 7 (instruccion -> sIf .)
    LLAVDER         reduce using rule 7 (instruccion -> sIf .)
    CASE            reduce using rule 7 (instruccion -> sIf .)
    DEFAULT         reduce using rule 7 (instruccion -> sIf .)


state 8

    (8) instruccion -> sWhile .

    CONSOLE         reduce using rule 8 (instruccion -> sWhile .)
    ID              reduce using rule 8 (instruccion -> sWhile .)
    IF              reduce using rule 8 (instruccion -> sWhile .)
    WHILE           reduce using rule 8 (instruccion -> sWhile .)
    FOR             reduce using rule 8 (instruccion -> sWhile .)
    CONTINUE        reduce using rule 8 (instruccion -> sWhile .)
    BREAK           reduce using rule 8 (instruccion -> sWhile .)
    RETURN          reduce using rule 8 (instruccion -> sWhile .)
    SWITCH          reduce using rule 8 (instruccion -> sWhile .)
    FUNCTION        reduce using rule 8 (instruccion -> sWhile .)
    VAR             reduce using rule 8 (instruccion -> sWhile .)
    CONST           reduce using rule 8 (instruccion -> sWhile .)
    $end            reduce using rule 8 (instruccion -> sWhile .)
    LLAVDER         reduce using rule 8 (instruccion -> sWhile .)
    CASE            reduce using rule 8 (instruccion -> sWhile .)
    DEFAULT         reduce using rule 8 (instruccion -> sWhile .)


state 9

    (9) instruccion -> sFor .

    CONSOLE         reduce using rule 9 (instruccion -> sFor .)
    ID              reduce using rule 9 (instruccion -> sFor .)
    IF              reduce using rule 9 (instruccion -> sFor .)
    WHILE           reduce using rule 9 (instruccion -> sFor .)
    FOR             reduce using rule 9 (instruccion -> sFor .)
    CONTINUE        reduce using rule 9 (instruccion -> sFor .)
    BREAK           reduce using rule 9 (instruccion -> sFor .)
    RETURN          reduce using rule 9 (instruccion -> sFor .)
    SWITCH          reduce using rule 9 (instruccion -> sFor .)
    FUNCTION        reduce using rule 9 (instruccion -> sFor .)
    VAR             reduce using rule 9 (instruccion -> sFor .)
    CONST           reduce using rule 9 (instruccion -> sFor .)
    $end            reduce using rule 9 (instruccion -> sFor .)
    LLAVDER         reduce using rule 9 (instruccion -> sFor .)
    CASE            reduce using rule 9 (instruccion -> sFor .)
    DEFAULT         reduce using rule 9 (instruccion -> sFor .)


state 10

    (10) instruccion -> sContinue .

    CONSOLE         reduce using rule 10 (instruccion -> sContinue .)
    ID              reduce using rule 10 (instruccion -> sContinue .)
    IF              reduce using rule 10 (instruccion -> sContinue .)
    WHILE           reduce using rule 10 (instruccion -> sContinue .)
    FOR             reduce using rule 10 (instruccion -> sContinue .)
    CONTINUE        reduce using rule 10 (instruccion -> sContinue .)
    BREAK           reduce using rule 10 (instruccion -> sContinue .)
    RETURN          reduce using rule 10 (instruccion -> sContinue .)
    SWITCH          reduce using rule 10 (instruccion -> sContinue .)
    FUNCTION        reduce using rule 10 (instruccion -> sContinue .)
    VAR             reduce using rule 10 (instruccion -> sContinue .)
    CONST           reduce using rule 10 (instruccion -> sContinue .)
    $end            reduce using rule 10 (instruccion -> sContinue .)
    LLAVDER         reduce using rule 10 (instruccion -> sContinue .)
    CASE            reduce using rule 10 (instruccion -> sContinue .)
    DEFAULT         reduce using rule 10 (instruccion -> sContinue .)


state 11

    (11) instruccion -> sBreak .

    CONSOLE         reduce using rule 11 (instruccion -> sBreak .)
    ID              reduce using rule 11 (instruccion -> sBreak .)
    IF              reduce using rule 11 (instruccion -> sBreak .)
    WHILE           reduce using rule 11 (instruccion -> sBreak .)
    FOR             reduce using rule 11 (instruccion -> sBreak .)
    CONTINUE        reduce using rule 11 (instruccion -> sBreak .)
    BREAK           reduce using rule 11 (instruccion -> sBreak .)
    RETURN          reduce using rule 11 (instruccion -> sBreak .)
    SWITCH          reduce using rule 11 (instruccion -> sBreak .)
    FUNCTION        reduce using rule 11 (instruccion -> sBreak .)
    VAR             reduce using rule 11 (instruccion -> sBreak .)
    CONST           reduce using rule 11 (instruccion -> sBreak .)
    $end            reduce using rule 11 (instruccion -> sBreak .)
    LLAVDER         reduce using rule 11 (instruccion -> sBreak .)
    CASE            reduce using rule 11 (instruccion -> sBreak .)
    DEFAULT         reduce using rule 11 (instruccion -> sBreak .)


state 12

    (12) instruccion -> sReturn .

    CONSOLE         reduce using rule 12 (instruccion -> sReturn .)
    ID              reduce using rule 12 (instruccion -> sReturn .)
    IF              reduce using rule 12 (instruccion -> sReturn .)
    WHILE           reduce using rule 12 (instruccion -> sReturn .)
    FOR             reduce using rule 12 (instruccion -> sReturn .)
    CONTINUE        reduce using rule 12 (instruccion -> sReturn .)
    BREAK           reduce using rule 12 (instruccion -> sReturn .)
    RETURN          reduce using rule 12 (instruccion -> sReturn .)
    SWITCH          reduce using rule 12 (instruccion -> sReturn .)
    FUNCTION        reduce using rule 12 (instruccion -> sReturn .)
    VAR             reduce using rule 12 (instruccion -> sReturn .)
    CONST           reduce using rule 12 (instruccion -> sReturn .)
    $end            reduce using rule 12 (instruccion -> sReturn .)
    LLAVDER         reduce using rule 12 (instruccion -> sReturn .)
    CASE            reduce using rule 12 (instruccion -> sReturn .)
    DEFAULT         reduce using rule 12 (instruccion -> sReturn .)


state 13

    (13) instruccion -> sSwitch .

    CONSOLE         reduce using rule 13 (instruccion -> sSwitch .)
    ID              reduce using rule 13 (instruccion -> sSwitch .)
    IF              reduce using rule 13 (instruccion -> sSwitch .)
    WHILE           reduce using rule 13 (instruccion -> sSwitch .)
    FOR             reduce using rule 13 (instruccion -> sSwitch .)
    CONTINUE        reduce using rule 13 (instruccion -> sSwitch .)
    BREAK           reduce using rule 13 (instruccion -> sSwitch .)
    RETURN          reduce using rule 13 (instruccion -> sSwitch .)
    SWITCH          reduce using rule 13 (instruccion -> sSwitch .)
    FUNCTION        reduce using rule 13 (instruccion -> sSwitch .)
    VAR             reduce using rule 13 (instruccion -> sSwitch .)
    CONST           reduce using rule 13 (instruccion -> sSwitch .)
    $end            reduce using rule 13 (instruccion -> sSwitch .)
    LLAVDER         reduce using rule 13 (instruccion -> sSwitch .)
    CASE            reduce using rule 13 (instruccion -> sSwitch .)
    DEFAULT         reduce using rule 13 (instruccion -> sSwitch .)


state 14

    (14) instruccion -> declaracion_Funcion .

    CONSOLE         reduce using rule 14 (instruccion -> declaracion_Funcion .)
    ID              reduce using rule 14 (instruccion -> declaracion_Funcion .)
    IF              reduce using rule 14 (instruccion -> declaracion_Funcion .)
    WHILE           reduce using rule 14 (instruccion -> declaracion_Funcion .)
    FOR             reduce using rule 14 (instruccion -> declaracion_Funcion .)
    CONTINUE        reduce using rule 14 (instruccion -> declaracion_Funcion .)
    BREAK           reduce using rule 14 (instruccion -> declaracion_Funcion .)
    RETURN          reduce using rule 14 (instruccion -> declaracion_Funcion .)
    SWITCH          reduce using rule 14 (instruccion -> declaracion_Funcion .)
    FUNCTION        reduce using rule 14 (instruccion -> declaracion_Funcion .)
    VAR             reduce using rule 14 (instruccion -> declaracion_Funcion .)
    CONST           reduce using rule 14 (instruccion -> declaracion_Funcion .)
    $end            reduce using rule 14 (instruccion -> declaracion_Funcion .)
    LLAVDER         reduce using rule 14 (instruccion -> declaracion_Funcion .)
    CASE            reduce using rule 14 (instruccion -> declaracion_Funcion .)
    DEFAULT         reduce using rule 14 (instruccion -> declaracion_Funcion .)


state 15

    (55) imprimir_instr -> CONSOLE . PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA

    PUNTO           shift and go to state 30


state 16

    (43) declaracion -> tipoVar . ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> tipoVar . ID declaracion_implicita

    ID              shift and go to state 31


state 17

    (38) asignacion -> ID . IGUAL op_Ternario
    (39) asignacion -> ID . MAS IGUAL op_Ternario
    (40) asignacion -> ID . MENOS IGUAL op_Ternario
    (41) asignacion -> ID . MAS MAS
    (42) asignacion -> ID . MENOS MENOS

    IGUAL           shift and go to state 32
    MAS             shift and go to state 33
    MENOS           shift and go to state 34


state 18

    (33) sIf -> IF . PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2

    PARIZQ          shift and go to state 35


state 19

    (32) sWhile -> WHILE . PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 36


state 20

    (31) sFor -> FOR . PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 37


state 21

    (27) sContinue -> CONTINUE . PUNTOCOMA

    PUNTOCOMA       shift and go to state 38


state 22

    (28) sBreak -> BREAK . PUNTOCOMA

    PUNTOCOMA       shift and go to state 39


state 23

    (29) sReturn -> RETURN . PUNTOCOMA
    (30) sReturn -> RETURN . op_Ternario PUNTOCOMA
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PUNTOCOMA       shift and go to state 40
    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 41
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 24

    (22) sSwitch -> SWITCH . PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER

    PARIZQ          shift and go to state 64


state 25

    (15) declaracion_Funcion -> FUNCTION . ID PARIZQ parametros tipoFuncion instrucciones LLAVDER

    ID              shift and go to state 65


state 26

    (48) tipoVar -> VAR .

    ID              reduce using rule 48 (tipoVar -> VAR .)


state 27

    (49) tipoVar -> CONST .

    ID              reduce using rule 49 (tipoVar -> CONST .)


state 28

    (2) instrucciones -> instrucciones instruccion .

    CONSOLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    SWITCH          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNCTION        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    VAR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONST           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LLAVDER         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CASE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DEFAULT         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 29

    (6) instruccion -> asignacion PUNTOCOMA .

    CONSOLE         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    ID              reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    IF              reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    WHILE           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    FOR             reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CONTINUE        reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    BREAK           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    RETURN          reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    SWITCH          reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    FUNCTION        reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    VAR             reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CONST           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    $end            reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    LLAVDER         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CASE            reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    DEFAULT         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)


state 30

    (55) imprimir_instr -> CONSOLE PUNTO . LOG PARIZQ lista_exp PARDER PUNTOCOMA

    LOG             shift and go to state 66


state 31

    (43) declaracion -> tipoVar ID . DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> tipoVar ID . declaracion_implicita
    (47) declaracion_implicita -> . IGUAL op_Ternario PUNTOCOMA

    DOSPUNTOS       shift and go to state 67
    IGUAL           shift and go to state 69

    declaracion_implicita          shift and go to state 68

state 32

    (38) asignacion -> ID IGUAL . op_Ternario
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 70
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 33

    (39) asignacion -> ID MAS . IGUAL op_Ternario
    (41) asignacion -> ID MAS . MAS

    IGUAL           shift and go to state 72
    MAS             shift and go to state 71


state 34

    (40) asignacion -> ID MENOS . IGUAL op_Ternario
    (42) asignacion -> ID MENOS . MENOS

    IGUAL           shift and go to state 74
    MENOS           shift and go to state 73


state 35

    (33) sIf -> IF PARIZQ . op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 75
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 36

    (32) sWhile -> WHILE PARIZQ . op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 76
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 37

    (31) sFor -> FOR PARIZQ . declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    VAR             shift and go to state 26
    CONST           shift and go to state 27

    declaracion                    shift and go to state 77
    tipoVar                        shift and go to state 16

state 38

    (27) sContinue -> CONTINUE PUNTOCOMA .

    CONSOLE         reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    ID              reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    IF              reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    WHILE           reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    FOR             reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    CONTINUE        reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    BREAK           reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    RETURN          reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    SWITCH          reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    FUNCTION        reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    VAR             reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    CONST           reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    $end            reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    LLAVDER         reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    CASE            reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)
    DEFAULT         reduce using rule 27 (sContinue -> CONTINUE PUNTOCOMA .)


state 39

    (28) sBreak -> BREAK PUNTOCOMA .

    CONSOLE         reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    ID              reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    IF              reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    WHILE           reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    FOR             reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    CONTINUE        reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    BREAK           reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    RETURN          reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    SWITCH          reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    FUNCTION        reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    VAR             reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    CONST           reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    $end            reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    LLAVDER         reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    CASE            reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)
    DEFAULT         reduce using rule 28 (sBreak -> BREAK PUNTOCOMA .)


state 40

    (29) sReturn -> RETURN PUNTOCOMA .

    CONSOLE         reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    ID              reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    IF              reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    WHILE           reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    FOR             reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    CONTINUE        reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    BREAK           reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    RETURN          reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    SWITCH          reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    FUNCTION        reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    VAR             reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    CONST           reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    $end            reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    LLAVDER         reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    CASE            reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)
    DEFAULT         reduce using rule 29 (sReturn -> RETURN PUNTOCOMA .)


state 41

    (30) sReturn -> RETURN op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 78


state 42

    (58) op_Ternario -> exp_Or . INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> exp_Or .
    (60) exp_Or -> exp_Or . OR exp_And

    INTERROGACION   shift and go to state 79
    PUNTOCOMA       reduce using rule 59 (op_Ternario -> exp_Or .)
    PARDER          reduce using rule 59 (op_Ternario -> exp_Or .)
    COMA            reduce using rule 59 (op_Ternario -> exp_Or .)
    DOSPUNTOS       reduce using rule 59 (op_Ternario -> exp_Or .)
    OR              shift and go to state 80


state 43

    (61) exp_Or -> exp_And .
    (62) exp_And -> exp_And . AND exp_Not

    INTERROGACION   reduce using rule 61 (exp_Or -> exp_And .)
    OR              reduce using rule 61 (exp_Or -> exp_And .)
    PUNTOCOMA       reduce using rule 61 (exp_Or -> exp_And .)
    PARDER          reduce using rule 61 (exp_Or -> exp_And .)
    DOSPUNTOS       reduce using rule 61 (exp_Or -> exp_And .)
    COMA            reduce using rule 61 (exp_Or -> exp_And .)
    AND             shift and go to state 81


state 44

    (63) exp_And -> exp_Not .

    AND             reduce using rule 63 (exp_And -> exp_Not .)
    INTERROGACION   reduce using rule 63 (exp_And -> exp_Not .)
    OR              reduce using rule 63 (exp_And -> exp_Not .)
    PUNTOCOMA       reduce using rule 63 (exp_And -> exp_Not .)
    PARDER          reduce using rule 63 (exp_And -> exp_Not .)
    DOSPUNTOS       reduce using rule 63 (exp_And -> exp_Not .)
    COMA            reduce using rule 63 (exp_And -> exp_Not .)


state 45

    (64) exp_Not -> lNot . exp_Comp
    (66) lNot -> lNot . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 83
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Comp                       shift and go to state 82
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 46

    (65) exp_Not -> exp_Comp .

    AND             reduce using rule 65 (exp_Not -> exp_Comp .)
    INTERROGACION   reduce using rule 65 (exp_Not -> exp_Comp .)
    OR              reduce using rule 65 (exp_Not -> exp_Comp .)
    PUNTOCOMA       reduce using rule 65 (exp_Not -> exp_Comp .)
    PARDER          reduce using rule 65 (exp_Not -> exp_Comp .)
    DOSPUNTOS       reduce using rule 65 (exp_Not -> exp_Comp .)
    COMA            reduce using rule 65 (exp_Not -> exp_Comp .)


state 47

    (67) lNot -> NOT .

    NOT             reduce using rule 67 (lNot -> NOT .)
    PARIZQ          reduce using rule 67 (lNot -> NOT .)
    MENOS           reduce using rule 67 (lNot -> NOT .)
    ENTERO          reduce using rule 67 (lNot -> NOT .)
    CADENA          reduce using rule 67 (lNot -> NOT .)
    DECIMAL         reduce using rule 67 (lNot -> NOT .)
    CARACTER        reduce using rule 67 (lNot -> NOT .)
    TRUE            reduce using rule 67 (lNot -> NOT .)
    FALSE           reduce using rule 67 (lNot -> NOT .)
    NULL            reduce using rule 67 (lNot -> NOT .)
    ID              reduce using rule 67 (lNot -> NOT .)


state 48

    (68) exp_Comp -> exp_Sum_Menos . EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> exp_Sum_Menos . DISTINTO exp_Sum_Menos
    (76) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (77) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div
    (71) exp_rel -> exp_Sum_Menos . MAYOR exp_Sum_Menos
    (72) exp_rel -> exp_Sum_Menos . MENOR exp_Sum_Menos
    (73) exp_rel -> exp_Sum_Menos . MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> exp_Sum_Menos . MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> exp_Sum_Menos .

    EQUIVALENTE     shift and go to state 84
    DISTINTO        shift and go to state 85
    MAS             shift and go to state 86
    MENOS           shift and go to state 87
    MAYOR           shift and go to state 88
    MENOR           shift and go to state 89
    MAYORIGUAL      shift and go to state 90
    MENORIGUAL      shift and go to state 91
    AND             reduce using rule 75 (exp_rel -> exp_Sum_Menos .)
    INTERROGACION   reduce using rule 75 (exp_rel -> exp_Sum_Menos .)
    OR              reduce using rule 75 (exp_rel -> exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 75 (exp_rel -> exp_Sum_Menos .)
    PARDER          reduce using rule 75 (exp_rel -> exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 75 (exp_rel -> exp_Sum_Menos .)
    COMA            reduce using rule 75 (exp_rel -> exp_Sum_Menos .)


state 49

    (70) exp_Comp -> exp_rel .

    AND             reduce using rule 70 (exp_Comp -> exp_rel .)
    INTERROGACION   reduce using rule 70 (exp_Comp -> exp_rel .)
    OR              reduce using rule 70 (exp_Comp -> exp_rel .)
    PUNTOCOMA       reduce using rule 70 (exp_Comp -> exp_rel .)
    PARDER          reduce using rule 70 (exp_Comp -> exp_rel .)
    DOSPUNTOS       reduce using rule 70 (exp_Comp -> exp_rel .)
    COMA            reduce using rule 70 (exp_Comp -> exp_rel .)


state 50

    (78) exp_Sum_Menos -> exp_Mul_Div .
    (79) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (80) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    DISTINTO        reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    MAS             reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    MENOS           reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    MAYOR           reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    MENOR           reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    MENORIGUAL      reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    AND             reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    INTERROGACION   reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    OR              reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    PARDER          reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    COMA            reduce using rule 78 (exp_Sum_Menos -> exp_Mul_Div .)
    POR             shift and go to state 92
    DIVIDIDO        shift and go to state 93
    MODULO          shift and go to state 94


state 51

    (85) exp_Negativo -> MENOS . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    valor                          shift and go to state 95

state 52

    (82) exp_Mul_Div -> exp_Parentesis .

    POR             reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    DIVIDIDO        reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    MODULO          reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    EQUIVALENTE     reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    DISTINTO        reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    MAS             reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    MENOS           reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    MAYOR           reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    MENOR           reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    MAYORIGUAL      reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    MENORIGUAL      reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    AND             reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    INTERROGACION   reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    OR              reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    PUNTOCOMA       reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    PARDER          reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    DOSPUNTOS       reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)
    COMA            reduce using rule 82 (exp_Mul_Div -> exp_Parentesis .)


state 53

    (83) exp_Parentesis -> PARIZQ . exp_Or PARDER
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Or                         shift and go to state 96
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 54

    (84) exp_Parentesis -> exp_Negativo .

    POR             reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    DIVIDIDO        reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    MODULO          reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    EQUIVALENTE     reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    DISTINTO        reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    MAS             reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    MENOS           reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    MAYOR           reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    MENOR           reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    MAYORIGUAL      reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    MENORIGUAL      reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    AND             reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    INTERROGACION   reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    OR              reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    PUNTOCOMA       reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    PARDER          reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    DOSPUNTOS       reduce using rule 84 (exp_Parentesis -> exp_Negativo .)
    COMA            reduce using rule 84 (exp_Parentesis -> exp_Negativo .)


state 55

    (86) exp_Negativo -> valor .

    POR             reduce using rule 86 (exp_Negativo -> valor .)
    DIVIDIDO        reduce using rule 86 (exp_Negativo -> valor .)
    MODULO          reduce using rule 86 (exp_Negativo -> valor .)
    EQUIVALENTE     reduce using rule 86 (exp_Negativo -> valor .)
    DISTINTO        reduce using rule 86 (exp_Negativo -> valor .)
    MAS             reduce using rule 86 (exp_Negativo -> valor .)
    MENOS           reduce using rule 86 (exp_Negativo -> valor .)
    MAYOR           reduce using rule 86 (exp_Negativo -> valor .)
    MENOR           reduce using rule 86 (exp_Negativo -> valor .)
    MAYORIGUAL      reduce using rule 86 (exp_Negativo -> valor .)
    MENORIGUAL      reduce using rule 86 (exp_Negativo -> valor .)
    AND             reduce using rule 86 (exp_Negativo -> valor .)
    INTERROGACION   reduce using rule 86 (exp_Negativo -> valor .)
    OR              reduce using rule 86 (exp_Negativo -> valor .)
    PUNTOCOMA       reduce using rule 86 (exp_Negativo -> valor .)
    PARDER          reduce using rule 86 (exp_Negativo -> valor .)
    DOSPUNTOS       reduce using rule 86 (exp_Negativo -> valor .)
    COMA            reduce using rule 86 (exp_Negativo -> valor .)


state 56

    (87) valor -> ENTERO .

    POR             reduce using rule 87 (valor -> ENTERO .)
    DIVIDIDO        reduce using rule 87 (valor -> ENTERO .)
    MODULO          reduce using rule 87 (valor -> ENTERO .)
    EQUIVALENTE     reduce using rule 87 (valor -> ENTERO .)
    DISTINTO        reduce using rule 87 (valor -> ENTERO .)
    MAS             reduce using rule 87 (valor -> ENTERO .)
    MENOS           reduce using rule 87 (valor -> ENTERO .)
    MAYOR           reduce using rule 87 (valor -> ENTERO .)
    MENOR           reduce using rule 87 (valor -> ENTERO .)
    MAYORIGUAL      reduce using rule 87 (valor -> ENTERO .)
    MENORIGUAL      reduce using rule 87 (valor -> ENTERO .)
    AND             reduce using rule 87 (valor -> ENTERO .)
    INTERROGACION   reduce using rule 87 (valor -> ENTERO .)
    OR              reduce using rule 87 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 87 (valor -> ENTERO .)
    PARDER          reduce using rule 87 (valor -> ENTERO .)
    DOSPUNTOS       reduce using rule 87 (valor -> ENTERO .)
    COMA            reduce using rule 87 (valor -> ENTERO .)


state 57

    (88) valor -> CADENA .

    POR             reduce using rule 88 (valor -> CADENA .)
    DIVIDIDO        reduce using rule 88 (valor -> CADENA .)
    MODULO          reduce using rule 88 (valor -> CADENA .)
    EQUIVALENTE     reduce using rule 88 (valor -> CADENA .)
    DISTINTO        reduce using rule 88 (valor -> CADENA .)
    MAS             reduce using rule 88 (valor -> CADENA .)
    MENOS           reduce using rule 88 (valor -> CADENA .)
    MAYOR           reduce using rule 88 (valor -> CADENA .)
    MENOR           reduce using rule 88 (valor -> CADENA .)
    MAYORIGUAL      reduce using rule 88 (valor -> CADENA .)
    MENORIGUAL      reduce using rule 88 (valor -> CADENA .)
    AND             reduce using rule 88 (valor -> CADENA .)
    INTERROGACION   reduce using rule 88 (valor -> CADENA .)
    OR              reduce using rule 88 (valor -> CADENA .)
    PUNTOCOMA       reduce using rule 88 (valor -> CADENA .)
    PARDER          reduce using rule 88 (valor -> CADENA .)
    DOSPUNTOS       reduce using rule 88 (valor -> CADENA .)
    COMA            reduce using rule 88 (valor -> CADENA .)


state 58

    (89) valor -> DECIMAL .

    POR             reduce using rule 89 (valor -> DECIMAL .)
    DIVIDIDO        reduce using rule 89 (valor -> DECIMAL .)
    MODULO          reduce using rule 89 (valor -> DECIMAL .)
    EQUIVALENTE     reduce using rule 89 (valor -> DECIMAL .)
    DISTINTO        reduce using rule 89 (valor -> DECIMAL .)
    MAS             reduce using rule 89 (valor -> DECIMAL .)
    MENOS           reduce using rule 89 (valor -> DECIMAL .)
    MAYOR           reduce using rule 89 (valor -> DECIMAL .)
    MENOR           reduce using rule 89 (valor -> DECIMAL .)
    MAYORIGUAL      reduce using rule 89 (valor -> DECIMAL .)
    MENORIGUAL      reduce using rule 89 (valor -> DECIMAL .)
    AND             reduce using rule 89 (valor -> DECIMAL .)
    INTERROGACION   reduce using rule 89 (valor -> DECIMAL .)
    OR              reduce using rule 89 (valor -> DECIMAL .)
    PUNTOCOMA       reduce using rule 89 (valor -> DECIMAL .)
    PARDER          reduce using rule 89 (valor -> DECIMAL .)
    DOSPUNTOS       reduce using rule 89 (valor -> DECIMAL .)
    COMA            reduce using rule 89 (valor -> DECIMAL .)


state 59

    (90) valor -> CARACTER .

    POR             reduce using rule 90 (valor -> CARACTER .)
    DIVIDIDO        reduce using rule 90 (valor -> CARACTER .)
    MODULO          reduce using rule 90 (valor -> CARACTER .)
    EQUIVALENTE     reduce using rule 90 (valor -> CARACTER .)
    DISTINTO        reduce using rule 90 (valor -> CARACTER .)
    MAS             reduce using rule 90 (valor -> CARACTER .)
    MENOS           reduce using rule 90 (valor -> CARACTER .)
    MAYOR           reduce using rule 90 (valor -> CARACTER .)
    MENOR           reduce using rule 90 (valor -> CARACTER .)
    MAYORIGUAL      reduce using rule 90 (valor -> CARACTER .)
    MENORIGUAL      reduce using rule 90 (valor -> CARACTER .)
    AND             reduce using rule 90 (valor -> CARACTER .)
    INTERROGACION   reduce using rule 90 (valor -> CARACTER .)
    OR              reduce using rule 90 (valor -> CARACTER .)
    PUNTOCOMA       reduce using rule 90 (valor -> CARACTER .)
    PARDER          reduce using rule 90 (valor -> CARACTER .)
    DOSPUNTOS       reduce using rule 90 (valor -> CARACTER .)
    COMA            reduce using rule 90 (valor -> CARACTER .)


state 60

    (91) valor -> TRUE .

    POR             reduce using rule 91 (valor -> TRUE .)
    DIVIDIDO        reduce using rule 91 (valor -> TRUE .)
    MODULO          reduce using rule 91 (valor -> TRUE .)
    EQUIVALENTE     reduce using rule 91 (valor -> TRUE .)
    DISTINTO        reduce using rule 91 (valor -> TRUE .)
    MAS             reduce using rule 91 (valor -> TRUE .)
    MENOS           reduce using rule 91 (valor -> TRUE .)
    MAYOR           reduce using rule 91 (valor -> TRUE .)
    MENOR           reduce using rule 91 (valor -> TRUE .)
    MAYORIGUAL      reduce using rule 91 (valor -> TRUE .)
    MENORIGUAL      reduce using rule 91 (valor -> TRUE .)
    AND             reduce using rule 91 (valor -> TRUE .)
    INTERROGACION   reduce using rule 91 (valor -> TRUE .)
    OR              reduce using rule 91 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 91 (valor -> TRUE .)
    PARDER          reduce using rule 91 (valor -> TRUE .)
    DOSPUNTOS       reduce using rule 91 (valor -> TRUE .)
    COMA            reduce using rule 91 (valor -> TRUE .)


state 61

    (92) valor -> FALSE .

    POR             reduce using rule 92 (valor -> FALSE .)
    DIVIDIDO        reduce using rule 92 (valor -> FALSE .)
    MODULO          reduce using rule 92 (valor -> FALSE .)
    EQUIVALENTE     reduce using rule 92 (valor -> FALSE .)
    DISTINTO        reduce using rule 92 (valor -> FALSE .)
    MAS             reduce using rule 92 (valor -> FALSE .)
    MENOS           reduce using rule 92 (valor -> FALSE .)
    MAYOR           reduce using rule 92 (valor -> FALSE .)
    MENOR           reduce using rule 92 (valor -> FALSE .)
    MAYORIGUAL      reduce using rule 92 (valor -> FALSE .)
    MENORIGUAL      reduce using rule 92 (valor -> FALSE .)
    AND             reduce using rule 92 (valor -> FALSE .)
    INTERROGACION   reduce using rule 92 (valor -> FALSE .)
    OR              reduce using rule 92 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 92 (valor -> FALSE .)
    PARDER          reduce using rule 92 (valor -> FALSE .)
    DOSPUNTOS       reduce using rule 92 (valor -> FALSE .)
    COMA            reduce using rule 92 (valor -> FALSE .)


state 62

    (93) valor -> NULL .

    POR             reduce using rule 93 (valor -> NULL .)
    DIVIDIDO        reduce using rule 93 (valor -> NULL .)
    MODULO          reduce using rule 93 (valor -> NULL .)
    EQUIVALENTE     reduce using rule 93 (valor -> NULL .)
    DISTINTO        reduce using rule 93 (valor -> NULL .)
    MAS             reduce using rule 93 (valor -> NULL .)
    MENOS           reduce using rule 93 (valor -> NULL .)
    MAYOR           reduce using rule 93 (valor -> NULL .)
    MENOR           reduce using rule 93 (valor -> NULL .)
    MAYORIGUAL      reduce using rule 93 (valor -> NULL .)
    MENORIGUAL      reduce using rule 93 (valor -> NULL .)
    AND             reduce using rule 93 (valor -> NULL .)
    INTERROGACION   reduce using rule 93 (valor -> NULL .)
    OR              reduce using rule 93 (valor -> NULL .)
    PUNTOCOMA       reduce using rule 93 (valor -> NULL .)
    PARDER          reduce using rule 93 (valor -> NULL .)
    DOSPUNTOS       reduce using rule 93 (valor -> NULL .)
    COMA            reduce using rule 93 (valor -> NULL .)


state 63

    (94) valor -> ID .

    POR             reduce using rule 94 (valor -> ID .)
    DIVIDIDO        reduce using rule 94 (valor -> ID .)
    MODULO          reduce using rule 94 (valor -> ID .)
    EQUIVALENTE     reduce using rule 94 (valor -> ID .)
    DISTINTO        reduce using rule 94 (valor -> ID .)
    MAS             reduce using rule 94 (valor -> ID .)
    MENOS           reduce using rule 94 (valor -> ID .)
    MAYOR           reduce using rule 94 (valor -> ID .)
    MENOR           reduce using rule 94 (valor -> ID .)
    MAYORIGUAL      reduce using rule 94 (valor -> ID .)
    MENORIGUAL      reduce using rule 94 (valor -> ID .)
    AND             reduce using rule 94 (valor -> ID .)
    INTERROGACION   reduce using rule 94 (valor -> ID .)
    OR              reduce using rule 94 (valor -> ID .)
    PUNTOCOMA       reduce using rule 94 (valor -> ID .)
    PARDER          reduce using rule 94 (valor -> ID .)
    DOSPUNTOS       reduce using rule 94 (valor -> ID .)
    COMA            reduce using rule 94 (valor -> ID .)


state 64

    (22) sSwitch -> SWITCH PARIZQ . op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 97
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 65

    (15) declaracion_Funcion -> FUNCTION ID . PARIZQ parametros tipoFuncion instrucciones LLAVDER

    PARIZQ          shift and go to state 98


state 66

    (55) imprimir_instr -> CONSOLE PUNTO LOG . PARIZQ lista_exp PARDER PUNTOCOMA

    PARIZQ          shift and go to state 99


state 67

    (43) declaracion -> tipoVar ID DOSPUNTOS . tipo declaracion_explicita
    (50) tipo -> . NUMBER
    (51) tipo -> . FLOAT
    (52) tipo -> . STRING
    (53) tipo -> . BOOLEAN
    (54) tipo -> . CHAR

    NUMBER          shift and go to state 101
    FLOAT           shift and go to state 102
    STRING          shift and go to state 103
    BOOLEAN         shift and go to state 104
    CHAR            shift and go to state 105

    tipo                           shift and go to state 100

state 68

    (44) declaracion -> tipoVar ID declaracion_implicita .

    CONSOLE         reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    ID              reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    IF              reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    WHILE           reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    FOR             reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    CONTINUE        reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    BREAK           reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    RETURN          reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    SWITCH          reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    FUNCTION        reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    VAR             reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    CONST           reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    $end            reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    NOT             reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    PARIZQ          reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    MENOS           reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    ENTERO          reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    CADENA          reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    DECIMAL         reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    CARACTER        reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    TRUE            reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    FALSE           reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    NULL            reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    LLAVDER         reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    CASE            reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)
    DEFAULT         reduce using rule 44 (declaracion -> tipoVar ID declaracion_implicita .)


state 69

    (47) declaracion_implicita -> IGUAL . op_Ternario PUNTOCOMA
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 106
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 70

    (38) asignacion -> ID IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 38 (asignacion -> ID IGUAL op_Ternario .)
    PARDER          reduce using rule 38 (asignacion -> ID IGUAL op_Ternario .)


state 71

    (41) asignacion -> ID MAS MAS .

    PUNTOCOMA       reduce using rule 41 (asignacion -> ID MAS MAS .)
    PARDER          reduce using rule 41 (asignacion -> ID MAS MAS .)


state 72

    (39) asignacion -> ID MAS IGUAL . op_Ternario
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 107
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 73

    (42) asignacion -> ID MENOS MENOS .

    PUNTOCOMA       reduce using rule 42 (asignacion -> ID MENOS MENOS .)
    PARDER          reduce using rule 42 (asignacion -> ID MENOS MENOS .)


state 74

    (40) asignacion -> ID MENOS IGUAL . op_Ternario
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 108
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 75

    (33) sIf -> IF PARIZQ op_Ternario . PARDER LLAVIZQ instrucciones sIf2

    PARDER          shift and go to state 109


state 76

    (32) sWhile -> WHILE PARIZQ op_Ternario . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 110


state 77

    (31) sFor -> FOR PARIZQ declaracion . op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 111
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 78

    (30) sReturn -> RETURN op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    ID              reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    IF              reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    FUNCTION        reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    $end            reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 30 (sReturn -> RETURN op_Ternario PUNTOCOMA .)


state 79

    (58) op_Ternario -> exp_Or INTERROGACION . exp_Or DOSPUNTOS exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Or                         shift and go to state 112
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 80

    (60) exp_Or -> exp_Or OR . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_And                        shift and go to state 113
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 81

    (62) exp_And -> exp_And AND . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Not                        shift and go to state 114
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 82

    (64) exp_Not -> lNot exp_Comp .

    AND             reduce using rule 64 (exp_Not -> lNot exp_Comp .)
    INTERROGACION   reduce using rule 64 (exp_Not -> lNot exp_Comp .)
    OR              reduce using rule 64 (exp_Not -> lNot exp_Comp .)
    PUNTOCOMA       reduce using rule 64 (exp_Not -> lNot exp_Comp .)
    PARDER          reduce using rule 64 (exp_Not -> lNot exp_Comp .)
    DOSPUNTOS       reduce using rule 64 (exp_Not -> lNot exp_Comp .)
    COMA            reduce using rule 64 (exp_Not -> lNot exp_Comp .)


state 83

    (66) lNot -> lNot NOT .

    NOT             reduce using rule 66 (lNot -> lNot NOT .)
    PARIZQ          reduce using rule 66 (lNot -> lNot NOT .)
    MENOS           reduce using rule 66 (lNot -> lNot NOT .)
    ENTERO          reduce using rule 66 (lNot -> lNot NOT .)
    CADENA          reduce using rule 66 (lNot -> lNot NOT .)
    DECIMAL         reduce using rule 66 (lNot -> lNot NOT .)
    CARACTER        reduce using rule 66 (lNot -> lNot NOT .)
    TRUE            reduce using rule 66 (lNot -> lNot NOT .)
    FALSE           reduce using rule 66 (lNot -> lNot NOT .)
    NULL            reduce using rule 66 (lNot -> lNot NOT .)
    ID              reduce using rule 66 (lNot -> lNot NOT .)


state 84

    (68) exp_Comp -> exp_Sum_Menos EQUIVALENTE . exp_Sum_Menos
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Sum_Menos                  shift and go to state 115
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 85

    (69) exp_Comp -> exp_Sum_Menos DISTINTO . exp_Sum_Menos
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Sum_Menos                  shift and go to state 116
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 86

    (76) exp_Sum_Menos -> exp_Sum_Menos MAS . exp_Mul_Div
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Mul_Div                    shift and go to state 117
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 87

    (77) exp_Sum_Menos -> exp_Sum_Menos MENOS . exp_Mul_Div
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Mul_Div                    shift and go to state 118
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 88

    (71) exp_rel -> exp_Sum_Menos MAYOR . exp_Sum_Menos
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Sum_Menos                  shift and go to state 119
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 89

    (72) exp_rel -> exp_Sum_Menos MENOR . exp_Sum_Menos
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Sum_Menos                  shift and go to state 120
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 90

    (73) exp_rel -> exp_Sum_Menos MAYORIGUAL . exp_Sum_Menos
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Sum_Menos                  shift and go to state 121
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 91

    (74) exp_rel -> exp_Sum_Menos MENORIGUAL . exp_Sum_Menos
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Sum_Menos                  shift and go to state 122
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 92

    (79) exp_Mul_Div -> exp_Mul_Div POR . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Parentesis                 shift and go to state 123
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 93

    (80) exp_Mul_Div -> exp_Mul_Div DIVIDIDO . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Parentesis                 shift and go to state 124
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 94

    (81) exp_Mul_Div -> exp_Mul_Div MODULO . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Parentesis                 shift and go to state 125
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 95

    (85) exp_Negativo -> MENOS valor .

    POR             reduce using rule 85 (exp_Negativo -> MENOS valor .)
    DIVIDIDO        reduce using rule 85 (exp_Negativo -> MENOS valor .)
    MODULO          reduce using rule 85 (exp_Negativo -> MENOS valor .)
    EQUIVALENTE     reduce using rule 85 (exp_Negativo -> MENOS valor .)
    DISTINTO        reduce using rule 85 (exp_Negativo -> MENOS valor .)
    MAS             reduce using rule 85 (exp_Negativo -> MENOS valor .)
    MENOS           reduce using rule 85 (exp_Negativo -> MENOS valor .)
    MAYOR           reduce using rule 85 (exp_Negativo -> MENOS valor .)
    MENOR           reduce using rule 85 (exp_Negativo -> MENOS valor .)
    MAYORIGUAL      reduce using rule 85 (exp_Negativo -> MENOS valor .)
    MENORIGUAL      reduce using rule 85 (exp_Negativo -> MENOS valor .)
    AND             reduce using rule 85 (exp_Negativo -> MENOS valor .)
    INTERROGACION   reduce using rule 85 (exp_Negativo -> MENOS valor .)
    OR              reduce using rule 85 (exp_Negativo -> MENOS valor .)
    PUNTOCOMA       reduce using rule 85 (exp_Negativo -> MENOS valor .)
    PARDER          reduce using rule 85 (exp_Negativo -> MENOS valor .)
    DOSPUNTOS       reduce using rule 85 (exp_Negativo -> MENOS valor .)
    COMA            reduce using rule 85 (exp_Negativo -> MENOS valor .)


state 96

    (83) exp_Parentesis -> PARIZQ exp_Or . PARDER
    (60) exp_Or -> exp_Or . OR exp_And

    PARDER          shift and go to state 126
    OR              shift and go to state 80


state 97

    (22) sSwitch -> SWITCH PARIZQ op_Ternario . PARDER LLAVIZQ listCases LLAVDER

    PARDER          shift and go to state 127


state 98

    (15) declaracion_Funcion -> FUNCTION ID PARIZQ . parametros tipoFuncion instrucciones LLAVDER
    (16) parametros -> . PARDER
    (17) parametros -> . lista_Parametros PARDER
    (18) lista_Parametros -> . lista_Parametros COMA ID DOSPUNTOS tipo
    (19) lista_Parametros -> . ID DOSPUNTOS tipo

    PARDER          shift and go to state 130
    ID              shift and go to state 128

    parametros                     shift and go to state 129
    lista_Parametros               shift and go to state 131

state 99

    (55) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ . lista_exp PARDER PUNTOCOMA
    (56) lista_exp -> . lista_exp COMA op_Ternario
    (57) lista_exp -> . op_Ternario
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    lista_exp                      shift and go to state 132
    op_Ternario                    shift and go to state 133
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 100

    (43) declaracion -> tipoVar ID DOSPUNTOS tipo . declaracion_explicita
    (45) declaracion_explicita -> . PUNTOCOMA
    (46) declaracion_explicita -> . IGUAL op_Ternario PUNTOCOMA

    PUNTOCOMA       shift and go to state 135
    IGUAL           shift and go to state 136

    declaracion_explicita          shift and go to state 134

state 101

    (50) tipo -> NUMBER .

    PUNTOCOMA       reduce using rule 50 (tipo -> NUMBER .)
    IGUAL           reduce using rule 50 (tipo -> NUMBER .)
    PARDER          reduce using rule 50 (tipo -> NUMBER .)
    COMA            reduce using rule 50 (tipo -> NUMBER .)
    LLAVIZQ         reduce using rule 50 (tipo -> NUMBER .)


state 102

    (51) tipo -> FLOAT .

    PUNTOCOMA       reduce using rule 51 (tipo -> FLOAT .)
    IGUAL           reduce using rule 51 (tipo -> FLOAT .)
    PARDER          reduce using rule 51 (tipo -> FLOAT .)
    COMA            reduce using rule 51 (tipo -> FLOAT .)
    LLAVIZQ         reduce using rule 51 (tipo -> FLOAT .)


state 103

    (52) tipo -> STRING .

    PUNTOCOMA       reduce using rule 52 (tipo -> STRING .)
    IGUAL           reduce using rule 52 (tipo -> STRING .)
    PARDER          reduce using rule 52 (tipo -> STRING .)
    COMA            reduce using rule 52 (tipo -> STRING .)
    LLAVIZQ         reduce using rule 52 (tipo -> STRING .)


state 104

    (53) tipo -> BOOLEAN .

    PUNTOCOMA       reduce using rule 53 (tipo -> BOOLEAN .)
    IGUAL           reduce using rule 53 (tipo -> BOOLEAN .)
    PARDER          reduce using rule 53 (tipo -> BOOLEAN .)
    COMA            reduce using rule 53 (tipo -> BOOLEAN .)
    LLAVIZQ         reduce using rule 53 (tipo -> BOOLEAN .)


state 105

    (54) tipo -> CHAR .

    PUNTOCOMA       reduce using rule 54 (tipo -> CHAR .)
    IGUAL           reduce using rule 54 (tipo -> CHAR .)
    PARDER          reduce using rule 54 (tipo -> CHAR .)
    COMA            reduce using rule 54 (tipo -> CHAR .)
    LLAVIZQ         reduce using rule 54 (tipo -> CHAR .)


state 106

    (47) declaracion_implicita -> IGUAL op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 137


state 107

    (39) asignacion -> ID MAS IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 39 (asignacion -> ID MAS IGUAL op_Ternario .)
    PARDER          reduce using rule 39 (asignacion -> ID MAS IGUAL op_Ternario .)


state 108

    (40) asignacion -> ID MENOS IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 40 (asignacion -> ID MENOS IGUAL op_Ternario .)
    PARDER          reduce using rule 40 (asignacion -> ID MENOS IGUAL op_Ternario .)


state 109

    (33) sIf -> IF PARIZQ op_Ternario PARDER . LLAVIZQ instrucciones sIf2

    LLAVIZQ         shift and go to state 138


state 110

    (32) sWhile -> WHILE PARIZQ op_Ternario PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 139


state 111

    (31) sFor -> FOR PARIZQ declaracion op_Ternario . PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER

    PUNTOCOMA       shift and go to state 140


state 112

    (58) op_Ternario -> exp_Or INTERROGACION exp_Or . DOSPUNTOS exp_Or
    (60) exp_Or -> exp_Or . OR exp_And

    DOSPUNTOS       shift and go to state 141
    OR              shift and go to state 80


state 113

    (60) exp_Or -> exp_Or OR exp_And .
    (62) exp_And -> exp_And . AND exp_Not

    INTERROGACION   reduce using rule 60 (exp_Or -> exp_Or OR exp_And .)
    OR              reduce using rule 60 (exp_Or -> exp_Or OR exp_And .)
    PUNTOCOMA       reduce using rule 60 (exp_Or -> exp_Or OR exp_And .)
    PARDER          reduce using rule 60 (exp_Or -> exp_Or OR exp_And .)
    DOSPUNTOS       reduce using rule 60 (exp_Or -> exp_Or OR exp_And .)
    COMA            reduce using rule 60 (exp_Or -> exp_Or OR exp_And .)
    AND             shift and go to state 81


state 114

    (62) exp_And -> exp_And AND exp_Not .

    AND             reduce using rule 62 (exp_And -> exp_And AND exp_Not .)
    INTERROGACION   reduce using rule 62 (exp_And -> exp_And AND exp_Not .)
    OR              reduce using rule 62 (exp_And -> exp_And AND exp_Not .)
    PUNTOCOMA       reduce using rule 62 (exp_And -> exp_And AND exp_Not .)
    PARDER          reduce using rule 62 (exp_And -> exp_And AND exp_Not .)
    DOSPUNTOS       reduce using rule 62 (exp_And -> exp_And AND exp_Not .)
    COMA            reduce using rule 62 (exp_And -> exp_And AND exp_Not .)


state 115

    (68) exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .
    (76) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (77) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 68 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    INTERROGACION   reduce using rule 68 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    OR              reduce using rule 68 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 68 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    PARDER          reduce using rule 68 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 68 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    COMA            reduce using rule 68 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87


state 116

    (69) exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .
    (76) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (77) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 69 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    INTERROGACION   reduce using rule 69 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    OR              reduce using rule 69 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 69 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    PARDER          reduce using rule 69 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 69 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    COMA            reduce using rule 69 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87


state 117

    (76) exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .
    (79) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (80) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    DISTINTO        reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAS             reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENOS           reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAYOR           reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENOR           reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENORIGUAL      reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    AND             reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    INTERROGACION   reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    OR              reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    PARDER          reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    COMA            reduce using rule 76 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    POR             shift and go to state 92
    DIVIDIDO        shift and go to state 93
    MODULO          shift and go to state 94


state 118

    (77) exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .
    (79) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (80) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    DISTINTO        reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAS             reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENOS           reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAYOR           reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENOR           reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENORIGUAL      reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    AND             reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    INTERROGACION   reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    OR              reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    PARDER          reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    COMA            reduce using rule 77 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    POR             shift and go to state 92
    DIVIDIDO        shift and go to state 93
    MODULO          shift and go to state 94


state 119

    (71) exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .
    (76) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (77) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 71 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    INTERROGACION   reduce using rule 71 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    OR              reduce using rule 71 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 71 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    PARDER          reduce using rule 71 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 71 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    COMA            reduce using rule 71 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87


state 120

    (72) exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .
    (76) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (77) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 72 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    INTERROGACION   reduce using rule 72 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    OR              reduce using rule 72 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 72 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    PARDER          reduce using rule 72 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 72 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    COMA            reduce using rule 72 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87


state 121

    (73) exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .
    (76) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (77) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 73 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    INTERROGACION   reduce using rule 73 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    OR              reduce using rule 73 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 73 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    PARDER          reduce using rule 73 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 73 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    COMA            reduce using rule 73 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87


state 122

    (74) exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .
    (76) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (77) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 74 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    INTERROGACION   reduce using rule 74 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    OR              reduce using rule 74 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 74 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    PARDER          reduce using rule 74 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 74 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    COMA            reduce using rule 74 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    MAS             shift and go to state 86
    MENOS           shift and go to state 87


state 123

    (79) exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .

    POR             reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DIVIDIDO        reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MODULO          reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    EQUIVALENTE     reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DISTINTO        reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAS             reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENOS           reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAYOR           reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENOR           reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAYORIGUAL      reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENORIGUAL      reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    AND             reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    INTERROGACION   reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    OR              reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    PUNTOCOMA       reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    PARDER          reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DOSPUNTOS       reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    COMA            reduce using rule 79 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)


state 124

    (80) exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .

    POR             reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DIVIDIDO        reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MODULO          reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    EQUIVALENTE     reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DISTINTO        reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAS             reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENOS           reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAYOR           reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENOR           reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAYORIGUAL      reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENORIGUAL      reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    AND             reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    INTERROGACION   reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    OR              reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    PUNTOCOMA       reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    PARDER          reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DOSPUNTOS       reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    COMA            reduce using rule 80 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)


state 125

    (81) exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .

    POR             reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DIVIDIDO        reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MODULO          reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    EQUIVALENTE     reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DISTINTO        reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAS             reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENOS           reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAYOR           reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENOR           reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAYORIGUAL      reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENORIGUAL      reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    AND             reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    INTERROGACION   reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    OR              reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    PUNTOCOMA       reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    PARDER          reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DOSPUNTOS       reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    COMA            reduce using rule 81 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)


state 126

    (83) exp_Parentesis -> PARIZQ exp_Or PARDER .

    POR             reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DIVIDIDO        reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MODULO          reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    EQUIVALENTE     reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DISTINTO        reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAS             reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENOS           reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAYOR           reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENOR           reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAYORIGUAL      reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENORIGUAL      reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    AND             reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    INTERROGACION   reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    OR              reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    PUNTOCOMA       reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    PARDER          reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DOSPUNTOS       reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    COMA            reduce using rule 83 (exp_Parentesis -> PARIZQ exp_Or PARDER .)


state 127

    (22) sSwitch -> SWITCH PARIZQ op_Ternario PARDER . LLAVIZQ listCases LLAVDER

    LLAVIZQ         shift and go to state 142


state 128

    (19) lista_Parametros -> ID . DOSPUNTOS tipo

    DOSPUNTOS       shift and go to state 143


state 129

    (15) declaracion_Funcion -> FUNCTION ID PARIZQ parametros . tipoFuncion instrucciones LLAVDER
    (20) tipoFuncion -> . DOSPUNTOS tipo LLAVIZQ
    (21) tipoFuncion -> . LLAVIZQ

    DOSPUNTOS       shift and go to state 145
    LLAVIZQ         shift and go to state 146

    tipoFuncion                    shift and go to state 144

state 130

    (16) parametros -> PARDER .

    DOSPUNTOS       reduce using rule 16 (parametros -> PARDER .)
    LLAVIZQ         reduce using rule 16 (parametros -> PARDER .)


state 131

    (17) parametros -> lista_Parametros . PARDER
    (18) lista_Parametros -> lista_Parametros . COMA ID DOSPUNTOS tipo

    PARDER          shift and go to state 147
    COMA            shift and go to state 148


state 132

    (55) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp . PARDER PUNTOCOMA
    (56) lista_exp -> lista_exp . COMA op_Ternario

    PARDER          shift and go to state 149
    COMA            shift and go to state 150


state 133

    (57) lista_exp -> op_Ternario .

    PARDER          reduce using rule 57 (lista_exp -> op_Ternario .)
    COMA            reduce using rule 57 (lista_exp -> op_Ternario .)


state 134

    (43) declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .

    CONSOLE         reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    ID              reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    IF              reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    WHILE           reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FOR             reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CONTINUE        reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    BREAK           reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    RETURN          reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    SWITCH          reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FUNCTION        reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    VAR             reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CONST           reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    $end            reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    NOT             reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    PARIZQ          reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    MENOS           reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    ENTERO          reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CADENA          reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    DECIMAL         reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CARACTER        reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    TRUE            reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FALSE           reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    NULL            reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    LLAVDER         reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CASE            reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    DEFAULT         reduce using rule 43 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)


state 135

    (45) declaracion_explicita -> PUNTOCOMA .

    CONSOLE         reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    ID              reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    IF              reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    WHILE           reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    FOR             reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    CONTINUE        reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    BREAK           reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    RETURN          reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    SWITCH          reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    FUNCTION        reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    VAR             reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    CONST           reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    $end            reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    NOT             reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    PARIZQ          reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    MENOS           reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    ENTERO          reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    CADENA          reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    DECIMAL         reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    CARACTER        reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    TRUE            reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    FALSE           reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    NULL            reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    LLAVDER         reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    CASE            reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)
    DEFAULT         reduce using rule 45 (declaracion_explicita -> PUNTOCOMA .)


state 136

    (46) declaracion_explicita -> IGUAL . op_Ternario PUNTOCOMA
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 151
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 137

    (47) declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    ID              reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    IF              reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FUNCTION        reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    $end            reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    NOT             reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    PARIZQ          reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    MENOS           reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    ENTERO          reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CADENA          reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    DECIMAL         reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CARACTER        reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    TRUE            reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FALSE           reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    NULL            reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 47 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)


state 138

    (33) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ . instrucciones sIf2
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instrucciones                  shift and go to state 152
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 139

    (32) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instrucciones                  shift and go to state 153
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 140

    (31) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA . asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS

    ID              shift and go to state 17

    asignacion                     shift and go to state 154

state 141

    (58) op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    exp_Or                         shift and go to state 155
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 142

    (22) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ . listCases LLAVDER
    (23) listCases -> . listCases CASE op_Ternario DOSPUNTOS instrucciones
    (24) listCases -> . listCases DEFAULT DOSPUNTOS instrucciones
    (25) listCases -> . CASE op_Ternario DOSPUNTOS instrucciones
    (26) listCases -> . DEFAULT DOSPUNTOS instrucciones

    CASE            shift and go to state 157
    DEFAULT         shift and go to state 158

    listCases                      shift and go to state 156

state 143

    (19) lista_Parametros -> ID DOSPUNTOS . tipo
    (50) tipo -> . NUMBER
    (51) tipo -> . FLOAT
    (52) tipo -> . STRING
    (53) tipo -> . BOOLEAN
    (54) tipo -> . CHAR

    NUMBER          shift and go to state 101
    FLOAT           shift and go to state 102
    STRING          shift and go to state 103
    BOOLEAN         shift and go to state 104
    CHAR            shift and go to state 105

    tipo                           shift and go to state 159

state 144

    (15) declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instrucciones                  shift and go to state 160
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 145

    (20) tipoFuncion -> DOSPUNTOS . tipo LLAVIZQ
    (50) tipo -> . NUMBER
    (51) tipo -> . FLOAT
    (52) tipo -> . STRING
    (53) tipo -> . BOOLEAN
    (54) tipo -> . CHAR

    NUMBER          shift and go to state 101
    FLOAT           shift and go to state 102
    STRING          shift and go to state 103
    BOOLEAN         shift and go to state 104
    CHAR            shift and go to state 105

    tipo                           shift and go to state 161

state 146

    (21) tipoFuncion -> LLAVIZQ .

    CONSOLE         reduce using rule 21 (tipoFuncion -> LLAVIZQ .)
    ID              reduce using rule 21 (tipoFuncion -> LLAVIZQ .)
    IF              reduce using rule 21 (tipoFuncion -> LLAVIZQ .)
    WHILE           reduce using rule 21 (tipoFuncion -> LLAVIZQ .)
    FOR             reduce using rule 21 (tipoFuncion -> LLAVIZQ .)
    CONTINUE        reduce using rule 21 (tipoFuncion -> LLAVIZQ .)
    BREAK           reduce using rule 21 (tipoFuncion -> LLAVIZQ .)
    RETURN          reduce using rule 21 (tipoFuncion -> LLAVIZQ .)
    SWITCH          reduce using rule 21 (tipoFuncion -> LLAVIZQ .)
    FUNCTION        reduce using rule 21 (tipoFuncion -> LLAVIZQ .)
    VAR             reduce using rule 21 (tipoFuncion -> LLAVIZQ .)
    CONST           reduce using rule 21 (tipoFuncion -> LLAVIZQ .)


state 147

    (17) parametros -> lista_Parametros PARDER .

    DOSPUNTOS       reduce using rule 17 (parametros -> lista_Parametros PARDER .)
    LLAVIZQ         reduce using rule 17 (parametros -> lista_Parametros PARDER .)


state 148

    (18) lista_Parametros -> lista_Parametros COMA . ID DOSPUNTOS tipo

    ID              shift and go to state 162


state 149

    (55) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 163


state 150

    (56) lista_exp -> lista_exp COMA . op_Ternario
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 164
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 151

    (46) declaracion_explicita -> IGUAL op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 165


state 152

    (33) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones . sIf2
    (2) instrucciones -> instrucciones . instruccion
    (34) sIf2 -> . LLAVDER ELSE sElse
    (35) sIf2 -> . LLAVDER
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    LLAVDER         shift and go to state 167
    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    sIf2                           shift and go to state 166
    instruccion                    shift and go to state 28
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 153

    (32) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    LLAVDER         shift and go to state 168
    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instruccion                    shift and go to state 28
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 154

    (31) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 169


state 155

    (58) op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .
    (60) exp_Or -> exp_Or . OR exp_And

    PUNTOCOMA       reduce using rule 58 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    PARDER          reduce using rule 58 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    COMA            reduce using rule 58 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    DOSPUNTOS       reduce using rule 58 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    OR              shift and go to state 80


state 156

    (22) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases . LLAVDER
    (23) listCases -> listCases . CASE op_Ternario DOSPUNTOS instrucciones
    (24) listCases -> listCases . DEFAULT DOSPUNTOS instrucciones

    LLAVDER         shift and go to state 170
    CASE            shift and go to state 171
    DEFAULT         shift and go to state 172


state 157

    (25) listCases -> CASE . op_Ternario DOSPUNTOS instrucciones
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 173
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 158

    (26) listCases -> DEFAULT . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 174


state 159

    (19) lista_Parametros -> ID DOSPUNTOS tipo .

    PARDER          reduce using rule 19 (lista_Parametros -> ID DOSPUNTOS tipo .)
    COMA            reduce using rule 19 (lista_Parametros -> ID DOSPUNTOS tipo .)


state 160

    (15) declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    LLAVDER         shift and go to state 175
    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instruccion                    shift and go to state 28
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 161

    (20) tipoFuncion -> DOSPUNTOS tipo . LLAVIZQ

    LLAVIZQ         shift and go to state 176


state 162

    (18) lista_Parametros -> lista_Parametros COMA ID . DOSPUNTOS tipo

    DOSPUNTOS       shift and go to state 177


state 163

    (55) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .

    CONSOLE         reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    ID              reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    IF              reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    WHILE           reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    FOR             reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CONTINUE        reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    BREAK           reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    RETURN          reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    SWITCH          reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    FUNCTION        reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    VAR             reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CONST           reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    $end            reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    LLAVDER         reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CASE            reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    DEFAULT         reduce using rule 55 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)


state 164

    (56) lista_exp -> lista_exp COMA op_Ternario .

    PARDER          reduce using rule 56 (lista_exp -> lista_exp COMA op_Ternario .)
    COMA            reduce using rule 56 (lista_exp -> lista_exp COMA op_Ternario .)


state 165

    (46) declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    ID              reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    IF              reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FUNCTION        reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    $end            reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    NOT             reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    PARIZQ          reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    MENOS           reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    ENTERO          reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CADENA          reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    DECIMAL         reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CARACTER        reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    TRUE            reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FALSE           reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    NULL            reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 46 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)


state 166

    (33) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .

    CONSOLE         reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    ID              reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    IF              reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    WHILE           reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    FOR             reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CONTINUE        reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    BREAK           reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    RETURN          reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    SWITCH          reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    FUNCTION        reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    VAR             reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CONST           reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    $end            reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    LLAVDER         reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CASE            reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    DEFAULT         reduce using rule 33 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)


state 167

    (34) sIf2 -> LLAVDER . ELSE sElse
    (35) sIf2 -> LLAVDER .

    ELSE            shift and go to state 178
    CONSOLE         reduce using rule 35 (sIf2 -> LLAVDER .)
    ID              reduce using rule 35 (sIf2 -> LLAVDER .)
    IF              reduce using rule 35 (sIf2 -> LLAVDER .)
    WHILE           reduce using rule 35 (sIf2 -> LLAVDER .)
    FOR             reduce using rule 35 (sIf2 -> LLAVDER .)
    CONTINUE        reduce using rule 35 (sIf2 -> LLAVDER .)
    BREAK           reduce using rule 35 (sIf2 -> LLAVDER .)
    RETURN          reduce using rule 35 (sIf2 -> LLAVDER .)
    SWITCH          reduce using rule 35 (sIf2 -> LLAVDER .)
    FUNCTION        reduce using rule 35 (sIf2 -> LLAVDER .)
    VAR             reduce using rule 35 (sIf2 -> LLAVDER .)
    CONST           reduce using rule 35 (sIf2 -> LLAVDER .)
    $end            reduce using rule 35 (sIf2 -> LLAVDER .)
    LLAVDER         reduce using rule 35 (sIf2 -> LLAVDER .)
    CASE            reduce using rule 35 (sIf2 -> LLAVDER .)
    DEFAULT         reduce using rule 35 (sIf2 -> LLAVDER .)


state 168

    (32) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNCTION        reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 32 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)


state 169

    (31) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 179


state 170

    (22) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .

    CONSOLE         reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    ID              reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    IF              reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    WHILE           reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    FOR             reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CONTINUE        reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    BREAK           reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    RETURN          reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    SWITCH          reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    FUNCTION        reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    VAR             reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CONST           reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    $end            reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    LLAVDER         reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CASE            reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    DEFAULT         reduce using rule 22 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)


state 171

    (23) listCases -> listCases CASE . op_Ternario DOSPUNTOS instrucciones
    (58) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (59) op_Ternario -> . exp_Or
    (60) exp_Or -> . exp_Or OR exp_And
    (61) exp_Or -> . exp_And
    (62) exp_And -> . exp_And AND exp_Not
    (63) exp_And -> . exp_Not
    (64) exp_Not -> . lNot exp_Comp
    (65) exp_Not -> . exp_Comp
    (66) lNot -> . lNot NOT
    (67) lNot -> . NOT
    (68) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (69) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (70) exp_Comp -> . exp_rel
    (76) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (77) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (78) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (72) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (73) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (74) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (75) exp_rel -> . exp_Sum_Menos
    (79) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (80) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (81) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (82) exp_Mul_Div -> . exp_Parentesis
    (83) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (84) exp_Parentesis -> . exp_Negativo
    (85) exp_Negativo -> . MENOS valor
    (86) exp_Negativo -> . valor
    (87) valor -> . ENTERO
    (88) valor -> . CADENA
    (89) valor -> . DECIMAL
    (90) valor -> . CARACTER
    (91) valor -> . TRUE
    (92) valor -> . FALSE
    (93) valor -> . NULL
    (94) valor -> . ID

    NOT             shift and go to state 47
    PARIZQ          shift and go to state 53
    MENOS           shift and go to state 51
    ENTERO          shift and go to state 56
    CADENA          shift and go to state 57
    DECIMAL         shift and go to state 58
    CARACTER        shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    NULL            shift and go to state 62
    ID              shift and go to state 63

    op_Ternario                    shift and go to state 180
    exp_Or                         shift and go to state 42
    exp_And                        shift and go to state 43
    exp_Not                        shift and go to state 44
    lNot                           shift and go to state 45
    exp_Comp                       shift and go to state 46
    exp_Sum_Menos                  shift and go to state 48
    exp_rel                        shift and go to state 49
    exp_Mul_Div                    shift and go to state 50
    exp_Parentesis                 shift and go to state 52
    exp_Negativo                   shift and go to state 54
    valor                          shift and go to state 55

state 172

    (24) listCases -> listCases DEFAULT . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 181


state 173

    (25) listCases -> CASE op_Ternario . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 182


state 174

    (26) listCases -> DEFAULT DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instrucciones                  shift and go to state 183
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 175

    (15) declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .

    CONSOLE         reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    ID              reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    IF              reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    WHILE           reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    FOR             reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    CONTINUE        reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    BREAK           reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    RETURN          reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    SWITCH          reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    FUNCTION        reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    VAR             reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    CONST           reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    $end            reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    LLAVDER         reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    CASE            reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    DEFAULT         reduce using rule 15 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)


state 176

    (20) tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .

    CONSOLE         reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    ID              reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    IF              reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    WHILE           reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    FOR             reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    CONTINUE        reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    BREAK           reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    RETURN          reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    SWITCH          reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    FUNCTION        reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    VAR             reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    CONST           reduce using rule 20 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)


state 177

    (18) lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS . tipo
    (50) tipo -> . NUMBER
    (51) tipo -> . FLOAT
    (52) tipo -> . STRING
    (53) tipo -> . BOOLEAN
    (54) tipo -> . CHAR

    NUMBER          shift and go to state 101
    FLOAT           shift and go to state 102
    STRING          shift and go to state 103
    BOOLEAN         shift and go to state 104
    CHAR            shift and go to state 105

    tipo                           shift and go to state 184

state 178

    (34) sIf2 -> LLAVDER ELSE . sElse
    (36) sElse -> . LLAVIZQ instrucciones LLAVDER
    (37) sElse -> . sIf
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2

    LLAVIZQ         shift and go to state 186
    IF              shift and go to state 18

    sElse                          shift and go to state 185
    sIf                            shift and go to state 187

state 179

    (31) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    instrucciones                  shift and go to state 188
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 180

    (23) listCases -> listCases CASE op_Ternario . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 189


state 181

    (24) listCases -> listCases DEFAULT DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instrucciones                  shift and go to state 190
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 182

    (25) listCases -> CASE op_Ternario DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instrucciones                  shift and go to state 191
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 183

    (26) listCases -> DEFAULT DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    LLAVDER         reduce using rule 26 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    CASE            reduce using rule 26 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 26 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instruccion                    shift and go to state 28
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 184

    (18) lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo .

    PARDER          reduce using rule 18 (lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo .)
    COMA            reduce using rule 18 (lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo .)


state 185

    (34) sIf2 -> LLAVDER ELSE sElse .

    CONSOLE         reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    ID              reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    IF              reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    WHILE           reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    FOR             reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    CONTINUE        reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    BREAK           reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    RETURN          reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    SWITCH          reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    FUNCTION        reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    VAR             reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    CONST           reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    $end            reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    LLAVDER         reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    CASE            reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)
    DEFAULT         reduce using rule 34 (sIf2 -> LLAVDER ELSE sElse .)


state 186

    (36) sElse -> LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instrucciones                  shift and go to state 192
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 187

    (37) sElse -> sIf .

    CONSOLE         reduce using rule 37 (sElse -> sIf .)
    ID              reduce using rule 37 (sElse -> sIf .)
    IF              reduce using rule 37 (sElse -> sIf .)
    WHILE           reduce using rule 37 (sElse -> sIf .)
    FOR             reduce using rule 37 (sElse -> sIf .)
    CONTINUE        reduce using rule 37 (sElse -> sIf .)
    BREAK           reduce using rule 37 (sElse -> sIf .)
    RETURN          reduce using rule 37 (sElse -> sIf .)
    SWITCH          reduce using rule 37 (sElse -> sIf .)
    FUNCTION        reduce using rule 37 (sElse -> sIf .)
    VAR             reduce using rule 37 (sElse -> sIf .)
    CONST           reduce using rule 37 (sElse -> sIf .)
    $end            reduce using rule 37 (sElse -> sIf .)
    LLAVDER         reduce using rule 37 (sElse -> sIf .)
    CASE            reduce using rule 37 (sElse -> sIf .)
    DEFAULT         reduce using rule 37 (sElse -> sIf .)


state 188

    (31) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    LLAVDER         shift and go to state 193
    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    instruccion                    shift and go to state 28
    imprimir_instr                 shift and go to state 4
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 189

    (23) listCases -> listCases CASE op_Ternario DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instrucciones                  shift and go to state 194
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 190

    (24) listCases -> listCases DEFAULT DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    LLAVDER         reduce using rule 24 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    CASE            reduce using rule 24 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 24 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instruccion                    shift and go to state 28
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 191

    (25) listCases -> CASE op_Ternario DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    LLAVDER         reduce using rule 25 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    CASE            reduce using rule 25 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 25 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instruccion                    shift and go to state 28
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 192

    (36) sElse -> LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    LLAVDER         shift and go to state 195
    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instruccion                    shift and go to state 28
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 193

    (31) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNCTION        reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 31 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)


state 194

    (23) listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (55) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (43) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (44) declaracion -> . tipoVar ID declaracion_implicita
    (38) asignacion -> . ID IGUAL op_Ternario
    (39) asignacion -> . ID MAS IGUAL op_Ternario
    (40) asignacion -> . ID MENOS IGUAL op_Ternario
    (41) asignacion -> . ID MAS MAS
    (42) asignacion -> . ID MENOS MENOS
    (33) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (32) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (31) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (27) sContinue -> . CONTINUE PUNTOCOMA
    (28) sBreak -> . BREAK PUNTOCOMA
    (29) sReturn -> . RETURN PUNTOCOMA
    (30) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (22) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (15) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (48) tipoVar -> . VAR
    (49) tipoVar -> . CONST

    LLAVDER         reduce using rule 23 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    CASE            reduce using rule 23 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 23 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 15
    ID              shift and go to state 17
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    CONTINUE        shift and go to state 21
    BREAK           shift and go to state 22
    RETURN          shift and go to state 23
    SWITCH          shift and go to state 24
    FUNCTION        shift and go to state 25
    VAR             shift and go to state 26
    CONST           shift and go to state 27

    instruccion                    shift and go to state 28
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    tipoVar                        shift and go to state 16

state 195

    (36) sElse -> LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    FUNCTION        reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 36 (sElse -> LLAVIZQ instrucciones LLAVDER .)

