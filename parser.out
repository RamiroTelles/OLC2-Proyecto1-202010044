Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTBLOCK
    FUNCTION
    INTERFACE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> imprimir_instr
Rule 5     instruccion -> declaracion
Rule 6     instruccion -> asignacion PUNTOCOMA
Rule 7     instruccion -> sIf
Rule 8     instruccion -> sWhile
Rule 9     instruccion -> sFor
Rule 10    instruccion -> sContinue
Rule 11    instruccion -> sBreak
Rule 12    instruccion -> sReturn
Rule 13    sContinue -> CONTINUE PUNTOCOMA
Rule 14    sBreak -> BREAK PUNTOCOMA
Rule 15    sReturn -> RETURN PUNTOCOMA
Rule 16    sReturn -> RETURN op_Ternario PUNTOCOMA
Rule 17    sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
Rule 18    sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
Rule 19    sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
Rule 20    sIf2 -> LLAVDER ELSE sElse
Rule 21    sIf2 -> LLAVDER
Rule 22    sElse -> LLAVIZQ instrucciones LLAVDER
Rule 23    sElse -> sIf
Rule 24    asignacion -> ID IGUAL op_Ternario
Rule 25    asignacion -> ID MAS IGUAL op_Ternario
Rule 26    asignacion -> ID MENOS IGUAL op_Ternario
Rule 27    asignacion -> ID MAS MAS
Rule 28    asignacion -> ID MENOS MENOS
Rule 29    declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita
Rule 30    declaracion -> tipoVar ID declaracion_implicita
Rule 31    declaracion_explicita -> PUNTOCOMA
Rule 32    declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA
Rule 33    declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA
Rule 34    tipoVar -> VAR
Rule 35    tipoVar -> CONST
Rule 36    tipo -> NUMBER
Rule 37    tipo -> FLOAT
Rule 38    tipo -> STRING
Rule 39    tipo -> BOOLEAN
Rule 40    tipo -> CHAR
Rule 41    imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
Rule 42    lista_exp -> lista_exp COMA op_Ternario
Rule 43    lista_exp -> op_Ternario
Rule 44    op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
Rule 45    op_Ternario -> exp_Or
Rule 46    exp_Or -> exp_Or OR exp_And
Rule 47    exp_Or -> exp_And
Rule 48    exp_And -> exp_And AND exp_Not
Rule 49    exp_And -> exp_Not
Rule 50    exp_Not -> lNot exp_Comp
Rule 51    exp_Not -> exp_Comp
Rule 52    lNot -> lNot NOT
Rule 53    lNot -> NOT
Rule 54    exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
Rule 55    exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos
Rule 56    exp_Comp -> exp_rel
Rule 57    exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos
Rule 58    exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos
Rule 59    exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
Rule 60    exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos
Rule 61    exp_rel -> exp_Sum_Menos
Rule 62    exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div
Rule 63    exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div
Rule 64    exp_Sum_Menos -> exp_Mul_Div
Rule 65    exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis
Rule 66    exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis
Rule 67    exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis
Rule 68    exp_Mul_Div -> exp_Parentesis
Rule 69    exp_Parentesis -> PARIZQ exp_Or PARDER
Rule 70    exp_Parentesis -> exp_Negativo
Rule 71    exp_Negativo -> MENOS valor
Rule 72    exp_Negativo -> valor
Rule 73    valor -> ENTERO
Rule 74    valor -> CADENA
Rule 75    valor -> DECIMAL
Rule 76    valor -> CARACTER
Rule 77    valor -> TRUE
Rule 78    valor -> FALSE
Rule 79    valor -> NULL
Rule 80    valor -> ID

Terminals, with rules where they appear

AND                  : 48
BOOLEAN              : 39
BREAK                : 14
CADENA               : 74
CARACTER             : 76
CHAR                 : 40
COMA                 : 42
COMMENTBLOCK         : 
CONSOLE              : 41
CONST                : 35
CONTINUE             : 13
DECIMAL              : 75
DISTINTO             : 55
DIVIDIDO             : 66
DOSPUNTOS            : 29 44
ELSE                 : 20
ENTERO               : 73
EQUIVALENTE          : 54
FALSE                : 78
FLOAT                : 37
FOR                  : 17
FUNCTION             : 
ID                   : 24 25 26 27 28 29 30 80
IF                   : 19
IGUAL                : 24 25 26 32 33
INTERFACE            : 
INTERROGACION        : 44
LLAVDER              : 17 18 20 21 22
LLAVIZQ              : 17 18 19 22
LOG                  : 41
MAS                  : 25 27 27 62
MAYOR                : 57
MAYORIGUAL           : 59
MENOR                : 58
MENORIGUAL           : 60
MENOS                : 26 28 28 63 71
MODULO               : 67
NOT                  : 52 53
NULL                 : 79
NUMBER               : 36
OR                   : 46
PARDER               : 17 18 19 41 69
PARIZQ               : 17 18 19 41 69
POR                  : 65
PUNTO                : 41
PUNTOCOMA            : 6 13 14 15 16 17 31 32 33 41
RETURN               : 15 16
STRING               : 38
TRUE                 : 77
VAR                  : 34
WHILE                : 18
error                : 

Nonterminals, with rules where they appear

asignacion           : 6 17
declaracion          : 5 17
declaracion_explicita : 29
declaracion_implicita : 30
exp_And              : 46 47 48
exp_Comp             : 50 51
exp_Mul_Div          : 62 63 64 65 66 67
exp_Negativo         : 70
exp_Not              : 48 49
exp_Or               : 44 44 44 45 46 69
exp_Parentesis       : 65 66 67 68
exp_Sum_Menos        : 54 54 55 55 57 57 58 58 59 59 60 60 61 62 63
exp_rel              : 56
imprimir_instr       : 4
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 17 18 19 22
lNot                 : 50 52
lista_exp            : 41 42
op_Ternario          : 16 17 18 19 24 25 26 32 33 42 43
sBreak               : 11
sContinue            : 10
sElse                : 20
sFor                 : 9
sIf                  : 7 23
sIf2                 : 19
sReturn              : 12
sWhile               : 8
tipo                 : 29
tipoVar              : 29 30
valor                : 71 72

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (41) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (29) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> . tipoVar ID declaracion_implicita
    (24) asignacion -> . ID IGUAL op_Ternario
    (25) asignacion -> . ID MAS IGUAL op_Ternario
    (26) asignacion -> . ID MENOS IGUAL op_Ternario
    (27) asignacion -> . ID MAS MAS
    (28) asignacion -> . ID MENOS MENOS
    (19) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (18) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (17) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (13) sContinue -> . CONTINUE PUNTOCOMA
    (14) sBreak -> . BREAK PUNTOCOMA
    (15) sReturn -> . RETURN PUNTOCOMA
    (16) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (34) tipoVar -> . VAR
    (35) tipoVar -> . CONST

    CONSOLE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 23

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    tipoVar                        shift and go to state 14

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (41) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (29) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> . tipoVar ID declaracion_implicita
    (24) asignacion -> . ID IGUAL op_Ternario
    (25) asignacion -> . ID MAS IGUAL op_Ternario
    (26) asignacion -> . ID MENOS IGUAL op_Ternario
    (27) asignacion -> . ID MAS MAS
    (28) asignacion -> . ID MENOS MENOS
    (19) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (18) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (17) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (13) sContinue -> . CONTINUE PUNTOCOMA
    (14) sBreak -> . BREAK PUNTOCOMA
    (15) sReturn -> . RETURN PUNTOCOMA
    (16) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (34) tipoVar -> . VAR
    (35) tipoVar -> . CONST

    $end            reduce using rule 1 (init -> instrucciones .)
    CONSOLE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 23

    instruccion                    shift and go to state 24
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    tipoVar                        shift and go to state 14

state 3

    (3) instrucciones -> instruccion .

    CONSOLE         reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
    VAR             reduce using rule 3 (instrucciones -> instruccion .)
    CONST           reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    LLAVDER         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> imprimir_instr .

    CONSOLE         reduce using rule 4 (instruccion -> imprimir_instr .)
    ID              reduce using rule 4 (instruccion -> imprimir_instr .)
    IF              reduce using rule 4 (instruccion -> imprimir_instr .)
    WHILE           reduce using rule 4 (instruccion -> imprimir_instr .)
    FOR             reduce using rule 4 (instruccion -> imprimir_instr .)
    CONTINUE        reduce using rule 4 (instruccion -> imprimir_instr .)
    BREAK           reduce using rule 4 (instruccion -> imprimir_instr .)
    RETURN          reduce using rule 4 (instruccion -> imprimir_instr .)
    VAR             reduce using rule 4 (instruccion -> imprimir_instr .)
    CONST           reduce using rule 4 (instruccion -> imprimir_instr .)
    $end            reduce using rule 4 (instruccion -> imprimir_instr .)
    LLAVDER         reduce using rule 4 (instruccion -> imprimir_instr .)


state 5

    (5) instruccion -> declaracion .

    CONSOLE         reduce using rule 5 (instruccion -> declaracion .)
    ID              reduce using rule 5 (instruccion -> declaracion .)
    IF              reduce using rule 5 (instruccion -> declaracion .)
    WHILE           reduce using rule 5 (instruccion -> declaracion .)
    FOR             reduce using rule 5 (instruccion -> declaracion .)
    CONTINUE        reduce using rule 5 (instruccion -> declaracion .)
    BREAK           reduce using rule 5 (instruccion -> declaracion .)
    RETURN          reduce using rule 5 (instruccion -> declaracion .)
    VAR             reduce using rule 5 (instruccion -> declaracion .)
    CONST           reduce using rule 5 (instruccion -> declaracion .)
    $end            reduce using rule 5 (instruccion -> declaracion .)
    LLAVDER         reduce using rule 5 (instruccion -> declaracion .)


state 6

    (6) instruccion -> asignacion . PUNTOCOMA

    PUNTOCOMA       shift and go to state 25


state 7

    (7) instruccion -> sIf .

    CONSOLE         reduce using rule 7 (instruccion -> sIf .)
    ID              reduce using rule 7 (instruccion -> sIf .)
    IF              reduce using rule 7 (instruccion -> sIf .)
    WHILE           reduce using rule 7 (instruccion -> sIf .)
    FOR             reduce using rule 7 (instruccion -> sIf .)
    CONTINUE        reduce using rule 7 (instruccion -> sIf .)
    BREAK           reduce using rule 7 (instruccion -> sIf .)
    RETURN          reduce using rule 7 (instruccion -> sIf .)
    VAR             reduce using rule 7 (instruccion -> sIf .)
    CONST           reduce using rule 7 (instruccion -> sIf .)
    $end            reduce using rule 7 (instruccion -> sIf .)
    LLAVDER         reduce using rule 7 (instruccion -> sIf .)


state 8

    (8) instruccion -> sWhile .

    CONSOLE         reduce using rule 8 (instruccion -> sWhile .)
    ID              reduce using rule 8 (instruccion -> sWhile .)
    IF              reduce using rule 8 (instruccion -> sWhile .)
    WHILE           reduce using rule 8 (instruccion -> sWhile .)
    FOR             reduce using rule 8 (instruccion -> sWhile .)
    CONTINUE        reduce using rule 8 (instruccion -> sWhile .)
    BREAK           reduce using rule 8 (instruccion -> sWhile .)
    RETURN          reduce using rule 8 (instruccion -> sWhile .)
    VAR             reduce using rule 8 (instruccion -> sWhile .)
    CONST           reduce using rule 8 (instruccion -> sWhile .)
    $end            reduce using rule 8 (instruccion -> sWhile .)
    LLAVDER         reduce using rule 8 (instruccion -> sWhile .)


state 9

    (9) instruccion -> sFor .

    CONSOLE         reduce using rule 9 (instruccion -> sFor .)
    ID              reduce using rule 9 (instruccion -> sFor .)
    IF              reduce using rule 9 (instruccion -> sFor .)
    WHILE           reduce using rule 9 (instruccion -> sFor .)
    FOR             reduce using rule 9 (instruccion -> sFor .)
    CONTINUE        reduce using rule 9 (instruccion -> sFor .)
    BREAK           reduce using rule 9 (instruccion -> sFor .)
    RETURN          reduce using rule 9 (instruccion -> sFor .)
    VAR             reduce using rule 9 (instruccion -> sFor .)
    CONST           reduce using rule 9 (instruccion -> sFor .)
    $end            reduce using rule 9 (instruccion -> sFor .)
    LLAVDER         reduce using rule 9 (instruccion -> sFor .)


state 10

    (10) instruccion -> sContinue .

    CONSOLE         reduce using rule 10 (instruccion -> sContinue .)
    ID              reduce using rule 10 (instruccion -> sContinue .)
    IF              reduce using rule 10 (instruccion -> sContinue .)
    WHILE           reduce using rule 10 (instruccion -> sContinue .)
    FOR             reduce using rule 10 (instruccion -> sContinue .)
    CONTINUE        reduce using rule 10 (instruccion -> sContinue .)
    BREAK           reduce using rule 10 (instruccion -> sContinue .)
    RETURN          reduce using rule 10 (instruccion -> sContinue .)
    VAR             reduce using rule 10 (instruccion -> sContinue .)
    CONST           reduce using rule 10 (instruccion -> sContinue .)
    $end            reduce using rule 10 (instruccion -> sContinue .)
    LLAVDER         reduce using rule 10 (instruccion -> sContinue .)


state 11

    (11) instruccion -> sBreak .

    CONSOLE         reduce using rule 11 (instruccion -> sBreak .)
    ID              reduce using rule 11 (instruccion -> sBreak .)
    IF              reduce using rule 11 (instruccion -> sBreak .)
    WHILE           reduce using rule 11 (instruccion -> sBreak .)
    FOR             reduce using rule 11 (instruccion -> sBreak .)
    CONTINUE        reduce using rule 11 (instruccion -> sBreak .)
    BREAK           reduce using rule 11 (instruccion -> sBreak .)
    RETURN          reduce using rule 11 (instruccion -> sBreak .)
    VAR             reduce using rule 11 (instruccion -> sBreak .)
    CONST           reduce using rule 11 (instruccion -> sBreak .)
    $end            reduce using rule 11 (instruccion -> sBreak .)
    LLAVDER         reduce using rule 11 (instruccion -> sBreak .)


state 12

    (12) instruccion -> sReturn .

    CONSOLE         reduce using rule 12 (instruccion -> sReturn .)
    ID              reduce using rule 12 (instruccion -> sReturn .)
    IF              reduce using rule 12 (instruccion -> sReturn .)
    WHILE           reduce using rule 12 (instruccion -> sReturn .)
    FOR             reduce using rule 12 (instruccion -> sReturn .)
    CONTINUE        reduce using rule 12 (instruccion -> sReturn .)
    BREAK           reduce using rule 12 (instruccion -> sReturn .)
    RETURN          reduce using rule 12 (instruccion -> sReturn .)
    VAR             reduce using rule 12 (instruccion -> sReturn .)
    CONST           reduce using rule 12 (instruccion -> sReturn .)
    $end            reduce using rule 12 (instruccion -> sReturn .)
    LLAVDER         reduce using rule 12 (instruccion -> sReturn .)


state 13

    (41) imprimir_instr -> CONSOLE . PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA

    PUNTO           shift and go to state 26


state 14

    (29) declaracion -> tipoVar . ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> tipoVar . ID declaracion_implicita

    ID              shift and go to state 27


state 15

    (24) asignacion -> ID . IGUAL op_Ternario
    (25) asignacion -> ID . MAS IGUAL op_Ternario
    (26) asignacion -> ID . MENOS IGUAL op_Ternario
    (27) asignacion -> ID . MAS MAS
    (28) asignacion -> ID . MENOS MENOS

    IGUAL           shift and go to state 28
    MAS             shift and go to state 29
    MENOS           shift and go to state 30


state 16

    (19) sIf -> IF . PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2

    PARIZQ          shift and go to state 31


state 17

    (18) sWhile -> WHILE . PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 32


state 18

    (17) sFor -> FOR . PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 33


state 19

    (13) sContinue -> CONTINUE . PUNTOCOMA

    PUNTOCOMA       shift and go to state 34


state 20

    (14) sBreak -> BREAK . PUNTOCOMA

    PUNTOCOMA       shift and go to state 35


state 21

    (15) sReturn -> RETURN . PUNTOCOMA
    (16) sReturn -> RETURN . op_Ternario PUNTOCOMA
    (44) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PUNTOCOMA       shift and go to state 36
    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    op_Ternario                    shift and go to state 37
    exp_Or                         shift and go to state 38
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 22

    (34) tipoVar -> VAR .

    ID              reduce using rule 34 (tipoVar -> VAR .)


state 23

    (35) tipoVar -> CONST .

    ID              reduce using rule 35 (tipoVar -> CONST .)


state 24

    (2) instrucciones -> instrucciones instruccion .

    CONSOLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    VAR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONST           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LLAVDER         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 25

    (6) instruccion -> asignacion PUNTOCOMA .

    CONSOLE         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    ID              reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    IF              reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    WHILE           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    FOR             reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CONTINUE        reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    BREAK           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    RETURN          reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    VAR             reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CONST           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    $end            reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    LLAVDER         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)


state 26

    (41) imprimir_instr -> CONSOLE PUNTO . LOG PARIZQ lista_exp PARDER PUNTOCOMA

    LOG             shift and go to state 60


state 27

    (29) declaracion -> tipoVar ID . DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> tipoVar ID . declaracion_implicita
    (33) declaracion_implicita -> . IGUAL op_Ternario PUNTOCOMA

    DOSPUNTOS       shift and go to state 61
    IGUAL           shift and go to state 63

    declaracion_implicita          shift and go to state 62

state 28

    (24) asignacion -> ID IGUAL . op_Ternario
    (44) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    op_Ternario                    shift and go to state 64
    exp_Or                         shift and go to state 38
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 29

    (25) asignacion -> ID MAS . IGUAL op_Ternario
    (27) asignacion -> ID MAS . MAS

    IGUAL           shift and go to state 66
    MAS             shift and go to state 65


state 30

    (26) asignacion -> ID MENOS . IGUAL op_Ternario
    (28) asignacion -> ID MENOS . MENOS

    IGUAL           shift and go to state 68
    MENOS           shift and go to state 67


state 31

    (19) sIf -> IF PARIZQ . op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (44) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    op_Ternario                    shift and go to state 69
    exp_Or                         shift and go to state 38
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 32

    (18) sWhile -> WHILE PARIZQ . op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (44) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    op_Ternario                    shift and go to state 70
    exp_Or                         shift and go to state 38
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 33

    (17) sFor -> FOR PARIZQ . declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (29) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> . tipoVar ID declaracion_implicita
    (34) tipoVar -> . VAR
    (35) tipoVar -> . CONST

    VAR             shift and go to state 22
    CONST           shift and go to state 23

    declaracion                    shift and go to state 71
    tipoVar                        shift and go to state 14

state 34

    (13) sContinue -> CONTINUE PUNTOCOMA .

    CONSOLE         reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)
    ID              reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)
    IF              reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)
    WHILE           reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)
    FOR             reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)
    CONTINUE        reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)
    BREAK           reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)
    RETURN          reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)
    VAR             reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)
    CONST           reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)
    $end            reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)
    LLAVDER         reduce using rule 13 (sContinue -> CONTINUE PUNTOCOMA .)


state 35

    (14) sBreak -> BREAK PUNTOCOMA .

    CONSOLE         reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)
    ID              reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)
    IF              reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)
    WHILE           reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)
    FOR             reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)
    CONTINUE        reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)
    BREAK           reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)
    RETURN          reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)
    VAR             reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)
    CONST           reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)
    $end            reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)
    LLAVDER         reduce using rule 14 (sBreak -> BREAK PUNTOCOMA .)


state 36

    (15) sReturn -> RETURN PUNTOCOMA .

    CONSOLE         reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)
    ID              reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)
    IF              reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)
    WHILE           reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)
    FOR             reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)
    CONTINUE        reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)
    BREAK           reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)
    RETURN          reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)
    VAR             reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)
    CONST           reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)
    $end            reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)
    LLAVDER         reduce using rule 15 (sReturn -> RETURN PUNTOCOMA .)


state 37

    (16) sReturn -> RETURN op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 72


state 38

    (44) op_Ternario -> exp_Or . INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> exp_Or .
    (46) exp_Or -> exp_Or . OR exp_And

    INTERROGACION   shift and go to state 73
    PUNTOCOMA       reduce using rule 45 (op_Ternario -> exp_Or .)
    PARDER          reduce using rule 45 (op_Ternario -> exp_Or .)
    COMA            reduce using rule 45 (op_Ternario -> exp_Or .)
    OR              shift and go to state 74


state 39

    (47) exp_Or -> exp_And .
    (48) exp_And -> exp_And . AND exp_Not

    INTERROGACION   reduce using rule 47 (exp_Or -> exp_And .)
    OR              reduce using rule 47 (exp_Or -> exp_And .)
    PUNTOCOMA       reduce using rule 47 (exp_Or -> exp_And .)
    PARDER          reduce using rule 47 (exp_Or -> exp_And .)
    DOSPUNTOS       reduce using rule 47 (exp_Or -> exp_And .)
    COMA            reduce using rule 47 (exp_Or -> exp_And .)
    AND             shift and go to state 75


state 40

    (49) exp_And -> exp_Not .

    AND             reduce using rule 49 (exp_And -> exp_Not .)
    INTERROGACION   reduce using rule 49 (exp_And -> exp_Not .)
    OR              reduce using rule 49 (exp_And -> exp_Not .)
    PUNTOCOMA       reduce using rule 49 (exp_And -> exp_Not .)
    PARDER          reduce using rule 49 (exp_And -> exp_Not .)
    DOSPUNTOS       reduce using rule 49 (exp_And -> exp_Not .)
    COMA            reduce using rule 49 (exp_And -> exp_Not .)


state 41

    (50) exp_Not -> lNot . exp_Comp
    (52) lNot -> lNot . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 77
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Comp                       shift and go to state 76
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 42

    (51) exp_Not -> exp_Comp .

    AND             reduce using rule 51 (exp_Not -> exp_Comp .)
    INTERROGACION   reduce using rule 51 (exp_Not -> exp_Comp .)
    OR              reduce using rule 51 (exp_Not -> exp_Comp .)
    PUNTOCOMA       reduce using rule 51 (exp_Not -> exp_Comp .)
    PARDER          reduce using rule 51 (exp_Not -> exp_Comp .)
    DOSPUNTOS       reduce using rule 51 (exp_Not -> exp_Comp .)
    COMA            reduce using rule 51 (exp_Not -> exp_Comp .)


state 43

    (53) lNot -> NOT .

    NOT             reduce using rule 53 (lNot -> NOT .)
    PARIZQ          reduce using rule 53 (lNot -> NOT .)
    MENOS           reduce using rule 53 (lNot -> NOT .)
    ENTERO          reduce using rule 53 (lNot -> NOT .)
    CADENA          reduce using rule 53 (lNot -> NOT .)
    DECIMAL         reduce using rule 53 (lNot -> NOT .)
    CARACTER        reduce using rule 53 (lNot -> NOT .)
    TRUE            reduce using rule 53 (lNot -> NOT .)
    FALSE           reduce using rule 53 (lNot -> NOT .)
    NULL            reduce using rule 53 (lNot -> NOT .)
    ID              reduce using rule 53 (lNot -> NOT .)


state 44

    (54) exp_Comp -> exp_Sum_Menos . EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> exp_Sum_Menos . DISTINTO exp_Sum_Menos
    (62) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (63) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div
    (57) exp_rel -> exp_Sum_Menos . MAYOR exp_Sum_Menos
    (58) exp_rel -> exp_Sum_Menos . MENOR exp_Sum_Menos
    (59) exp_rel -> exp_Sum_Menos . MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> exp_Sum_Menos . MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> exp_Sum_Menos .

    EQUIVALENTE     shift and go to state 78
    DISTINTO        shift and go to state 79
    MAS             shift and go to state 80
    MENOS           shift and go to state 81
    MAYOR           shift and go to state 82
    MENOR           shift and go to state 83
    MAYORIGUAL      shift and go to state 84
    MENORIGUAL      shift and go to state 85
    AND             reduce using rule 61 (exp_rel -> exp_Sum_Menos .)
    INTERROGACION   reduce using rule 61 (exp_rel -> exp_Sum_Menos .)
    OR              reduce using rule 61 (exp_rel -> exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 61 (exp_rel -> exp_Sum_Menos .)
    PARDER          reduce using rule 61 (exp_rel -> exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 61 (exp_rel -> exp_Sum_Menos .)
    COMA            reduce using rule 61 (exp_rel -> exp_Sum_Menos .)


state 45

    (56) exp_Comp -> exp_rel .

    AND             reduce using rule 56 (exp_Comp -> exp_rel .)
    INTERROGACION   reduce using rule 56 (exp_Comp -> exp_rel .)
    OR              reduce using rule 56 (exp_Comp -> exp_rel .)
    PUNTOCOMA       reduce using rule 56 (exp_Comp -> exp_rel .)
    PARDER          reduce using rule 56 (exp_Comp -> exp_rel .)
    DOSPUNTOS       reduce using rule 56 (exp_Comp -> exp_rel .)
    COMA            reduce using rule 56 (exp_Comp -> exp_rel .)


state 46

    (64) exp_Sum_Menos -> exp_Mul_Div .
    (65) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (66) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    DISTINTO        reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    MAS             reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    MENOS           reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    MAYOR           reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    MENOR           reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    MENORIGUAL      reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    AND             reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    INTERROGACION   reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    OR              reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    PARDER          reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    COMA            reduce using rule 64 (exp_Sum_Menos -> exp_Mul_Div .)
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    MODULO          shift and go to state 88


state 47

    (71) exp_Negativo -> MENOS . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    valor                          shift and go to state 89

state 48

    (68) exp_Mul_Div -> exp_Parentesis .

    POR             reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    DIVIDIDO        reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    MODULO          reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    EQUIVALENTE     reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    DISTINTO        reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    MAS             reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    MENOS           reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    MAYOR           reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    MENOR           reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    MAYORIGUAL      reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    MENORIGUAL      reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    AND             reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    INTERROGACION   reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    OR              reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    PUNTOCOMA       reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    PARDER          reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    DOSPUNTOS       reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)
    COMA            reduce using rule 68 (exp_Mul_Div -> exp_Parentesis .)


state 49

    (69) exp_Parentesis -> PARIZQ . exp_Or PARDER
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Or                         shift and go to state 90
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 50

    (70) exp_Parentesis -> exp_Negativo .

    POR             reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    DIVIDIDO        reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    MODULO          reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    EQUIVALENTE     reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    DISTINTO        reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    MAS             reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    MENOS           reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    MAYOR           reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    MENOR           reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    MAYORIGUAL      reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    MENORIGUAL      reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    AND             reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    INTERROGACION   reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    OR              reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    PUNTOCOMA       reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    PARDER          reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    DOSPUNTOS       reduce using rule 70 (exp_Parentesis -> exp_Negativo .)
    COMA            reduce using rule 70 (exp_Parentesis -> exp_Negativo .)


state 51

    (72) exp_Negativo -> valor .

    POR             reduce using rule 72 (exp_Negativo -> valor .)
    DIVIDIDO        reduce using rule 72 (exp_Negativo -> valor .)
    MODULO          reduce using rule 72 (exp_Negativo -> valor .)
    EQUIVALENTE     reduce using rule 72 (exp_Negativo -> valor .)
    DISTINTO        reduce using rule 72 (exp_Negativo -> valor .)
    MAS             reduce using rule 72 (exp_Negativo -> valor .)
    MENOS           reduce using rule 72 (exp_Negativo -> valor .)
    MAYOR           reduce using rule 72 (exp_Negativo -> valor .)
    MENOR           reduce using rule 72 (exp_Negativo -> valor .)
    MAYORIGUAL      reduce using rule 72 (exp_Negativo -> valor .)
    MENORIGUAL      reduce using rule 72 (exp_Negativo -> valor .)
    AND             reduce using rule 72 (exp_Negativo -> valor .)
    INTERROGACION   reduce using rule 72 (exp_Negativo -> valor .)
    OR              reduce using rule 72 (exp_Negativo -> valor .)
    PUNTOCOMA       reduce using rule 72 (exp_Negativo -> valor .)
    PARDER          reduce using rule 72 (exp_Negativo -> valor .)
    DOSPUNTOS       reduce using rule 72 (exp_Negativo -> valor .)
    COMA            reduce using rule 72 (exp_Negativo -> valor .)


state 52

    (73) valor -> ENTERO .

    POR             reduce using rule 73 (valor -> ENTERO .)
    DIVIDIDO        reduce using rule 73 (valor -> ENTERO .)
    MODULO          reduce using rule 73 (valor -> ENTERO .)
    EQUIVALENTE     reduce using rule 73 (valor -> ENTERO .)
    DISTINTO        reduce using rule 73 (valor -> ENTERO .)
    MAS             reduce using rule 73 (valor -> ENTERO .)
    MENOS           reduce using rule 73 (valor -> ENTERO .)
    MAYOR           reduce using rule 73 (valor -> ENTERO .)
    MENOR           reduce using rule 73 (valor -> ENTERO .)
    MAYORIGUAL      reduce using rule 73 (valor -> ENTERO .)
    MENORIGUAL      reduce using rule 73 (valor -> ENTERO .)
    AND             reduce using rule 73 (valor -> ENTERO .)
    INTERROGACION   reduce using rule 73 (valor -> ENTERO .)
    OR              reduce using rule 73 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 73 (valor -> ENTERO .)
    PARDER          reduce using rule 73 (valor -> ENTERO .)
    DOSPUNTOS       reduce using rule 73 (valor -> ENTERO .)
    COMA            reduce using rule 73 (valor -> ENTERO .)


state 53

    (74) valor -> CADENA .

    POR             reduce using rule 74 (valor -> CADENA .)
    DIVIDIDO        reduce using rule 74 (valor -> CADENA .)
    MODULO          reduce using rule 74 (valor -> CADENA .)
    EQUIVALENTE     reduce using rule 74 (valor -> CADENA .)
    DISTINTO        reduce using rule 74 (valor -> CADENA .)
    MAS             reduce using rule 74 (valor -> CADENA .)
    MENOS           reduce using rule 74 (valor -> CADENA .)
    MAYOR           reduce using rule 74 (valor -> CADENA .)
    MENOR           reduce using rule 74 (valor -> CADENA .)
    MAYORIGUAL      reduce using rule 74 (valor -> CADENA .)
    MENORIGUAL      reduce using rule 74 (valor -> CADENA .)
    AND             reduce using rule 74 (valor -> CADENA .)
    INTERROGACION   reduce using rule 74 (valor -> CADENA .)
    OR              reduce using rule 74 (valor -> CADENA .)
    PUNTOCOMA       reduce using rule 74 (valor -> CADENA .)
    PARDER          reduce using rule 74 (valor -> CADENA .)
    DOSPUNTOS       reduce using rule 74 (valor -> CADENA .)
    COMA            reduce using rule 74 (valor -> CADENA .)


state 54

    (75) valor -> DECIMAL .

    POR             reduce using rule 75 (valor -> DECIMAL .)
    DIVIDIDO        reduce using rule 75 (valor -> DECIMAL .)
    MODULO          reduce using rule 75 (valor -> DECIMAL .)
    EQUIVALENTE     reduce using rule 75 (valor -> DECIMAL .)
    DISTINTO        reduce using rule 75 (valor -> DECIMAL .)
    MAS             reduce using rule 75 (valor -> DECIMAL .)
    MENOS           reduce using rule 75 (valor -> DECIMAL .)
    MAYOR           reduce using rule 75 (valor -> DECIMAL .)
    MENOR           reduce using rule 75 (valor -> DECIMAL .)
    MAYORIGUAL      reduce using rule 75 (valor -> DECIMAL .)
    MENORIGUAL      reduce using rule 75 (valor -> DECIMAL .)
    AND             reduce using rule 75 (valor -> DECIMAL .)
    INTERROGACION   reduce using rule 75 (valor -> DECIMAL .)
    OR              reduce using rule 75 (valor -> DECIMAL .)
    PUNTOCOMA       reduce using rule 75 (valor -> DECIMAL .)
    PARDER          reduce using rule 75 (valor -> DECIMAL .)
    DOSPUNTOS       reduce using rule 75 (valor -> DECIMAL .)
    COMA            reduce using rule 75 (valor -> DECIMAL .)


state 55

    (76) valor -> CARACTER .

    POR             reduce using rule 76 (valor -> CARACTER .)
    DIVIDIDO        reduce using rule 76 (valor -> CARACTER .)
    MODULO          reduce using rule 76 (valor -> CARACTER .)
    EQUIVALENTE     reduce using rule 76 (valor -> CARACTER .)
    DISTINTO        reduce using rule 76 (valor -> CARACTER .)
    MAS             reduce using rule 76 (valor -> CARACTER .)
    MENOS           reduce using rule 76 (valor -> CARACTER .)
    MAYOR           reduce using rule 76 (valor -> CARACTER .)
    MENOR           reduce using rule 76 (valor -> CARACTER .)
    MAYORIGUAL      reduce using rule 76 (valor -> CARACTER .)
    MENORIGUAL      reduce using rule 76 (valor -> CARACTER .)
    AND             reduce using rule 76 (valor -> CARACTER .)
    INTERROGACION   reduce using rule 76 (valor -> CARACTER .)
    OR              reduce using rule 76 (valor -> CARACTER .)
    PUNTOCOMA       reduce using rule 76 (valor -> CARACTER .)
    PARDER          reduce using rule 76 (valor -> CARACTER .)
    DOSPUNTOS       reduce using rule 76 (valor -> CARACTER .)
    COMA            reduce using rule 76 (valor -> CARACTER .)


state 56

    (77) valor -> TRUE .

    POR             reduce using rule 77 (valor -> TRUE .)
    DIVIDIDO        reduce using rule 77 (valor -> TRUE .)
    MODULO          reduce using rule 77 (valor -> TRUE .)
    EQUIVALENTE     reduce using rule 77 (valor -> TRUE .)
    DISTINTO        reduce using rule 77 (valor -> TRUE .)
    MAS             reduce using rule 77 (valor -> TRUE .)
    MENOS           reduce using rule 77 (valor -> TRUE .)
    MAYOR           reduce using rule 77 (valor -> TRUE .)
    MENOR           reduce using rule 77 (valor -> TRUE .)
    MAYORIGUAL      reduce using rule 77 (valor -> TRUE .)
    MENORIGUAL      reduce using rule 77 (valor -> TRUE .)
    AND             reduce using rule 77 (valor -> TRUE .)
    INTERROGACION   reduce using rule 77 (valor -> TRUE .)
    OR              reduce using rule 77 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 77 (valor -> TRUE .)
    PARDER          reduce using rule 77 (valor -> TRUE .)
    DOSPUNTOS       reduce using rule 77 (valor -> TRUE .)
    COMA            reduce using rule 77 (valor -> TRUE .)


state 57

    (78) valor -> FALSE .

    POR             reduce using rule 78 (valor -> FALSE .)
    DIVIDIDO        reduce using rule 78 (valor -> FALSE .)
    MODULO          reduce using rule 78 (valor -> FALSE .)
    EQUIVALENTE     reduce using rule 78 (valor -> FALSE .)
    DISTINTO        reduce using rule 78 (valor -> FALSE .)
    MAS             reduce using rule 78 (valor -> FALSE .)
    MENOS           reduce using rule 78 (valor -> FALSE .)
    MAYOR           reduce using rule 78 (valor -> FALSE .)
    MENOR           reduce using rule 78 (valor -> FALSE .)
    MAYORIGUAL      reduce using rule 78 (valor -> FALSE .)
    MENORIGUAL      reduce using rule 78 (valor -> FALSE .)
    AND             reduce using rule 78 (valor -> FALSE .)
    INTERROGACION   reduce using rule 78 (valor -> FALSE .)
    OR              reduce using rule 78 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 78 (valor -> FALSE .)
    PARDER          reduce using rule 78 (valor -> FALSE .)
    DOSPUNTOS       reduce using rule 78 (valor -> FALSE .)
    COMA            reduce using rule 78 (valor -> FALSE .)


state 58

    (79) valor -> NULL .

    POR             reduce using rule 79 (valor -> NULL .)
    DIVIDIDO        reduce using rule 79 (valor -> NULL .)
    MODULO          reduce using rule 79 (valor -> NULL .)
    EQUIVALENTE     reduce using rule 79 (valor -> NULL .)
    DISTINTO        reduce using rule 79 (valor -> NULL .)
    MAS             reduce using rule 79 (valor -> NULL .)
    MENOS           reduce using rule 79 (valor -> NULL .)
    MAYOR           reduce using rule 79 (valor -> NULL .)
    MENOR           reduce using rule 79 (valor -> NULL .)
    MAYORIGUAL      reduce using rule 79 (valor -> NULL .)
    MENORIGUAL      reduce using rule 79 (valor -> NULL .)
    AND             reduce using rule 79 (valor -> NULL .)
    INTERROGACION   reduce using rule 79 (valor -> NULL .)
    OR              reduce using rule 79 (valor -> NULL .)
    PUNTOCOMA       reduce using rule 79 (valor -> NULL .)
    PARDER          reduce using rule 79 (valor -> NULL .)
    DOSPUNTOS       reduce using rule 79 (valor -> NULL .)
    COMA            reduce using rule 79 (valor -> NULL .)


state 59

    (80) valor -> ID .

    POR             reduce using rule 80 (valor -> ID .)
    DIVIDIDO        reduce using rule 80 (valor -> ID .)
    MODULO          reduce using rule 80 (valor -> ID .)
    EQUIVALENTE     reduce using rule 80 (valor -> ID .)
    DISTINTO        reduce using rule 80 (valor -> ID .)
    MAS             reduce using rule 80 (valor -> ID .)
    MENOS           reduce using rule 80 (valor -> ID .)
    MAYOR           reduce using rule 80 (valor -> ID .)
    MENOR           reduce using rule 80 (valor -> ID .)
    MAYORIGUAL      reduce using rule 80 (valor -> ID .)
    MENORIGUAL      reduce using rule 80 (valor -> ID .)
    AND             reduce using rule 80 (valor -> ID .)
    INTERROGACION   reduce using rule 80 (valor -> ID .)
    OR              reduce using rule 80 (valor -> ID .)
    PUNTOCOMA       reduce using rule 80 (valor -> ID .)
    PARDER          reduce using rule 80 (valor -> ID .)
    DOSPUNTOS       reduce using rule 80 (valor -> ID .)
    COMA            reduce using rule 80 (valor -> ID .)


state 60

    (41) imprimir_instr -> CONSOLE PUNTO LOG . PARIZQ lista_exp PARDER PUNTOCOMA

    PARIZQ          shift and go to state 91


state 61

    (29) declaracion -> tipoVar ID DOSPUNTOS . tipo declaracion_explicita
    (36) tipo -> . NUMBER
    (37) tipo -> . FLOAT
    (38) tipo -> . STRING
    (39) tipo -> . BOOLEAN
    (40) tipo -> . CHAR

    NUMBER          shift and go to state 93
    FLOAT           shift and go to state 94
    STRING          shift and go to state 95
    BOOLEAN         shift and go to state 96
    CHAR            shift and go to state 97

    tipo                           shift and go to state 92

state 62

    (30) declaracion -> tipoVar ID declaracion_implicita .

    CONSOLE         reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    ID              reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    IF              reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    WHILE           reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    FOR             reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    CONTINUE        reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    BREAK           reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    RETURN          reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    VAR             reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    CONST           reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    $end            reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    NOT             reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    PARIZQ          reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    MENOS           reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    ENTERO          reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    CADENA          reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    DECIMAL         reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    CARACTER        reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    TRUE            reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    FALSE           reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    NULL            reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)
    LLAVDER         reduce using rule 30 (declaracion -> tipoVar ID declaracion_implicita .)


state 63

    (33) declaracion_implicita -> IGUAL . op_Ternario PUNTOCOMA
    (44) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    op_Ternario                    shift and go to state 98
    exp_Or                         shift and go to state 38
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 64

    (24) asignacion -> ID IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 24 (asignacion -> ID IGUAL op_Ternario .)
    PARDER          reduce using rule 24 (asignacion -> ID IGUAL op_Ternario .)


state 65

    (27) asignacion -> ID MAS MAS .

    PUNTOCOMA       reduce using rule 27 (asignacion -> ID MAS MAS .)
    PARDER          reduce using rule 27 (asignacion -> ID MAS MAS .)


state 66

    (25) asignacion -> ID MAS IGUAL . op_Ternario
    (44) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    op_Ternario                    shift and go to state 99
    exp_Or                         shift and go to state 38
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 67

    (28) asignacion -> ID MENOS MENOS .

    PUNTOCOMA       reduce using rule 28 (asignacion -> ID MENOS MENOS .)
    PARDER          reduce using rule 28 (asignacion -> ID MENOS MENOS .)


state 68

    (26) asignacion -> ID MENOS IGUAL . op_Ternario
    (44) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    op_Ternario                    shift and go to state 100
    exp_Or                         shift and go to state 38
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 69

    (19) sIf -> IF PARIZQ op_Ternario . PARDER LLAVIZQ instrucciones sIf2

    PARDER          shift and go to state 101


state 70

    (18) sWhile -> WHILE PARIZQ op_Ternario . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 102


state 71

    (17) sFor -> FOR PARIZQ declaracion . op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (44) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    op_Ternario                    shift and go to state 103
    exp_Or                         shift and go to state 38
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 72

    (16) sReturn -> RETURN op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    ID              reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    IF              reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    $end            reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 16 (sReturn -> RETURN op_Ternario PUNTOCOMA .)


state 73

    (44) op_Ternario -> exp_Or INTERROGACION . exp_Or DOSPUNTOS exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Or                         shift and go to state 104
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 74

    (46) exp_Or -> exp_Or OR . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_And                        shift and go to state 105
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 75

    (48) exp_And -> exp_And AND . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Not                        shift and go to state 106
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 76

    (50) exp_Not -> lNot exp_Comp .

    AND             reduce using rule 50 (exp_Not -> lNot exp_Comp .)
    INTERROGACION   reduce using rule 50 (exp_Not -> lNot exp_Comp .)
    OR              reduce using rule 50 (exp_Not -> lNot exp_Comp .)
    PUNTOCOMA       reduce using rule 50 (exp_Not -> lNot exp_Comp .)
    PARDER          reduce using rule 50 (exp_Not -> lNot exp_Comp .)
    DOSPUNTOS       reduce using rule 50 (exp_Not -> lNot exp_Comp .)
    COMA            reduce using rule 50 (exp_Not -> lNot exp_Comp .)


state 77

    (52) lNot -> lNot NOT .

    NOT             reduce using rule 52 (lNot -> lNot NOT .)
    PARIZQ          reduce using rule 52 (lNot -> lNot NOT .)
    MENOS           reduce using rule 52 (lNot -> lNot NOT .)
    ENTERO          reduce using rule 52 (lNot -> lNot NOT .)
    CADENA          reduce using rule 52 (lNot -> lNot NOT .)
    DECIMAL         reduce using rule 52 (lNot -> lNot NOT .)
    CARACTER        reduce using rule 52 (lNot -> lNot NOT .)
    TRUE            reduce using rule 52 (lNot -> lNot NOT .)
    FALSE           reduce using rule 52 (lNot -> lNot NOT .)
    NULL            reduce using rule 52 (lNot -> lNot NOT .)
    ID              reduce using rule 52 (lNot -> lNot NOT .)


state 78

    (54) exp_Comp -> exp_Sum_Menos EQUIVALENTE . exp_Sum_Menos
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Sum_Menos                  shift and go to state 107
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 79

    (55) exp_Comp -> exp_Sum_Menos DISTINTO . exp_Sum_Menos
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Sum_Menos                  shift and go to state 108
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 80

    (62) exp_Sum_Menos -> exp_Sum_Menos MAS . exp_Mul_Div
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Mul_Div                    shift and go to state 109
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 81

    (63) exp_Sum_Menos -> exp_Sum_Menos MENOS . exp_Mul_Div
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Mul_Div                    shift and go to state 110
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 82

    (57) exp_rel -> exp_Sum_Menos MAYOR . exp_Sum_Menos
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Sum_Menos                  shift and go to state 111
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 83

    (58) exp_rel -> exp_Sum_Menos MENOR . exp_Sum_Menos
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Sum_Menos                  shift and go to state 112
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 84

    (59) exp_rel -> exp_Sum_Menos MAYORIGUAL . exp_Sum_Menos
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Sum_Menos                  shift and go to state 113
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 85

    (60) exp_rel -> exp_Sum_Menos MENORIGUAL . exp_Sum_Menos
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Sum_Menos                  shift and go to state 114
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 86

    (65) exp_Mul_Div -> exp_Mul_Div POR . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Parentesis                 shift and go to state 115
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 87

    (66) exp_Mul_Div -> exp_Mul_Div DIVIDIDO . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Parentesis                 shift and go to state 116
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 88

    (67) exp_Mul_Div -> exp_Mul_Div MODULO . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Parentesis                 shift and go to state 117
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 89

    (71) exp_Negativo -> MENOS valor .

    POR             reduce using rule 71 (exp_Negativo -> MENOS valor .)
    DIVIDIDO        reduce using rule 71 (exp_Negativo -> MENOS valor .)
    MODULO          reduce using rule 71 (exp_Negativo -> MENOS valor .)
    EQUIVALENTE     reduce using rule 71 (exp_Negativo -> MENOS valor .)
    DISTINTO        reduce using rule 71 (exp_Negativo -> MENOS valor .)
    MAS             reduce using rule 71 (exp_Negativo -> MENOS valor .)
    MENOS           reduce using rule 71 (exp_Negativo -> MENOS valor .)
    MAYOR           reduce using rule 71 (exp_Negativo -> MENOS valor .)
    MENOR           reduce using rule 71 (exp_Negativo -> MENOS valor .)
    MAYORIGUAL      reduce using rule 71 (exp_Negativo -> MENOS valor .)
    MENORIGUAL      reduce using rule 71 (exp_Negativo -> MENOS valor .)
    AND             reduce using rule 71 (exp_Negativo -> MENOS valor .)
    INTERROGACION   reduce using rule 71 (exp_Negativo -> MENOS valor .)
    OR              reduce using rule 71 (exp_Negativo -> MENOS valor .)
    PUNTOCOMA       reduce using rule 71 (exp_Negativo -> MENOS valor .)
    PARDER          reduce using rule 71 (exp_Negativo -> MENOS valor .)
    DOSPUNTOS       reduce using rule 71 (exp_Negativo -> MENOS valor .)
    COMA            reduce using rule 71 (exp_Negativo -> MENOS valor .)


state 90

    (69) exp_Parentesis -> PARIZQ exp_Or . PARDER
    (46) exp_Or -> exp_Or . OR exp_And

    PARDER          shift and go to state 118
    OR              shift and go to state 74


state 91

    (41) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ . lista_exp PARDER PUNTOCOMA
    (42) lista_exp -> . lista_exp COMA op_Ternario
    (43) lista_exp -> . op_Ternario
    (44) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    lista_exp                      shift and go to state 119
    op_Ternario                    shift and go to state 120
    exp_Or                         shift and go to state 38
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 92

    (29) declaracion -> tipoVar ID DOSPUNTOS tipo . declaracion_explicita
    (31) declaracion_explicita -> . PUNTOCOMA
    (32) declaracion_explicita -> . IGUAL op_Ternario PUNTOCOMA

    PUNTOCOMA       shift and go to state 122
    IGUAL           shift and go to state 123

    declaracion_explicita          shift and go to state 121

state 93

    (36) tipo -> NUMBER .

    PUNTOCOMA       reduce using rule 36 (tipo -> NUMBER .)
    IGUAL           reduce using rule 36 (tipo -> NUMBER .)


state 94

    (37) tipo -> FLOAT .

    PUNTOCOMA       reduce using rule 37 (tipo -> FLOAT .)
    IGUAL           reduce using rule 37 (tipo -> FLOAT .)


state 95

    (38) tipo -> STRING .

    PUNTOCOMA       reduce using rule 38 (tipo -> STRING .)
    IGUAL           reduce using rule 38 (tipo -> STRING .)


state 96

    (39) tipo -> BOOLEAN .

    PUNTOCOMA       reduce using rule 39 (tipo -> BOOLEAN .)
    IGUAL           reduce using rule 39 (tipo -> BOOLEAN .)


state 97

    (40) tipo -> CHAR .

    PUNTOCOMA       reduce using rule 40 (tipo -> CHAR .)
    IGUAL           reduce using rule 40 (tipo -> CHAR .)


state 98

    (33) declaracion_implicita -> IGUAL op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 124


state 99

    (25) asignacion -> ID MAS IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 25 (asignacion -> ID MAS IGUAL op_Ternario .)
    PARDER          reduce using rule 25 (asignacion -> ID MAS IGUAL op_Ternario .)


state 100

    (26) asignacion -> ID MENOS IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 26 (asignacion -> ID MENOS IGUAL op_Ternario .)
    PARDER          reduce using rule 26 (asignacion -> ID MENOS IGUAL op_Ternario .)


state 101

    (19) sIf -> IF PARIZQ op_Ternario PARDER . LLAVIZQ instrucciones sIf2

    LLAVIZQ         shift and go to state 125


state 102

    (18) sWhile -> WHILE PARIZQ op_Ternario PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 126


state 103

    (17) sFor -> FOR PARIZQ declaracion op_Ternario . PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER

    PUNTOCOMA       shift and go to state 127


state 104

    (44) op_Ternario -> exp_Or INTERROGACION exp_Or . DOSPUNTOS exp_Or
    (46) exp_Or -> exp_Or . OR exp_And

    DOSPUNTOS       shift and go to state 128
    OR              shift and go to state 74


state 105

    (46) exp_Or -> exp_Or OR exp_And .
    (48) exp_And -> exp_And . AND exp_Not

    INTERROGACION   reduce using rule 46 (exp_Or -> exp_Or OR exp_And .)
    OR              reduce using rule 46 (exp_Or -> exp_Or OR exp_And .)
    PUNTOCOMA       reduce using rule 46 (exp_Or -> exp_Or OR exp_And .)
    PARDER          reduce using rule 46 (exp_Or -> exp_Or OR exp_And .)
    DOSPUNTOS       reduce using rule 46 (exp_Or -> exp_Or OR exp_And .)
    COMA            reduce using rule 46 (exp_Or -> exp_Or OR exp_And .)
    AND             shift and go to state 75


state 106

    (48) exp_And -> exp_And AND exp_Not .

    AND             reduce using rule 48 (exp_And -> exp_And AND exp_Not .)
    INTERROGACION   reduce using rule 48 (exp_And -> exp_And AND exp_Not .)
    OR              reduce using rule 48 (exp_And -> exp_And AND exp_Not .)
    PUNTOCOMA       reduce using rule 48 (exp_And -> exp_And AND exp_Not .)
    PARDER          reduce using rule 48 (exp_And -> exp_And AND exp_Not .)
    DOSPUNTOS       reduce using rule 48 (exp_And -> exp_And AND exp_Not .)
    COMA            reduce using rule 48 (exp_And -> exp_And AND exp_Not .)


state 107

    (54) exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .
    (62) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (63) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 54 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    INTERROGACION   reduce using rule 54 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    OR              reduce using rule 54 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 54 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    PARDER          reduce using rule 54 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 54 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    COMA            reduce using rule 54 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    MAS             shift and go to state 80
    MENOS           shift and go to state 81


state 108

    (55) exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .
    (62) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (63) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 55 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    INTERROGACION   reduce using rule 55 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    OR              reduce using rule 55 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 55 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    PARDER          reduce using rule 55 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 55 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    COMA            reduce using rule 55 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    MAS             shift and go to state 80
    MENOS           shift and go to state 81


state 109

    (62) exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .
    (65) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (66) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    DISTINTO        reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAS             reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENOS           reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAYOR           reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENOR           reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENORIGUAL      reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    AND             reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    INTERROGACION   reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    OR              reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    PARDER          reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    COMA            reduce using rule 62 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    MODULO          shift and go to state 88


state 110

    (63) exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .
    (65) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (66) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    DISTINTO        reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAS             reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENOS           reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAYOR           reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENOR           reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENORIGUAL      reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    AND             reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    INTERROGACION   reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    OR              reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    PARDER          reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    COMA            reduce using rule 63 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    POR             shift and go to state 86
    DIVIDIDO        shift and go to state 87
    MODULO          shift and go to state 88


state 111

    (57) exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .
    (62) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (63) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 57 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    INTERROGACION   reduce using rule 57 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    OR              reduce using rule 57 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 57 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    PARDER          reduce using rule 57 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 57 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    COMA            reduce using rule 57 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    MAS             shift and go to state 80
    MENOS           shift and go to state 81


state 112

    (58) exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .
    (62) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (63) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 58 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    INTERROGACION   reduce using rule 58 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    OR              reduce using rule 58 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 58 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    PARDER          reduce using rule 58 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 58 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    COMA            reduce using rule 58 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    MAS             shift and go to state 80
    MENOS           shift and go to state 81


state 113

    (59) exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .
    (62) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (63) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 59 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    INTERROGACION   reduce using rule 59 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    OR              reduce using rule 59 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 59 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    PARDER          reduce using rule 59 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 59 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    COMA            reduce using rule 59 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    MAS             shift and go to state 80
    MENOS           shift and go to state 81


state 114

    (60) exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .
    (62) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (63) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 60 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    INTERROGACION   reduce using rule 60 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    OR              reduce using rule 60 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 60 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    PARDER          reduce using rule 60 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 60 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    COMA            reduce using rule 60 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    MAS             shift and go to state 80
    MENOS           shift and go to state 81


state 115

    (65) exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .

    POR             reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DIVIDIDO        reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MODULO          reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    EQUIVALENTE     reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DISTINTO        reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAS             reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENOS           reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAYOR           reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENOR           reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAYORIGUAL      reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENORIGUAL      reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    AND             reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    INTERROGACION   reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    OR              reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    PUNTOCOMA       reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    PARDER          reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DOSPUNTOS       reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    COMA            reduce using rule 65 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)


state 116

    (66) exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .

    POR             reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DIVIDIDO        reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MODULO          reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    EQUIVALENTE     reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DISTINTO        reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAS             reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENOS           reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAYOR           reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENOR           reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAYORIGUAL      reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENORIGUAL      reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    AND             reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    INTERROGACION   reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    OR              reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    PUNTOCOMA       reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    PARDER          reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DOSPUNTOS       reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    COMA            reduce using rule 66 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)


state 117

    (67) exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .

    POR             reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DIVIDIDO        reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MODULO          reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    EQUIVALENTE     reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DISTINTO        reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAS             reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENOS           reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAYOR           reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENOR           reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAYORIGUAL      reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENORIGUAL      reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    AND             reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    INTERROGACION   reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    OR              reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    PUNTOCOMA       reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    PARDER          reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DOSPUNTOS       reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    COMA            reduce using rule 67 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)


state 118

    (69) exp_Parentesis -> PARIZQ exp_Or PARDER .

    POR             reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DIVIDIDO        reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MODULO          reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    EQUIVALENTE     reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DISTINTO        reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAS             reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENOS           reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAYOR           reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENOR           reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAYORIGUAL      reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENORIGUAL      reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    AND             reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    INTERROGACION   reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    OR              reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    PUNTOCOMA       reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    PARDER          reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DOSPUNTOS       reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    COMA            reduce using rule 69 (exp_Parentesis -> PARIZQ exp_Or PARDER .)


state 119

    (41) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp . PARDER PUNTOCOMA
    (42) lista_exp -> lista_exp . COMA op_Ternario

    PARDER          shift and go to state 129
    COMA            shift and go to state 130


state 120

    (43) lista_exp -> op_Ternario .

    PARDER          reduce using rule 43 (lista_exp -> op_Ternario .)
    COMA            reduce using rule 43 (lista_exp -> op_Ternario .)


state 121

    (29) declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .

    CONSOLE         reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    ID              reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    IF              reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    WHILE           reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FOR             reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CONTINUE        reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    BREAK           reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    RETURN          reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    VAR             reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CONST           reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    $end            reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    NOT             reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    PARIZQ          reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    MENOS           reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    ENTERO          reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CADENA          reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    DECIMAL         reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CARACTER        reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    TRUE            reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FALSE           reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    NULL            reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    LLAVDER         reduce using rule 29 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)


state 122

    (31) declaracion_explicita -> PUNTOCOMA .

    CONSOLE         reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    ID              reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    IF              reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    WHILE           reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    FOR             reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    CONTINUE        reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    BREAK           reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    RETURN          reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    VAR             reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    CONST           reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    $end            reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    NOT             reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    PARIZQ          reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    MENOS           reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    ENTERO          reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    CADENA          reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    DECIMAL         reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    CARACTER        reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    TRUE            reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    FALSE           reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    NULL            reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)
    LLAVDER         reduce using rule 31 (declaracion_explicita -> PUNTOCOMA .)


state 123

    (32) declaracion_explicita -> IGUAL . op_Ternario PUNTOCOMA
    (44) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    op_Ternario                    shift and go to state 131
    exp_Or                         shift and go to state 38
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 124

    (33) declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    ID              reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    IF              reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    $end            reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    NOT             reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    PARIZQ          reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    MENOS           reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    ENTERO          reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CADENA          reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    DECIMAL         reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CARACTER        reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    TRUE            reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FALSE           reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    NULL            reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 33 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)


state 125

    (19) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ . instrucciones sIf2
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (41) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (29) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> . tipoVar ID declaracion_implicita
    (24) asignacion -> . ID IGUAL op_Ternario
    (25) asignacion -> . ID MAS IGUAL op_Ternario
    (26) asignacion -> . ID MENOS IGUAL op_Ternario
    (27) asignacion -> . ID MAS MAS
    (28) asignacion -> . ID MENOS MENOS
    (19) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (18) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (17) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (13) sContinue -> . CONTINUE PUNTOCOMA
    (14) sBreak -> . BREAK PUNTOCOMA
    (15) sReturn -> . RETURN PUNTOCOMA
    (16) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (34) tipoVar -> . VAR
    (35) tipoVar -> . CONST

    CONSOLE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 23

    instrucciones                  shift and go to state 132
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    tipoVar                        shift and go to state 14

state 126

    (18) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (41) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (29) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> . tipoVar ID declaracion_implicita
    (24) asignacion -> . ID IGUAL op_Ternario
    (25) asignacion -> . ID MAS IGUAL op_Ternario
    (26) asignacion -> . ID MENOS IGUAL op_Ternario
    (27) asignacion -> . ID MAS MAS
    (28) asignacion -> . ID MENOS MENOS
    (19) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (18) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (17) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (13) sContinue -> . CONTINUE PUNTOCOMA
    (14) sBreak -> . BREAK PUNTOCOMA
    (15) sReturn -> . RETURN PUNTOCOMA
    (16) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (34) tipoVar -> . VAR
    (35) tipoVar -> . CONST

    CONSOLE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 23

    instrucciones                  shift and go to state 133
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    tipoVar                        shift and go to state 14

state 127

    (17) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA . asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (24) asignacion -> . ID IGUAL op_Ternario
    (25) asignacion -> . ID MAS IGUAL op_Ternario
    (26) asignacion -> . ID MENOS IGUAL op_Ternario
    (27) asignacion -> . ID MAS MAS
    (28) asignacion -> . ID MENOS MENOS

    ID              shift and go to state 15

    asignacion                     shift and go to state 134

state 128

    (44) op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    exp_Or                         shift and go to state 135
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 129

    (41) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 136


state 130

    (42) lista_exp -> lista_exp COMA . op_Ternario
    (44) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (45) op_Ternario -> . exp_Or
    (46) exp_Or -> . exp_Or OR exp_And
    (47) exp_Or -> . exp_And
    (48) exp_And -> . exp_And AND exp_Not
    (49) exp_And -> . exp_Not
    (50) exp_Not -> . lNot exp_Comp
    (51) exp_Not -> . exp_Comp
    (52) lNot -> . lNot NOT
    (53) lNot -> . NOT
    (54) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (55) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (56) exp_Comp -> . exp_rel
    (62) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (63) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (64) exp_Sum_Menos -> . exp_Mul_Div
    (57) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (58) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (59) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (60) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (61) exp_rel -> . exp_Sum_Menos
    (65) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (66) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (67) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (68) exp_Mul_Div -> . exp_Parentesis
    (69) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (70) exp_Parentesis -> . exp_Negativo
    (71) exp_Negativo -> . MENOS valor
    (72) exp_Negativo -> . valor
    (73) valor -> . ENTERO
    (74) valor -> . CADENA
    (75) valor -> . DECIMAL
    (76) valor -> . CARACTER
    (77) valor -> . TRUE
    (78) valor -> . FALSE
    (79) valor -> . NULL
    (80) valor -> . ID

    NOT             shift and go to state 43
    PARIZQ          shift and go to state 49
    MENOS           shift and go to state 47
    ENTERO          shift and go to state 52
    CADENA          shift and go to state 53
    DECIMAL         shift and go to state 54
    CARACTER        shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57
    NULL            shift and go to state 58
    ID              shift and go to state 59

    op_Ternario                    shift and go to state 137
    exp_Or                         shift and go to state 38
    exp_And                        shift and go to state 39
    exp_Not                        shift and go to state 40
    lNot                           shift and go to state 41
    exp_Comp                       shift and go to state 42
    exp_Sum_Menos                  shift and go to state 44
    exp_rel                        shift and go to state 45
    exp_Mul_Div                    shift and go to state 46
    exp_Parentesis                 shift and go to state 48
    exp_Negativo                   shift and go to state 50
    valor                          shift and go to state 51

state 131

    (32) declaracion_explicita -> IGUAL op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 138


state 132

    (19) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones . sIf2
    (2) instrucciones -> instrucciones . instruccion
    (20) sIf2 -> . LLAVDER ELSE sElse
    (21) sIf2 -> . LLAVDER
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (41) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (29) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> . tipoVar ID declaracion_implicita
    (24) asignacion -> . ID IGUAL op_Ternario
    (25) asignacion -> . ID MAS IGUAL op_Ternario
    (26) asignacion -> . ID MENOS IGUAL op_Ternario
    (27) asignacion -> . ID MAS MAS
    (28) asignacion -> . ID MENOS MENOS
    (19) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (18) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (17) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (13) sContinue -> . CONTINUE PUNTOCOMA
    (14) sBreak -> . BREAK PUNTOCOMA
    (15) sReturn -> . RETURN PUNTOCOMA
    (16) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (34) tipoVar -> . VAR
    (35) tipoVar -> . CONST

    LLAVDER         shift and go to state 140
    CONSOLE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 23

    sIf2                           shift and go to state 139
    instruccion                    shift and go to state 24
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    tipoVar                        shift and go to state 14

state 133

    (18) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (41) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (29) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> . tipoVar ID declaracion_implicita
    (24) asignacion -> . ID IGUAL op_Ternario
    (25) asignacion -> . ID MAS IGUAL op_Ternario
    (26) asignacion -> . ID MENOS IGUAL op_Ternario
    (27) asignacion -> . ID MAS MAS
    (28) asignacion -> . ID MENOS MENOS
    (19) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (18) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (17) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (13) sContinue -> . CONTINUE PUNTOCOMA
    (14) sBreak -> . BREAK PUNTOCOMA
    (15) sReturn -> . RETURN PUNTOCOMA
    (16) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (34) tipoVar -> . VAR
    (35) tipoVar -> . CONST

    LLAVDER         shift and go to state 141
    CONSOLE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 23

    instruccion                    shift and go to state 24
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    tipoVar                        shift and go to state 14

state 134

    (17) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 142


state 135

    (44) op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .
    (46) exp_Or -> exp_Or . OR exp_And

    PUNTOCOMA       reduce using rule 44 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    PARDER          reduce using rule 44 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    COMA            reduce using rule 44 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    OR              shift and go to state 74


state 136

    (41) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .

    CONSOLE         reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    ID              reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    IF              reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    WHILE           reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    FOR             reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CONTINUE        reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    BREAK           reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    RETURN          reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    VAR             reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CONST           reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    $end            reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    LLAVDER         reduce using rule 41 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)


state 137

    (42) lista_exp -> lista_exp COMA op_Ternario .

    PARDER          reduce using rule 42 (lista_exp -> lista_exp COMA op_Ternario .)
    COMA            reduce using rule 42 (lista_exp -> lista_exp COMA op_Ternario .)


state 138

    (32) declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    ID              reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    IF              reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    $end            reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    NOT             reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    PARIZQ          reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    MENOS           reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    ENTERO          reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CADENA          reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    DECIMAL         reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CARACTER        reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    TRUE            reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FALSE           reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    NULL            reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 32 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)


state 139

    (19) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .

    CONSOLE         reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    ID              reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    IF              reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    WHILE           reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    FOR             reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CONTINUE        reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    BREAK           reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    RETURN          reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    VAR             reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CONST           reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    $end            reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    LLAVDER         reduce using rule 19 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)


state 140

    (20) sIf2 -> LLAVDER . ELSE sElse
    (21) sIf2 -> LLAVDER .

    ELSE            shift and go to state 143
    CONSOLE         reduce using rule 21 (sIf2 -> LLAVDER .)
    ID              reduce using rule 21 (sIf2 -> LLAVDER .)
    IF              reduce using rule 21 (sIf2 -> LLAVDER .)
    WHILE           reduce using rule 21 (sIf2 -> LLAVDER .)
    FOR             reduce using rule 21 (sIf2 -> LLAVDER .)
    CONTINUE        reduce using rule 21 (sIf2 -> LLAVDER .)
    BREAK           reduce using rule 21 (sIf2 -> LLAVDER .)
    RETURN          reduce using rule 21 (sIf2 -> LLAVDER .)
    VAR             reduce using rule 21 (sIf2 -> LLAVDER .)
    CONST           reduce using rule 21 (sIf2 -> LLAVDER .)
    $end            reduce using rule 21 (sIf2 -> LLAVDER .)
    LLAVDER         reduce using rule 21 (sIf2 -> LLAVDER .)


state 141

    (18) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 18 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)


state 142

    (17) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 144


state 143

    (20) sIf2 -> LLAVDER ELSE . sElse
    (22) sElse -> . LLAVIZQ instrucciones LLAVDER
    (23) sElse -> . sIf
    (19) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2

    LLAVIZQ         shift and go to state 146
    IF              shift and go to state 16

    sElse                          shift and go to state 145
    sIf                            shift and go to state 147

state 144

    (17) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (41) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (29) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> . tipoVar ID declaracion_implicita
    (24) asignacion -> . ID IGUAL op_Ternario
    (25) asignacion -> . ID MAS IGUAL op_Ternario
    (26) asignacion -> . ID MENOS IGUAL op_Ternario
    (27) asignacion -> . ID MAS MAS
    (28) asignacion -> . ID MENOS MENOS
    (19) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (18) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (17) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (13) sContinue -> . CONTINUE PUNTOCOMA
    (14) sBreak -> . BREAK PUNTOCOMA
    (15) sReturn -> . RETURN PUNTOCOMA
    (16) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (34) tipoVar -> . VAR
    (35) tipoVar -> . CONST

    CONSOLE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 23

    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    instrucciones                  shift and go to state 148
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    tipoVar                        shift and go to state 14

state 145

    (20) sIf2 -> LLAVDER ELSE sElse .

    CONSOLE         reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)
    ID              reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)
    IF              reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)
    WHILE           reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)
    FOR             reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)
    CONTINUE        reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)
    BREAK           reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)
    RETURN          reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)
    VAR             reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)
    CONST           reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)
    $end            reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)
    LLAVDER         reduce using rule 20 (sIf2 -> LLAVDER ELSE sElse .)


state 146

    (22) sElse -> LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (41) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (29) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> . tipoVar ID declaracion_implicita
    (24) asignacion -> . ID IGUAL op_Ternario
    (25) asignacion -> . ID MAS IGUAL op_Ternario
    (26) asignacion -> . ID MENOS IGUAL op_Ternario
    (27) asignacion -> . ID MAS MAS
    (28) asignacion -> . ID MENOS MENOS
    (19) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (18) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (17) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (13) sContinue -> . CONTINUE PUNTOCOMA
    (14) sBreak -> . BREAK PUNTOCOMA
    (15) sReturn -> . RETURN PUNTOCOMA
    (16) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (34) tipoVar -> . VAR
    (35) tipoVar -> . CONST

    CONSOLE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 23

    instrucciones                  shift and go to state 149
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    tipoVar                        shift and go to state 14

state 147

    (23) sElse -> sIf .

    CONSOLE         reduce using rule 23 (sElse -> sIf .)
    ID              reduce using rule 23 (sElse -> sIf .)
    IF              reduce using rule 23 (sElse -> sIf .)
    WHILE           reduce using rule 23 (sElse -> sIf .)
    FOR             reduce using rule 23 (sElse -> sIf .)
    CONTINUE        reduce using rule 23 (sElse -> sIf .)
    BREAK           reduce using rule 23 (sElse -> sIf .)
    RETURN          reduce using rule 23 (sElse -> sIf .)
    VAR             reduce using rule 23 (sElse -> sIf .)
    CONST           reduce using rule 23 (sElse -> sIf .)
    $end            reduce using rule 23 (sElse -> sIf .)
    LLAVDER         reduce using rule 23 (sElse -> sIf .)


state 148

    (17) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (41) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (29) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> . tipoVar ID declaracion_implicita
    (24) asignacion -> . ID IGUAL op_Ternario
    (25) asignacion -> . ID MAS IGUAL op_Ternario
    (26) asignacion -> . ID MENOS IGUAL op_Ternario
    (27) asignacion -> . ID MAS MAS
    (28) asignacion -> . ID MENOS MENOS
    (19) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (18) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (17) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (13) sContinue -> . CONTINUE PUNTOCOMA
    (14) sBreak -> . BREAK PUNTOCOMA
    (15) sReturn -> . RETURN PUNTOCOMA
    (16) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (34) tipoVar -> . VAR
    (35) tipoVar -> . CONST

    LLAVDER         shift and go to state 150
    CONSOLE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 23

    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    instruccion                    shift and go to state 24
    imprimir_instr                 shift and go to state 4
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    tipoVar                        shift and go to state 14

state 149

    (22) sElse -> LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (41) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (29) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (30) declaracion -> . tipoVar ID declaracion_implicita
    (24) asignacion -> . ID IGUAL op_Ternario
    (25) asignacion -> . ID MAS IGUAL op_Ternario
    (26) asignacion -> . ID MENOS IGUAL op_Ternario
    (27) asignacion -> . ID MAS MAS
    (28) asignacion -> . ID MENOS MENOS
    (19) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (18) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (17) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (13) sContinue -> . CONTINUE PUNTOCOMA
    (14) sBreak -> . BREAK PUNTOCOMA
    (15) sReturn -> . RETURN PUNTOCOMA
    (16) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (34) tipoVar -> . VAR
    (35) tipoVar -> . CONST

    LLAVDER         shift and go to state 151
    CONSOLE         shift and go to state 13
    ID              shift and go to state 15
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 20
    RETURN          shift and go to state 21
    VAR             shift and go to state 22
    CONST           shift and go to state 23

    instruccion                    shift and go to state 24
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    tipoVar                        shift and go to state 14

state 150

    (17) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 17 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)


state 151

    (22) sElse -> LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 22 (sElse -> LLAVIZQ instrucciones LLAVDER .)

