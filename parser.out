Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTBLOCK
    FUNCTION
    INTERFACE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> imprimir_instr
Rule 5     instruccion -> declaracion
Rule 6     instruccion -> asignacion PUNTOCOMA
Rule 7     instruccion -> sIf
Rule 8     instruccion -> sWhile
Rule 9     instruccion -> sFor
Rule 10    instruccion -> sContinue
Rule 11    instruccion -> sBreak
Rule 12    instruccion -> sReturn
Rule 13    instruccion -> sSwitch
Rule 14    sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
Rule 15    listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones
Rule 16    listCases -> listCases DEFAULT DOSPUNTOS instrucciones
Rule 17    listCases -> CASE op_Ternario DOSPUNTOS instrucciones
Rule 18    listCases -> DEFAULT DOSPUNTOS instrucciones
Rule 19    sContinue -> CONTINUE PUNTOCOMA
Rule 20    sBreak -> BREAK PUNTOCOMA
Rule 21    sReturn -> RETURN PUNTOCOMA
Rule 22    sReturn -> RETURN op_Ternario PUNTOCOMA
Rule 23    sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
Rule 24    sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
Rule 25    sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
Rule 26    sIf2 -> LLAVDER ELSE sElse
Rule 27    sIf2 -> LLAVDER
Rule 28    sElse -> LLAVIZQ instrucciones LLAVDER
Rule 29    sElse -> sIf
Rule 30    asignacion -> ID IGUAL op_Ternario
Rule 31    asignacion -> ID MAS IGUAL op_Ternario
Rule 32    asignacion -> ID MENOS IGUAL op_Ternario
Rule 33    asignacion -> ID MAS MAS
Rule 34    asignacion -> ID MENOS MENOS
Rule 35    declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita
Rule 36    declaracion -> tipoVar ID declaracion_implicita
Rule 37    declaracion_explicita -> PUNTOCOMA
Rule 38    declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA
Rule 39    declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA
Rule 40    tipoVar -> VAR
Rule 41    tipoVar -> CONST
Rule 42    tipo -> NUMBER
Rule 43    tipo -> FLOAT
Rule 44    tipo -> STRING
Rule 45    tipo -> BOOLEAN
Rule 46    tipo -> CHAR
Rule 47    imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
Rule 48    lista_exp -> lista_exp COMA op_Ternario
Rule 49    lista_exp -> op_Ternario
Rule 50    op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
Rule 51    op_Ternario -> exp_Or
Rule 52    exp_Or -> exp_Or OR exp_And
Rule 53    exp_Or -> exp_And
Rule 54    exp_And -> exp_And AND exp_Not
Rule 55    exp_And -> exp_Not
Rule 56    exp_Not -> lNot exp_Comp
Rule 57    exp_Not -> exp_Comp
Rule 58    lNot -> lNot NOT
Rule 59    lNot -> NOT
Rule 60    exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
Rule 61    exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos
Rule 62    exp_Comp -> exp_rel
Rule 63    exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos
Rule 64    exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos
Rule 65    exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
Rule 66    exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos
Rule 67    exp_rel -> exp_Sum_Menos
Rule 68    exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div
Rule 69    exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div
Rule 70    exp_Sum_Menos -> exp_Mul_Div
Rule 71    exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis
Rule 72    exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis
Rule 73    exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis
Rule 74    exp_Mul_Div -> exp_Parentesis
Rule 75    exp_Parentesis -> PARIZQ exp_Or PARDER
Rule 76    exp_Parentesis -> exp_Negativo
Rule 77    exp_Negativo -> MENOS valor
Rule 78    exp_Negativo -> valor
Rule 79    valor -> ENTERO
Rule 80    valor -> CADENA
Rule 81    valor -> DECIMAL
Rule 82    valor -> CARACTER
Rule 83    valor -> TRUE
Rule 84    valor -> FALSE
Rule 85    valor -> NULL
Rule 86    valor -> ID

Terminals, with rules where they appear

AND                  : 54
BOOLEAN              : 45
BREAK                : 20
CADENA               : 80
CARACTER             : 82
CASE                 : 15 17
CHAR                 : 46
COMA                 : 48
COMMENTBLOCK         : 
CONSOLE              : 47
CONST                : 41
CONTINUE             : 19
DECIMAL              : 81
DEFAULT              : 16 18
DISTINTO             : 61
DIVIDIDO             : 72
DOSPUNTOS            : 15 16 17 18 35 50
ELSE                 : 26
ENTERO               : 79
EQUIVALENTE          : 60
FALSE                : 84
FLOAT                : 43
FOR                  : 23
FUNCTION             : 
ID                   : 30 31 32 33 34 35 36 86
IF                   : 25
IGUAL                : 30 31 32 38 39
INTERFACE            : 
INTERROGACION        : 50
LLAVDER              : 14 23 24 26 27 28
LLAVIZQ              : 14 23 24 25 28
LOG                  : 47
MAS                  : 31 33 33 68
MAYOR                : 63
MAYORIGUAL           : 65
MENOR                : 64
MENORIGUAL           : 66
MENOS                : 32 34 34 69 77
MODULO               : 73
NOT                  : 58 59
NULL                 : 85
NUMBER               : 42
OR                   : 52
PARDER               : 14 23 24 25 47 75
PARIZQ               : 14 23 24 25 47 75
POR                  : 71
PUNTO                : 47
PUNTOCOMA            : 6 19 20 21 22 23 37 38 39 47
RETURN               : 21 22
STRING               : 44
SWITCH               : 14
TRUE                 : 83
VAR                  : 40
WHILE                : 24
error                : 

Nonterminals, with rules where they appear

asignacion           : 6 23
declaracion          : 5 23
declaracion_explicita : 35
declaracion_implicita : 36
exp_And              : 52 53 54
exp_Comp             : 56 57
exp_Mul_Div          : 68 69 70 71 72 73
exp_Negativo         : 76
exp_Not              : 54 55
exp_Or               : 50 50 50 51 52 75
exp_Parentesis       : 71 72 73 74
exp_Sum_Menos        : 60 60 61 61 63 63 64 64 65 65 66 66 67 68 69
exp_rel              : 62
imprimir_instr       : 4
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 15 16 17 18 23 24 25 28
lNot                 : 56 58
listCases            : 14 15 16
lista_exp            : 47 48
op_Ternario          : 14 15 17 22 23 24 25 30 31 32 38 39 48 49
sBreak               : 11
sContinue            : 10
sElse                : 26
sFor                 : 9
sIf                  : 7 29
sIf2                 : 25
sReturn              : 12
sSwitch              : 13
sWhile               : 8
tipo                 : 35
tipoVar              : 35 36
valor                : 77 78

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    $end            reduce using rule 1 (init -> instrucciones .)
    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instruccion                    shift and go to state 26
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 3

    (3) instrucciones -> instruccion .

    CONSOLE         reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
    SWITCH          reduce using rule 3 (instrucciones -> instruccion .)
    VAR             reduce using rule 3 (instrucciones -> instruccion .)
    CONST           reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    LLAVDER         reduce using rule 3 (instrucciones -> instruccion .)
    CASE            reduce using rule 3 (instrucciones -> instruccion .)
    DEFAULT         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> imprimir_instr .

    CONSOLE         reduce using rule 4 (instruccion -> imprimir_instr .)
    ID              reduce using rule 4 (instruccion -> imprimir_instr .)
    IF              reduce using rule 4 (instruccion -> imprimir_instr .)
    WHILE           reduce using rule 4 (instruccion -> imprimir_instr .)
    FOR             reduce using rule 4 (instruccion -> imprimir_instr .)
    CONTINUE        reduce using rule 4 (instruccion -> imprimir_instr .)
    BREAK           reduce using rule 4 (instruccion -> imprimir_instr .)
    RETURN          reduce using rule 4 (instruccion -> imprimir_instr .)
    SWITCH          reduce using rule 4 (instruccion -> imprimir_instr .)
    VAR             reduce using rule 4 (instruccion -> imprimir_instr .)
    CONST           reduce using rule 4 (instruccion -> imprimir_instr .)
    $end            reduce using rule 4 (instruccion -> imprimir_instr .)
    LLAVDER         reduce using rule 4 (instruccion -> imprimir_instr .)
    CASE            reduce using rule 4 (instruccion -> imprimir_instr .)
    DEFAULT         reduce using rule 4 (instruccion -> imprimir_instr .)


state 5

    (5) instruccion -> declaracion .

    CONSOLE         reduce using rule 5 (instruccion -> declaracion .)
    ID              reduce using rule 5 (instruccion -> declaracion .)
    IF              reduce using rule 5 (instruccion -> declaracion .)
    WHILE           reduce using rule 5 (instruccion -> declaracion .)
    FOR             reduce using rule 5 (instruccion -> declaracion .)
    CONTINUE        reduce using rule 5 (instruccion -> declaracion .)
    BREAK           reduce using rule 5 (instruccion -> declaracion .)
    RETURN          reduce using rule 5 (instruccion -> declaracion .)
    SWITCH          reduce using rule 5 (instruccion -> declaracion .)
    VAR             reduce using rule 5 (instruccion -> declaracion .)
    CONST           reduce using rule 5 (instruccion -> declaracion .)
    $end            reduce using rule 5 (instruccion -> declaracion .)
    LLAVDER         reduce using rule 5 (instruccion -> declaracion .)
    CASE            reduce using rule 5 (instruccion -> declaracion .)
    DEFAULT         reduce using rule 5 (instruccion -> declaracion .)


state 6

    (6) instruccion -> asignacion . PUNTOCOMA

    PUNTOCOMA       shift and go to state 27


state 7

    (7) instruccion -> sIf .

    CONSOLE         reduce using rule 7 (instruccion -> sIf .)
    ID              reduce using rule 7 (instruccion -> sIf .)
    IF              reduce using rule 7 (instruccion -> sIf .)
    WHILE           reduce using rule 7 (instruccion -> sIf .)
    FOR             reduce using rule 7 (instruccion -> sIf .)
    CONTINUE        reduce using rule 7 (instruccion -> sIf .)
    BREAK           reduce using rule 7 (instruccion -> sIf .)
    RETURN          reduce using rule 7 (instruccion -> sIf .)
    SWITCH          reduce using rule 7 (instruccion -> sIf .)
    VAR             reduce using rule 7 (instruccion -> sIf .)
    CONST           reduce using rule 7 (instruccion -> sIf .)
    $end            reduce using rule 7 (instruccion -> sIf .)
    LLAVDER         reduce using rule 7 (instruccion -> sIf .)
    CASE            reduce using rule 7 (instruccion -> sIf .)
    DEFAULT         reduce using rule 7 (instruccion -> sIf .)


state 8

    (8) instruccion -> sWhile .

    CONSOLE         reduce using rule 8 (instruccion -> sWhile .)
    ID              reduce using rule 8 (instruccion -> sWhile .)
    IF              reduce using rule 8 (instruccion -> sWhile .)
    WHILE           reduce using rule 8 (instruccion -> sWhile .)
    FOR             reduce using rule 8 (instruccion -> sWhile .)
    CONTINUE        reduce using rule 8 (instruccion -> sWhile .)
    BREAK           reduce using rule 8 (instruccion -> sWhile .)
    RETURN          reduce using rule 8 (instruccion -> sWhile .)
    SWITCH          reduce using rule 8 (instruccion -> sWhile .)
    VAR             reduce using rule 8 (instruccion -> sWhile .)
    CONST           reduce using rule 8 (instruccion -> sWhile .)
    $end            reduce using rule 8 (instruccion -> sWhile .)
    LLAVDER         reduce using rule 8 (instruccion -> sWhile .)
    CASE            reduce using rule 8 (instruccion -> sWhile .)
    DEFAULT         reduce using rule 8 (instruccion -> sWhile .)


state 9

    (9) instruccion -> sFor .

    CONSOLE         reduce using rule 9 (instruccion -> sFor .)
    ID              reduce using rule 9 (instruccion -> sFor .)
    IF              reduce using rule 9 (instruccion -> sFor .)
    WHILE           reduce using rule 9 (instruccion -> sFor .)
    FOR             reduce using rule 9 (instruccion -> sFor .)
    CONTINUE        reduce using rule 9 (instruccion -> sFor .)
    BREAK           reduce using rule 9 (instruccion -> sFor .)
    RETURN          reduce using rule 9 (instruccion -> sFor .)
    SWITCH          reduce using rule 9 (instruccion -> sFor .)
    VAR             reduce using rule 9 (instruccion -> sFor .)
    CONST           reduce using rule 9 (instruccion -> sFor .)
    $end            reduce using rule 9 (instruccion -> sFor .)
    LLAVDER         reduce using rule 9 (instruccion -> sFor .)
    CASE            reduce using rule 9 (instruccion -> sFor .)
    DEFAULT         reduce using rule 9 (instruccion -> sFor .)


state 10

    (10) instruccion -> sContinue .

    CONSOLE         reduce using rule 10 (instruccion -> sContinue .)
    ID              reduce using rule 10 (instruccion -> sContinue .)
    IF              reduce using rule 10 (instruccion -> sContinue .)
    WHILE           reduce using rule 10 (instruccion -> sContinue .)
    FOR             reduce using rule 10 (instruccion -> sContinue .)
    CONTINUE        reduce using rule 10 (instruccion -> sContinue .)
    BREAK           reduce using rule 10 (instruccion -> sContinue .)
    RETURN          reduce using rule 10 (instruccion -> sContinue .)
    SWITCH          reduce using rule 10 (instruccion -> sContinue .)
    VAR             reduce using rule 10 (instruccion -> sContinue .)
    CONST           reduce using rule 10 (instruccion -> sContinue .)
    $end            reduce using rule 10 (instruccion -> sContinue .)
    LLAVDER         reduce using rule 10 (instruccion -> sContinue .)
    CASE            reduce using rule 10 (instruccion -> sContinue .)
    DEFAULT         reduce using rule 10 (instruccion -> sContinue .)


state 11

    (11) instruccion -> sBreak .

    CONSOLE         reduce using rule 11 (instruccion -> sBreak .)
    ID              reduce using rule 11 (instruccion -> sBreak .)
    IF              reduce using rule 11 (instruccion -> sBreak .)
    WHILE           reduce using rule 11 (instruccion -> sBreak .)
    FOR             reduce using rule 11 (instruccion -> sBreak .)
    CONTINUE        reduce using rule 11 (instruccion -> sBreak .)
    BREAK           reduce using rule 11 (instruccion -> sBreak .)
    RETURN          reduce using rule 11 (instruccion -> sBreak .)
    SWITCH          reduce using rule 11 (instruccion -> sBreak .)
    VAR             reduce using rule 11 (instruccion -> sBreak .)
    CONST           reduce using rule 11 (instruccion -> sBreak .)
    $end            reduce using rule 11 (instruccion -> sBreak .)
    LLAVDER         reduce using rule 11 (instruccion -> sBreak .)
    CASE            reduce using rule 11 (instruccion -> sBreak .)
    DEFAULT         reduce using rule 11 (instruccion -> sBreak .)


state 12

    (12) instruccion -> sReturn .

    CONSOLE         reduce using rule 12 (instruccion -> sReturn .)
    ID              reduce using rule 12 (instruccion -> sReturn .)
    IF              reduce using rule 12 (instruccion -> sReturn .)
    WHILE           reduce using rule 12 (instruccion -> sReturn .)
    FOR             reduce using rule 12 (instruccion -> sReturn .)
    CONTINUE        reduce using rule 12 (instruccion -> sReturn .)
    BREAK           reduce using rule 12 (instruccion -> sReturn .)
    RETURN          reduce using rule 12 (instruccion -> sReturn .)
    SWITCH          reduce using rule 12 (instruccion -> sReturn .)
    VAR             reduce using rule 12 (instruccion -> sReturn .)
    CONST           reduce using rule 12 (instruccion -> sReturn .)
    $end            reduce using rule 12 (instruccion -> sReturn .)
    LLAVDER         reduce using rule 12 (instruccion -> sReturn .)
    CASE            reduce using rule 12 (instruccion -> sReturn .)
    DEFAULT         reduce using rule 12 (instruccion -> sReturn .)


state 13

    (13) instruccion -> sSwitch .

    CONSOLE         reduce using rule 13 (instruccion -> sSwitch .)
    ID              reduce using rule 13 (instruccion -> sSwitch .)
    IF              reduce using rule 13 (instruccion -> sSwitch .)
    WHILE           reduce using rule 13 (instruccion -> sSwitch .)
    FOR             reduce using rule 13 (instruccion -> sSwitch .)
    CONTINUE        reduce using rule 13 (instruccion -> sSwitch .)
    BREAK           reduce using rule 13 (instruccion -> sSwitch .)
    RETURN          reduce using rule 13 (instruccion -> sSwitch .)
    SWITCH          reduce using rule 13 (instruccion -> sSwitch .)
    VAR             reduce using rule 13 (instruccion -> sSwitch .)
    CONST           reduce using rule 13 (instruccion -> sSwitch .)
    $end            reduce using rule 13 (instruccion -> sSwitch .)
    LLAVDER         reduce using rule 13 (instruccion -> sSwitch .)
    CASE            reduce using rule 13 (instruccion -> sSwitch .)
    DEFAULT         reduce using rule 13 (instruccion -> sSwitch .)


state 14

    (47) imprimir_instr -> CONSOLE . PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA

    PUNTO           shift and go to state 28


state 15

    (35) declaracion -> tipoVar . ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> tipoVar . ID declaracion_implicita

    ID              shift and go to state 29


state 16

    (30) asignacion -> ID . IGUAL op_Ternario
    (31) asignacion -> ID . MAS IGUAL op_Ternario
    (32) asignacion -> ID . MENOS IGUAL op_Ternario
    (33) asignacion -> ID . MAS MAS
    (34) asignacion -> ID . MENOS MENOS

    IGUAL           shift and go to state 30
    MAS             shift and go to state 31
    MENOS           shift and go to state 32


state 17

    (25) sIf -> IF . PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2

    PARIZQ          shift and go to state 33


state 18

    (24) sWhile -> WHILE . PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 34


state 19

    (23) sFor -> FOR . PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 35


state 20

    (19) sContinue -> CONTINUE . PUNTOCOMA

    PUNTOCOMA       shift and go to state 36


state 21

    (20) sBreak -> BREAK . PUNTOCOMA

    PUNTOCOMA       shift and go to state 37


state 22

    (21) sReturn -> RETURN . PUNTOCOMA
    (22) sReturn -> RETURN . op_Ternario PUNTOCOMA
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PUNTOCOMA       shift and go to state 38
    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 39
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 23

    (14) sSwitch -> SWITCH . PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER

    PARIZQ          shift and go to state 62


state 24

    (40) tipoVar -> VAR .

    ID              reduce using rule 40 (tipoVar -> VAR .)


state 25

    (41) tipoVar -> CONST .

    ID              reduce using rule 41 (tipoVar -> CONST .)


state 26

    (2) instrucciones -> instrucciones instruccion .

    CONSOLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    SWITCH          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    VAR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONST           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LLAVDER         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CASE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DEFAULT         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 27

    (6) instruccion -> asignacion PUNTOCOMA .

    CONSOLE         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    ID              reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    IF              reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    WHILE           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    FOR             reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CONTINUE        reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    BREAK           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    RETURN          reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    SWITCH          reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    VAR             reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CONST           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    $end            reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    LLAVDER         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CASE            reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    DEFAULT         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)


state 28

    (47) imprimir_instr -> CONSOLE PUNTO . LOG PARIZQ lista_exp PARDER PUNTOCOMA

    LOG             shift and go to state 63


state 29

    (35) declaracion -> tipoVar ID . DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> tipoVar ID . declaracion_implicita
    (39) declaracion_implicita -> . IGUAL op_Ternario PUNTOCOMA

    DOSPUNTOS       shift and go to state 64
    IGUAL           shift and go to state 66

    declaracion_implicita          shift and go to state 65

state 30

    (30) asignacion -> ID IGUAL . op_Ternario
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 67
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 31

    (31) asignacion -> ID MAS . IGUAL op_Ternario
    (33) asignacion -> ID MAS . MAS

    IGUAL           shift and go to state 69
    MAS             shift and go to state 68


state 32

    (32) asignacion -> ID MENOS . IGUAL op_Ternario
    (34) asignacion -> ID MENOS . MENOS

    IGUAL           shift and go to state 71
    MENOS           shift and go to state 70


state 33

    (25) sIf -> IF PARIZQ . op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 72
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 34

    (24) sWhile -> WHILE PARIZQ . op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 73
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 35

    (23) sFor -> FOR PARIZQ . declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    VAR             shift and go to state 24
    CONST           shift and go to state 25

    declaracion                    shift and go to state 74
    tipoVar                        shift and go to state 15

state 36

    (19) sContinue -> CONTINUE PUNTOCOMA .

    CONSOLE         reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    ID              reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    IF              reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    WHILE           reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    FOR             reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    CONTINUE        reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    BREAK           reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    RETURN          reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    SWITCH          reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    VAR             reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    CONST           reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    $end            reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    LLAVDER         reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    CASE            reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)
    DEFAULT         reduce using rule 19 (sContinue -> CONTINUE PUNTOCOMA .)


state 37

    (20) sBreak -> BREAK PUNTOCOMA .

    CONSOLE         reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    ID              reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    IF              reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    WHILE           reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    FOR             reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    CONTINUE        reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    BREAK           reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    RETURN          reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    SWITCH          reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    VAR             reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    CONST           reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    $end            reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    LLAVDER         reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    CASE            reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)
    DEFAULT         reduce using rule 20 (sBreak -> BREAK PUNTOCOMA .)


state 38

    (21) sReturn -> RETURN PUNTOCOMA .

    CONSOLE         reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    ID              reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    IF              reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    WHILE           reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    FOR             reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    CONTINUE        reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    BREAK           reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    RETURN          reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    SWITCH          reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    VAR             reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    CONST           reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    $end            reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    LLAVDER         reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    CASE            reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)
    DEFAULT         reduce using rule 21 (sReturn -> RETURN PUNTOCOMA .)


state 39

    (22) sReturn -> RETURN op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 75


state 40

    (50) op_Ternario -> exp_Or . INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> exp_Or .
    (52) exp_Or -> exp_Or . OR exp_And

    INTERROGACION   shift and go to state 76
    PUNTOCOMA       reduce using rule 51 (op_Ternario -> exp_Or .)
    PARDER          reduce using rule 51 (op_Ternario -> exp_Or .)
    COMA            reduce using rule 51 (op_Ternario -> exp_Or .)
    DOSPUNTOS       reduce using rule 51 (op_Ternario -> exp_Or .)
    OR              shift and go to state 77


state 41

    (53) exp_Or -> exp_And .
    (54) exp_And -> exp_And . AND exp_Not

    INTERROGACION   reduce using rule 53 (exp_Or -> exp_And .)
    OR              reduce using rule 53 (exp_Or -> exp_And .)
    PUNTOCOMA       reduce using rule 53 (exp_Or -> exp_And .)
    PARDER          reduce using rule 53 (exp_Or -> exp_And .)
    DOSPUNTOS       reduce using rule 53 (exp_Or -> exp_And .)
    COMA            reduce using rule 53 (exp_Or -> exp_And .)
    AND             shift and go to state 78


state 42

    (55) exp_And -> exp_Not .

    AND             reduce using rule 55 (exp_And -> exp_Not .)
    INTERROGACION   reduce using rule 55 (exp_And -> exp_Not .)
    OR              reduce using rule 55 (exp_And -> exp_Not .)
    PUNTOCOMA       reduce using rule 55 (exp_And -> exp_Not .)
    PARDER          reduce using rule 55 (exp_And -> exp_Not .)
    DOSPUNTOS       reduce using rule 55 (exp_And -> exp_Not .)
    COMA            reduce using rule 55 (exp_And -> exp_Not .)


state 43

    (56) exp_Not -> lNot . exp_Comp
    (58) lNot -> lNot . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 80
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Comp                       shift and go to state 79
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 44

    (57) exp_Not -> exp_Comp .

    AND             reduce using rule 57 (exp_Not -> exp_Comp .)
    INTERROGACION   reduce using rule 57 (exp_Not -> exp_Comp .)
    OR              reduce using rule 57 (exp_Not -> exp_Comp .)
    PUNTOCOMA       reduce using rule 57 (exp_Not -> exp_Comp .)
    PARDER          reduce using rule 57 (exp_Not -> exp_Comp .)
    DOSPUNTOS       reduce using rule 57 (exp_Not -> exp_Comp .)
    COMA            reduce using rule 57 (exp_Not -> exp_Comp .)


state 45

    (59) lNot -> NOT .

    NOT             reduce using rule 59 (lNot -> NOT .)
    PARIZQ          reduce using rule 59 (lNot -> NOT .)
    MENOS           reduce using rule 59 (lNot -> NOT .)
    ENTERO          reduce using rule 59 (lNot -> NOT .)
    CADENA          reduce using rule 59 (lNot -> NOT .)
    DECIMAL         reduce using rule 59 (lNot -> NOT .)
    CARACTER        reduce using rule 59 (lNot -> NOT .)
    TRUE            reduce using rule 59 (lNot -> NOT .)
    FALSE           reduce using rule 59 (lNot -> NOT .)
    NULL            reduce using rule 59 (lNot -> NOT .)
    ID              reduce using rule 59 (lNot -> NOT .)


state 46

    (60) exp_Comp -> exp_Sum_Menos . EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> exp_Sum_Menos . DISTINTO exp_Sum_Menos
    (68) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (69) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div
    (63) exp_rel -> exp_Sum_Menos . MAYOR exp_Sum_Menos
    (64) exp_rel -> exp_Sum_Menos . MENOR exp_Sum_Menos
    (65) exp_rel -> exp_Sum_Menos . MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> exp_Sum_Menos . MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> exp_Sum_Menos .

    EQUIVALENTE     shift and go to state 81
    DISTINTO        shift and go to state 82
    MAS             shift and go to state 83
    MENOS           shift and go to state 84
    MAYOR           shift and go to state 85
    MENOR           shift and go to state 86
    MAYORIGUAL      shift and go to state 87
    MENORIGUAL      shift and go to state 88
    AND             reduce using rule 67 (exp_rel -> exp_Sum_Menos .)
    INTERROGACION   reduce using rule 67 (exp_rel -> exp_Sum_Menos .)
    OR              reduce using rule 67 (exp_rel -> exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 67 (exp_rel -> exp_Sum_Menos .)
    PARDER          reduce using rule 67 (exp_rel -> exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 67 (exp_rel -> exp_Sum_Menos .)
    COMA            reduce using rule 67 (exp_rel -> exp_Sum_Menos .)


state 47

    (62) exp_Comp -> exp_rel .

    AND             reduce using rule 62 (exp_Comp -> exp_rel .)
    INTERROGACION   reduce using rule 62 (exp_Comp -> exp_rel .)
    OR              reduce using rule 62 (exp_Comp -> exp_rel .)
    PUNTOCOMA       reduce using rule 62 (exp_Comp -> exp_rel .)
    PARDER          reduce using rule 62 (exp_Comp -> exp_rel .)
    DOSPUNTOS       reduce using rule 62 (exp_Comp -> exp_rel .)
    COMA            reduce using rule 62 (exp_Comp -> exp_rel .)


state 48

    (70) exp_Sum_Menos -> exp_Mul_Div .
    (71) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (72) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    DISTINTO        reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    MAS             reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    MENOS           reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    MAYOR           reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    MENOR           reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    MENORIGUAL      reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    AND             reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    INTERROGACION   reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    OR              reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    PARDER          reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    COMA            reduce using rule 70 (exp_Sum_Menos -> exp_Mul_Div .)
    POR             shift and go to state 89
    DIVIDIDO        shift and go to state 90
    MODULO          shift and go to state 91


state 49

    (77) exp_Negativo -> MENOS . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    valor                          shift and go to state 92

state 50

    (74) exp_Mul_Div -> exp_Parentesis .

    POR             reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    DIVIDIDO        reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    MODULO          reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    EQUIVALENTE     reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    DISTINTO        reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    MAS             reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    MENOS           reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    MAYOR           reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    MENOR           reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    MAYORIGUAL      reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    MENORIGUAL      reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    AND             reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    INTERROGACION   reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    OR              reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    PUNTOCOMA       reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    PARDER          reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    DOSPUNTOS       reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)
    COMA            reduce using rule 74 (exp_Mul_Div -> exp_Parentesis .)


state 51

    (75) exp_Parentesis -> PARIZQ . exp_Or PARDER
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Or                         shift and go to state 93
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 52

    (76) exp_Parentesis -> exp_Negativo .

    POR             reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    DIVIDIDO        reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    MODULO          reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    EQUIVALENTE     reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    DISTINTO        reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    MAS             reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    MENOS           reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    MAYOR           reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    MENOR           reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    MAYORIGUAL      reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    MENORIGUAL      reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    AND             reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    INTERROGACION   reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    OR              reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    PUNTOCOMA       reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    PARDER          reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    DOSPUNTOS       reduce using rule 76 (exp_Parentesis -> exp_Negativo .)
    COMA            reduce using rule 76 (exp_Parentesis -> exp_Negativo .)


state 53

    (78) exp_Negativo -> valor .

    POR             reduce using rule 78 (exp_Negativo -> valor .)
    DIVIDIDO        reduce using rule 78 (exp_Negativo -> valor .)
    MODULO          reduce using rule 78 (exp_Negativo -> valor .)
    EQUIVALENTE     reduce using rule 78 (exp_Negativo -> valor .)
    DISTINTO        reduce using rule 78 (exp_Negativo -> valor .)
    MAS             reduce using rule 78 (exp_Negativo -> valor .)
    MENOS           reduce using rule 78 (exp_Negativo -> valor .)
    MAYOR           reduce using rule 78 (exp_Negativo -> valor .)
    MENOR           reduce using rule 78 (exp_Negativo -> valor .)
    MAYORIGUAL      reduce using rule 78 (exp_Negativo -> valor .)
    MENORIGUAL      reduce using rule 78 (exp_Negativo -> valor .)
    AND             reduce using rule 78 (exp_Negativo -> valor .)
    INTERROGACION   reduce using rule 78 (exp_Negativo -> valor .)
    OR              reduce using rule 78 (exp_Negativo -> valor .)
    PUNTOCOMA       reduce using rule 78 (exp_Negativo -> valor .)
    PARDER          reduce using rule 78 (exp_Negativo -> valor .)
    DOSPUNTOS       reduce using rule 78 (exp_Negativo -> valor .)
    COMA            reduce using rule 78 (exp_Negativo -> valor .)


state 54

    (79) valor -> ENTERO .

    POR             reduce using rule 79 (valor -> ENTERO .)
    DIVIDIDO        reduce using rule 79 (valor -> ENTERO .)
    MODULO          reduce using rule 79 (valor -> ENTERO .)
    EQUIVALENTE     reduce using rule 79 (valor -> ENTERO .)
    DISTINTO        reduce using rule 79 (valor -> ENTERO .)
    MAS             reduce using rule 79 (valor -> ENTERO .)
    MENOS           reduce using rule 79 (valor -> ENTERO .)
    MAYOR           reduce using rule 79 (valor -> ENTERO .)
    MENOR           reduce using rule 79 (valor -> ENTERO .)
    MAYORIGUAL      reduce using rule 79 (valor -> ENTERO .)
    MENORIGUAL      reduce using rule 79 (valor -> ENTERO .)
    AND             reduce using rule 79 (valor -> ENTERO .)
    INTERROGACION   reduce using rule 79 (valor -> ENTERO .)
    OR              reduce using rule 79 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 79 (valor -> ENTERO .)
    PARDER          reduce using rule 79 (valor -> ENTERO .)
    DOSPUNTOS       reduce using rule 79 (valor -> ENTERO .)
    COMA            reduce using rule 79 (valor -> ENTERO .)


state 55

    (80) valor -> CADENA .

    POR             reduce using rule 80 (valor -> CADENA .)
    DIVIDIDO        reduce using rule 80 (valor -> CADENA .)
    MODULO          reduce using rule 80 (valor -> CADENA .)
    EQUIVALENTE     reduce using rule 80 (valor -> CADENA .)
    DISTINTO        reduce using rule 80 (valor -> CADENA .)
    MAS             reduce using rule 80 (valor -> CADENA .)
    MENOS           reduce using rule 80 (valor -> CADENA .)
    MAYOR           reduce using rule 80 (valor -> CADENA .)
    MENOR           reduce using rule 80 (valor -> CADENA .)
    MAYORIGUAL      reduce using rule 80 (valor -> CADENA .)
    MENORIGUAL      reduce using rule 80 (valor -> CADENA .)
    AND             reduce using rule 80 (valor -> CADENA .)
    INTERROGACION   reduce using rule 80 (valor -> CADENA .)
    OR              reduce using rule 80 (valor -> CADENA .)
    PUNTOCOMA       reduce using rule 80 (valor -> CADENA .)
    PARDER          reduce using rule 80 (valor -> CADENA .)
    DOSPUNTOS       reduce using rule 80 (valor -> CADENA .)
    COMA            reduce using rule 80 (valor -> CADENA .)


state 56

    (81) valor -> DECIMAL .

    POR             reduce using rule 81 (valor -> DECIMAL .)
    DIVIDIDO        reduce using rule 81 (valor -> DECIMAL .)
    MODULO          reduce using rule 81 (valor -> DECIMAL .)
    EQUIVALENTE     reduce using rule 81 (valor -> DECIMAL .)
    DISTINTO        reduce using rule 81 (valor -> DECIMAL .)
    MAS             reduce using rule 81 (valor -> DECIMAL .)
    MENOS           reduce using rule 81 (valor -> DECIMAL .)
    MAYOR           reduce using rule 81 (valor -> DECIMAL .)
    MENOR           reduce using rule 81 (valor -> DECIMAL .)
    MAYORIGUAL      reduce using rule 81 (valor -> DECIMAL .)
    MENORIGUAL      reduce using rule 81 (valor -> DECIMAL .)
    AND             reduce using rule 81 (valor -> DECIMAL .)
    INTERROGACION   reduce using rule 81 (valor -> DECIMAL .)
    OR              reduce using rule 81 (valor -> DECIMAL .)
    PUNTOCOMA       reduce using rule 81 (valor -> DECIMAL .)
    PARDER          reduce using rule 81 (valor -> DECIMAL .)
    DOSPUNTOS       reduce using rule 81 (valor -> DECIMAL .)
    COMA            reduce using rule 81 (valor -> DECIMAL .)


state 57

    (82) valor -> CARACTER .

    POR             reduce using rule 82 (valor -> CARACTER .)
    DIVIDIDO        reduce using rule 82 (valor -> CARACTER .)
    MODULO          reduce using rule 82 (valor -> CARACTER .)
    EQUIVALENTE     reduce using rule 82 (valor -> CARACTER .)
    DISTINTO        reduce using rule 82 (valor -> CARACTER .)
    MAS             reduce using rule 82 (valor -> CARACTER .)
    MENOS           reduce using rule 82 (valor -> CARACTER .)
    MAYOR           reduce using rule 82 (valor -> CARACTER .)
    MENOR           reduce using rule 82 (valor -> CARACTER .)
    MAYORIGUAL      reduce using rule 82 (valor -> CARACTER .)
    MENORIGUAL      reduce using rule 82 (valor -> CARACTER .)
    AND             reduce using rule 82 (valor -> CARACTER .)
    INTERROGACION   reduce using rule 82 (valor -> CARACTER .)
    OR              reduce using rule 82 (valor -> CARACTER .)
    PUNTOCOMA       reduce using rule 82 (valor -> CARACTER .)
    PARDER          reduce using rule 82 (valor -> CARACTER .)
    DOSPUNTOS       reduce using rule 82 (valor -> CARACTER .)
    COMA            reduce using rule 82 (valor -> CARACTER .)


state 58

    (83) valor -> TRUE .

    POR             reduce using rule 83 (valor -> TRUE .)
    DIVIDIDO        reduce using rule 83 (valor -> TRUE .)
    MODULO          reduce using rule 83 (valor -> TRUE .)
    EQUIVALENTE     reduce using rule 83 (valor -> TRUE .)
    DISTINTO        reduce using rule 83 (valor -> TRUE .)
    MAS             reduce using rule 83 (valor -> TRUE .)
    MENOS           reduce using rule 83 (valor -> TRUE .)
    MAYOR           reduce using rule 83 (valor -> TRUE .)
    MENOR           reduce using rule 83 (valor -> TRUE .)
    MAYORIGUAL      reduce using rule 83 (valor -> TRUE .)
    MENORIGUAL      reduce using rule 83 (valor -> TRUE .)
    AND             reduce using rule 83 (valor -> TRUE .)
    INTERROGACION   reduce using rule 83 (valor -> TRUE .)
    OR              reduce using rule 83 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 83 (valor -> TRUE .)
    PARDER          reduce using rule 83 (valor -> TRUE .)
    DOSPUNTOS       reduce using rule 83 (valor -> TRUE .)
    COMA            reduce using rule 83 (valor -> TRUE .)


state 59

    (84) valor -> FALSE .

    POR             reduce using rule 84 (valor -> FALSE .)
    DIVIDIDO        reduce using rule 84 (valor -> FALSE .)
    MODULO          reduce using rule 84 (valor -> FALSE .)
    EQUIVALENTE     reduce using rule 84 (valor -> FALSE .)
    DISTINTO        reduce using rule 84 (valor -> FALSE .)
    MAS             reduce using rule 84 (valor -> FALSE .)
    MENOS           reduce using rule 84 (valor -> FALSE .)
    MAYOR           reduce using rule 84 (valor -> FALSE .)
    MENOR           reduce using rule 84 (valor -> FALSE .)
    MAYORIGUAL      reduce using rule 84 (valor -> FALSE .)
    MENORIGUAL      reduce using rule 84 (valor -> FALSE .)
    AND             reduce using rule 84 (valor -> FALSE .)
    INTERROGACION   reduce using rule 84 (valor -> FALSE .)
    OR              reduce using rule 84 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 84 (valor -> FALSE .)
    PARDER          reduce using rule 84 (valor -> FALSE .)
    DOSPUNTOS       reduce using rule 84 (valor -> FALSE .)
    COMA            reduce using rule 84 (valor -> FALSE .)


state 60

    (85) valor -> NULL .

    POR             reduce using rule 85 (valor -> NULL .)
    DIVIDIDO        reduce using rule 85 (valor -> NULL .)
    MODULO          reduce using rule 85 (valor -> NULL .)
    EQUIVALENTE     reduce using rule 85 (valor -> NULL .)
    DISTINTO        reduce using rule 85 (valor -> NULL .)
    MAS             reduce using rule 85 (valor -> NULL .)
    MENOS           reduce using rule 85 (valor -> NULL .)
    MAYOR           reduce using rule 85 (valor -> NULL .)
    MENOR           reduce using rule 85 (valor -> NULL .)
    MAYORIGUAL      reduce using rule 85 (valor -> NULL .)
    MENORIGUAL      reduce using rule 85 (valor -> NULL .)
    AND             reduce using rule 85 (valor -> NULL .)
    INTERROGACION   reduce using rule 85 (valor -> NULL .)
    OR              reduce using rule 85 (valor -> NULL .)
    PUNTOCOMA       reduce using rule 85 (valor -> NULL .)
    PARDER          reduce using rule 85 (valor -> NULL .)
    DOSPUNTOS       reduce using rule 85 (valor -> NULL .)
    COMA            reduce using rule 85 (valor -> NULL .)


state 61

    (86) valor -> ID .

    POR             reduce using rule 86 (valor -> ID .)
    DIVIDIDO        reduce using rule 86 (valor -> ID .)
    MODULO          reduce using rule 86 (valor -> ID .)
    EQUIVALENTE     reduce using rule 86 (valor -> ID .)
    DISTINTO        reduce using rule 86 (valor -> ID .)
    MAS             reduce using rule 86 (valor -> ID .)
    MENOS           reduce using rule 86 (valor -> ID .)
    MAYOR           reduce using rule 86 (valor -> ID .)
    MENOR           reduce using rule 86 (valor -> ID .)
    MAYORIGUAL      reduce using rule 86 (valor -> ID .)
    MENORIGUAL      reduce using rule 86 (valor -> ID .)
    AND             reduce using rule 86 (valor -> ID .)
    INTERROGACION   reduce using rule 86 (valor -> ID .)
    OR              reduce using rule 86 (valor -> ID .)
    PUNTOCOMA       reduce using rule 86 (valor -> ID .)
    PARDER          reduce using rule 86 (valor -> ID .)
    DOSPUNTOS       reduce using rule 86 (valor -> ID .)
    COMA            reduce using rule 86 (valor -> ID .)


state 62

    (14) sSwitch -> SWITCH PARIZQ . op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 94
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 63

    (47) imprimir_instr -> CONSOLE PUNTO LOG . PARIZQ lista_exp PARDER PUNTOCOMA

    PARIZQ          shift and go to state 95


state 64

    (35) declaracion -> tipoVar ID DOSPUNTOS . tipo declaracion_explicita
    (42) tipo -> . NUMBER
    (43) tipo -> . FLOAT
    (44) tipo -> . STRING
    (45) tipo -> . BOOLEAN
    (46) tipo -> . CHAR

    NUMBER          shift and go to state 97
    FLOAT           shift and go to state 98
    STRING          shift and go to state 99
    BOOLEAN         shift and go to state 100
    CHAR            shift and go to state 101

    tipo                           shift and go to state 96

state 65

    (36) declaracion -> tipoVar ID declaracion_implicita .

    CONSOLE         reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    ID              reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    IF              reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    WHILE           reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    FOR             reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    CONTINUE        reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    BREAK           reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    RETURN          reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    SWITCH          reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    VAR             reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    CONST           reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    $end            reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    NOT             reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    PARIZQ          reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    MENOS           reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    ENTERO          reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    CADENA          reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    DECIMAL         reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    CARACTER        reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    TRUE            reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    FALSE           reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    NULL            reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    LLAVDER         reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    CASE            reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)
    DEFAULT         reduce using rule 36 (declaracion -> tipoVar ID declaracion_implicita .)


state 66

    (39) declaracion_implicita -> IGUAL . op_Ternario PUNTOCOMA
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 102
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 67

    (30) asignacion -> ID IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 30 (asignacion -> ID IGUAL op_Ternario .)
    PARDER          reduce using rule 30 (asignacion -> ID IGUAL op_Ternario .)


state 68

    (33) asignacion -> ID MAS MAS .

    PUNTOCOMA       reduce using rule 33 (asignacion -> ID MAS MAS .)
    PARDER          reduce using rule 33 (asignacion -> ID MAS MAS .)


state 69

    (31) asignacion -> ID MAS IGUAL . op_Ternario
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 103
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 70

    (34) asignacion -> ID MENOS MENOS .

    PUNTOCOMA       reduce using rule 34 (asignacion -> ID MENOS MENOS .)
    PARDER          reduce using rule 34 (asignacion -> ID MENOS MENOS .)


state 71

    (32) asignacion -> ID MENOS IGUAL . op_Ternario
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 104
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 72

    (25) sIf -> IF PARIZQ op_Ternario . PARDER LLAVIZQ instrucciones sIf2

    PARDER          shift and go to state 105


state 73

    (24) sWhile -> WHILE PARIZQ op_Ternario . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 106


state 74

    (23) sFor -> FOR PARIZQ declaracion . op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 107
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 75

    (22) sReturn -> RETURN op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    ID              reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    IF              reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    $end            reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 22 (sReturn -> RETURN op_Ternario PUNTOCOMA .)


state 76

    (50) op_Ternario -> exp_Or INTERROGACION . exp_Or DOSPUNTOS exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Or                         shift and go to state 108
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 77

    (52) exp_Or -> exp_Or OR . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_And                        shift and go to state 109
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 78

    (54) exp_And -> exp_And AND . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Not                        shift and go to state 110
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 79

    (56) exp_Not -> lNot exp_Comp .

    AND             reduce using rule 56 (exp_Not -> lNot exp_Comp .)
    INTERROGACION   reduce using rule 56 (exp_Not -> lNot exp_Comp .)
    OR              reduce using rule 56 (exp_Not -> lNot exp_Comp .)
    PUNTOCOMA       reduce using rule 56 (exp_Not -> lNot exp_Comp .)
    PARDER          reduce using rule 56 (exp_Not -> lNot exp_Comp .)
    DOSPUNTOS       reduce using rule 56 (exp_Not -> lNot exp_Comp .)
    COMA            reduce using rule 56 (exp_Not -> lNot exp_Comp .)


state 80

    (58) lNot -> lNot NOT .

    NOT             reduce using rule 58 (lNot -> lNot NOT .)
    PARIZQ          reduce using rule 58 (lNot -> lNot NOT .)
    MENOS           reduce using rule 58 (lNot -> lNot NOT .)
    ENTERO          reduce using rule 58 (lNot -> lNot NOT .)
    CADENA          reduce using rule 58 (lNot -> lNot NOT .)
    DECIMAL         reduce using rule 58 (lNot -> lNot NOT .)
    CARACTER        reduce using rule 58 (lNot -> lNot NOT .)
    TRUE            reduce using rule 58 (lNot -> lNot NOT .)
    FALSE           reduce using rule 58 (lNot -> lNot NOT .)
    NULL            reduce using rule 58 (lNot -> lNot NOT .)
    ID              reduce using rule 58 (lNot -> lNot NOT .)


state 81

    (60) exp_Comp -> exp_Sum_Menos EQUIVALENTE . exp_Sum_Menos
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Sum_Menos                  shift and go to state 111
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 82

    (61) exp_Comp -> exp_Sum_Menos DISTINTO . exp_Sum_Menos
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Sum_Menos                  shift and go to state 112
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 83

    (68) exp_Sum_Menos -> exp_Sum_Menos MAS . exp_Mul_Div
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Mul_Div                    shift and go to state 113
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 84

    (69) exp_Sum_Menos -> exp_Sum_Menos MENOS . exp_Mul_Div
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Mul_Div                    shift and go to state 114
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 85

    (63) exp_rel -> exp_Sum_Menos MAYOR . exp_Sum_Menos
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Sum_Menos                  shift and go to state 115
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 86

    (64) exp_rel -> exp_Sum_Menos MENOR . exp_Sum_Menos
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Sum_Menos                  shift and go to state 116
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 87

    (65) exp_rel -> exp_Sum_Menos MAYORIGUAL . exp_Sum_Menos
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Sum_Menos                  shift and go to state 117
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 88

    (66) exp_rel -> exp_Sum_Menos MENORIGUAL . exp_Sum_Menos
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Sum_Menos                  shift and go to state 118
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 89

    (71) exp_Mul_Div -> exp_Mul_Div POR . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Parentesis                 shift and go to state 119
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 90

    (72) exp_Mul_Div -> exp_Mul_Div DIVIDIDO . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Parentesis                 shift and go to state 120
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 91

    (73) exp_Mul_Div -> exp_Mul_Div MODULO . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Parentesis                 shift and go to state 121
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 92

    (77) exp_Negativo -> MENOS valor .

    POR             reduce using rule 77 (exp_Negativo -> MENOS valor .)
    DIVIDIDO        reduce using rule 77 (exp_Negativo -> MENOS valor .)
    MODULO          reduce using rule 77 (exp_Negativo -> MENOS valor .)
    EQUIVALENTE     reduce using rule 77 (exp_Negativo -> MENOS valor .)
    DISTINTO        reduce using rule 77 (exp_Negativo -> MENOS valor .)
    MAS             reduce using rule 77 (exp_Negativo -> MENOS valor .)
    MENOS           reduce using rule 77 (exp_Negativo -> MENOS valor .)
    MAYOR           reduce using rule 77 (exp_Negativo -> MENOS valor .)
    MENOR           reduce using rule 77 (exp_Negativo -> MENOS valor .)
    MAYORIGUAL      reduce using rule 77 (exp_Negativo -> MENOS valor .)
    MENORIGUAL      reduce using rule 77 (exp_Negativo -> MENOS valor .)
    AND             reduce using rule 77 (exp_Negativo -> MENOS valor .)
    INTERROGACION   reduce using rule 77 (exp_Negativo -> MENOS valor .)
    OR              reduce using rule 77 (exp_Negativo -> MENOS valor .)
    PUNTOCOMA       reduce using rule 77 (exp_Negativo -> MENOS valor .)
    PARDER          reduce using rule 77 (exp_Negativo -> MENOS valor .)
    DOSPUNTOS       reduce using rule 77 (exp_Negativo -> MENOS valor .)
    COMA            reduce using rule 77 (exp_Negativo -> MENOS valor .)


state 93

    (75) exp_Parentesis -> PARIZQ exp_Or . PARDER
    (52) exp_Or -> exp_Or . OR exp_And

    PARDER          shift and go to state 122
    OR              shift and go to state 77


state 94

    (14) sSwitch -> SWITCH PARIZQ op_Ternario . PARDER LLAVIZQ listCases LLAVDER

    PARDER          shift and go to state 123


state 95

    (47) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ . lista_exp PARDER PUNTOCOMA
    (48) lista_exp -> . lista_exp COMA op_Ternario
    (49) lista_exp -> . op_Ternario
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    lista_exp                      shift and go to state 124
    op_Ternario                    shift and go to state 125
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 96

    (35) declaracion -> tipoVar ID DOSPUNTOS tipo . declaracion_explicita
    (37) declaracion_explicita -> . PUNTOCOMA
    (38) declaracion_explicita -> . IGUAL op_Ternario PUNTOCOMA

    PUNTOCOMA       shift and go to state 127
    IGUAL           shift and go to state 128

    declaracion_explicita          shift and go to state 126

state 97

    (42) tipo -> NUMBER .

    PUNTOCOMA       reduce using rule 42 (tipo -> NUMBER .)
    IGUAL           reduce using rule 42 (tipo -> NUMBER .)


state 98

    (43) tipo -> FLOAT .

    PUNTOCOMA       reduce using rule 43 (tipo -> FLOAT .)
    IGUAL           reduce using rule 43 (tipo -> FLOAT .)


state 99

    (44) tipo -> STRING .

    PUNTOCOMA       reduce using rule 44 (tipo -> STRING .)
    IGUAL           reduce using rule 44 (tipo -> STRING .)


state 100

    (45) tipo -> BOOLEAN .

    PUNTOCOMA       reduce using rule 45 (tipo -> BOOLEAN .)
    IGUAL           reduce using rule 45 (tipo -> BOOLEAN .)


state 101

    (46) tipo -> CHAR .

    PUNTOCOMA       reduce using rule 46 (tipo -> CHAR .)
    IGUAL           reduce using rule 46 (tipo -> CHAR .)


state 102

    (39) declaracion_implicita -> IGUAL op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 129


state 103

    (31) asignacion -> ID MAS IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 31 (asignacion -> ID MAS IGUAL op_Ternario .)
    PARDER          reduce using rule 31 (asignacion -> ID MAS IGUAL op_Ternario .)


state 104

    (32) asignacion -> ID MENOS IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 32 (asignacion -> ID MENOS IGUAL op_Ternario .)
    PARDER          reduce using rule 32 (asignacion -> ID MENOS IGUAL op_Ternario .)


state 105

    (25) sIf -> IF PARIZQ op_Ternario PARDER . LLAVIZQ instrucciones sIf2

    LLAVIZQ         shift and go to state 130


state 106

    (24) sWhile -> WHILE PARIZQ op_Ternario PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 131


state 107

    (23) sFor -> FOR PARIZQ declaracion op_Ternario . PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER

    PUNTOCOMA       shift and go to state 132


state 108

    (50) op_Ternario -> exp_Or INTERROGACION exp_Or . DOSPUNTOS exp_Or
    (52) exp_Or -> exp_Or . OR exp_And

    DOSPUNTOS       shift and go to state 133
    OR              shift and go to state 77


state 109

    (52) exp_Or -> exp_Or OR exp_And .
    (54) exp_And -> exp_And . AND exp_Not

    INTERROGACION   reduce using rule 52 (exp_Or -> exp_Or OR exp_And .)
    OR              reduce using rule 52 (exp_Or -> exp_Or OR exp_And .)
    PUNTOCOMA       reduce using rule 52 (exp_Or -> exp_Or OR exp_And .)
    PARDER          reduce using rule 52 (exp_Or -> exp_Or OR exp_And .)
    DOSPUNTOS       reduce using rule 52 (exp_Or -> exp_Or OR exp_And .)
    COMA            reduce using rule 52 (exp_Or -> exp_Or OR exp_And .)
    AND             shift and go to state 78


state 110

    (54) exp_And -> exp_And AND exp_Not .

    AND             reduce using rule 54 (exp_And -> exp_And AND exp_Not .)
    INTERROGACION   reduce using rule 54 (exp_And -> exp_And AND exp_Not .)
    OR              reduce using rule 54 (exp_And -> exp_And AND exp_Not .)
    PUNTOCOMA       reduce using rule 54 (exp_And -> exp_And AND exp_Not .)
    PARDER          reduce using rule 54 (exp_And -> exp_And AND exp_Not .)
    DOSPUNTOS       reduce using rule 54 (exp_And -> exp_And AND exp_Not .)
    COMA            reduce using rule 54 (exp_And -> exp_And AND exp_Not .)


state 111

    (60) exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .
    (68) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (69) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 60 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    INTERROGACION   reduce using rule 60 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    OR              reduce using rule 60 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 60 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    PARDER          reduce using rule 60 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 60 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    COMA            reduce using rule 60 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    MAS             shift and go to state 83
    MENOS           shift and go to state 84


state 112

    (61) exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .
    (68) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (69) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 61 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    INTERROGACION   reduce using rule 61 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    OR              reduce using rule 61 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 61 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    PARDER          reduce using rule 61 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 61 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    COMA            reduce using rule 61 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    MAS             shift and go to state 83
    MENOS           shift and go to state 84


state 113

    (68) exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .
    (71) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (72) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    DISTINTO        reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAS             reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENOS           reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAYOR           reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENOR           reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENORIGUAL      reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    AND             reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    INTERROGACION   reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    OR              reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    PARDER          reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    COMA            reduce using rule 68 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    POR             shift and go to state 89
    DIVIDIDO        shift and go to state 90
    MODULO          shift and go to state 91


state 114

    (69) exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .
    (71) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (72) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    DISTINTO        reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAS             reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENOS           reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAYOR           reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENOR           reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENORIGUAL      reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    AND             reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    INTERROGACION   reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    OR              reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    PARDER          reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    COMA            reduce using rule 69 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    POR             shift and go to state 89
    DIVIDIDO        shift and go to state 90
    MODULO          shift and go to state 91


state 115

    (63) exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .
    (68) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (69) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 63 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    INTERROGACION   reduce using rule 63 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    OR              reduce using rule 63 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 63 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    PARDER          reduce using rule 63 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 63 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    COMA            reduce using rule 63 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    MAS             shift and go to state 83
    MENOS           shift and go to state 84


state 116

    (64) exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .
    (68) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (69) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 64 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    INTERROGACION   reduce using rule 64 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    OR              reduce using rule 64 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 64 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    PARDER          reduce using rule 64 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 64 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    COMA            reduce using rule 64 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    MAS             shift and go to state 83
    MENOS           shift and go to state 84


state 117

    (65) exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .
    (68) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (69) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 65 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    INTERROGACION   reduce using rule 65 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    OR              reduce using rule 65 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 65 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    PARDER          reduce using rule 65 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 65 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    COMA            reduce using rule 65 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    MAS             shift and go to state 83
    MENOS           shift and go to state 84


state 118

    (66) exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .
    (68) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (69) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 66 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    INTERROGACION   reduce using rule 66 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    OR              reduce using rule 66 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 66 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    PARDER          reduce using rule 66 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 66 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    COMA            reduce using rule 66 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    MAS             shift and go to state 83
    MENOS           shift and go to state 84


state 119

    (71) exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .

    POR             reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DIVIDIDO        reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MODULO          reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    EQUIVALENTE     reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DISTINTO        reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAS             reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENOS           reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAYOR           reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENOR           reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAYORIGUAL      reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENORIGUAL      reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    AND             reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    INTERROGACION   reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    OR              reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    PUNTOCOMA       reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    PARDER          reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DOSPUNTOS       reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    COMA            reduce using rule 71 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)


state 120

    (72) exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .

    POR             reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DIVIDIDO        reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MODULO          reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    EQUIVALENTE     reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DISTINTO        reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAS             reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENOS           reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAYOR           reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENOR           reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAYORIGUAL      reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENORIGUAL      reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    AND             reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    INTERROGACION   reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    OR              reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    PUNTOCOMA       reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    PARDER          reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DOSPUNTOS       reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    COMA            reduce using rule 72 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)


state 121

    (73) exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .

    POR             reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DIVIDIDO        reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MODULO          reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    EQUIVALENTE     reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DISTINTO        reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAS             reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENOS           reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAYOR           reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENOR           reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAYORIGUAL      reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENORIGUAL      reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    AND             reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    INTERROGACION   reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    OR              reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    PUNTOCOMA       reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    PARDER          reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DOSPUNTOS       reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    COMA            reduce using rule 73 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)


state 122

    (75) exp_Parentesis -> PARIZQ exp_Or PARDER .

    POR             reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DIVIDIDO        reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MODULO          reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    EQUIVALENTE     reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DISTINTO        reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAS             reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENOS           reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAYOR           reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENOR           reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAYORIGUAL      reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENORIGUAL      reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    AND             reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    INTERROGACION   reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    OR              reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    PUNTOCOMA       reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    PARDER          reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DOSPUNTOS       reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    COMA            reduce using rule 75 (exp_Parentesis -> PARIZQ exp_Or PARDER .)


state 123

    (14) sSwitch -> SWITCH PARIZQ op_Ternario PARDER . LLAVIZQ listCases LLAVDER

    LLAVIZQ         shift and go to state 134


state 124

    (47) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp . PARDER PUNTOCOMA
    (48) lista_exp -> lista_exp . COMA op_Ternario

    PARDER          shift and go to state 135
    COMA            shift and go to state 136


state 125

    (49) lista_exp -> op_Ternario .

    PARDER          reduce using rule 49 (lista_exp -> op_Ternario .)
    COMA            reduce using rule 49 (lista_exp -> op_Ternario .)


state 126

    (35) declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .

    CONSOLE         reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    ID              reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    IF              reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    WHILE           reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FOR             reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CONTINUE        reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    BREAK           reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    RETURN          reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    SWITCH          reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    VAR             reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CONST           reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    $end            reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    NOT             reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    PARIZQ          reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    MENOS           reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    ENTERO          reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CADENA          reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    DECIMAL         reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CARACTER        reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    TRUE            reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FALSE           reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    NULL            reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    LLAVDER         reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CASE            reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    DEFAULT         reduce using rule 35 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)


state 127

    (37) declaracion_explicita -> PUNTOCOMA .

    CONSOLE         reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    ID              reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    IF              reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    WHILE           reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    FOR             reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    CONTINUE        reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    BREAK           reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    RETURN          reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    SWITCH          reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    VAR             reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    CONST           reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    $end            reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    NOT             reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    PARIZQ          reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    MENOS           reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    ENTERO          reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    CADENA          reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    DECIMAL         reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    CARACTER        reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    TRUE            reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    FALSE           reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    NULL            reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    LLAVDER         reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    CASE            reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)
    DEFAULT         reduce using rule 37 (declaracion_explicita -> PUNTOCOMA .)


state 128

    (38) declaracion_explicita -> IGUAL . op_Ternario PUNTOCOMA
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 137
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 129

    (39) declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    ID              reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    IF              reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    $end            reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    NOT             reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    PARIZQ          reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    MENOS           reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    ENTERO          reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CADENA          reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    DECIMAL         reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CARACTER        reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    TRUE            reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FALSE           reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    NULL            reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 39 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)


state 130

    (25) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ . instrucciones sIf2
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instrucciones                  shift and go to state 138
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 131

    (24) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instrucciones                  shift and go to state 139
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 132

    (23) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA . asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS

    ID              shift and go to state 16

    asignacion                     shift and go to state 140

state 133

    (50) op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    exp_Or                         shift and go to state 141
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 134

    (14) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ . listCases LLAVDER
    (15) listCases -> . listCases CASE op_Ternario DOSPUNTOS instrucciones
    (16) listCases -> . listCases DEFAULT DOSPUNTOS instrucciones
    (17) listCases -> . CASE op_Ternario DOSPUNTOS instrucciones
    (18) listCases -> . DEFAULT DOSPUNTOS instrucciones

    CASE            shift and go to state 143
    DEFAULT         shift and go to state 144

    listCases                      shift and go to state 142

state 135

    (47) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 145


state 136

    (48) lista_exp -> lista_exp COMA . op_Ternario
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 146
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 137

    (38) declaracion_explicita -> IGUAL op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 147


state 138

    (25) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones . sIf2
    (2) instrucciones -> instrucciones . instruccion
    (26) sIf2 -> . LLAVDER ELSE sElse
    (27) sIf2 -> . LLAVDER
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    LLAVDER         shift and go to state 149
    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    sIf2                           shift and go to state 148
    instruccion                    shift and go to state 26
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 139

    (24) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    LLAVDER         shift and go to state 150
    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instruccion                    shift and go to state 26
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 140

    (23) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 151


state 141

    (50) op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .
    (52) exp_Or -> exp_Or . OR exp_And

    PUNTOCOMA       reduce using rule 50 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    PARDER          reduce using rule 50 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    COMA            reduce using rule 50 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    DOSPUNTOS       reduce using rule 50 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    OR              shift and go to state 77


state 142

    (14) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases . LLAVDER
    (15) listCases -> listCases . CASE op_Ternario DOSPUNTOS instrucciones
    (16) listCases -> listCases . DEFAULT DOSPUNTOS instrucciones

    LLAVDER         shift and go to state 152
    CASE            shift and go to state 153
    DEFAULT         shift and go to state 154


state 143

    (17) listCases -> CASE . op_Ternario DOSPUNTOS instrucciones
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 155
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 144

    (18) listCases -> DEFAULT . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 156


state 145

    (47) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .

    CONSOLE         reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    ID              reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    IF              reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    WHILE           reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    FOR             reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CONTINUE        reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    BREAK           reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    RETURN          reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    SWITCH          reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    VAR             reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CONST           reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    $end            reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    LLAVDER         reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CASE            reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    DEFAULT         reduce using rule 47 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)


state 146

    (48) lista_exp -> lista_exp COMA op_Ternario .

    PARDER          reduce using rule 48 (lista_exp -> lista_exp COMA op_Ternario .)
    COMA            reduce using rule 48 (lista_exp -> lista_exp COMA op_Ternario .)


state 147

    (38) declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    ID              reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    IF              reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    $end            reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    NOT             reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    PARIZQ          reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    MENOS           reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    ENTERO          reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CADENA          reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    DECIMAL         reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CARACTER        reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    TRUE            reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FALSE           reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    NULL            reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 38 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)


state 148

    (25) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .

    CONSOLE         reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    ID              reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    IF              reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    WHILE           reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    FOR             reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CONTINUE        reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    BREAK           reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    RETURN          reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    SWITCH          reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    VAR             reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CONST           reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    $end            reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    LLAVDER         reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CASE            reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    DEFAULT         reduce using rule 25 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)


state 149

    (26) sIf2 -> LLAVDER . ELSE sElse
    (27) sIf2 -> LLAVDER .

    ELSE            shift and go to state 157
    CONSOLE         reduce using rule 27 (sIf2 -> LLAVDER .)
    ID              reduce using rule 27 (sIf2 -> LLAVDER .)
    IF              reduce using rule 27 (sIf2 -> LLAVDER .)
    WHILE           reduce using rule 27 (sIf2 -> LLAVDER .)
    FOR             reduce using rule 27 (sIf2 -> LLAVDER .)
    CONTINUE        reduce using rule 27 (sIf2 -> LLAVDER .)
    BREAK           reduce using rule 27 (sIf2 -> LLAVDER .)
    RETURN          reduce using rule 27 (sIf2 -> LLAVDER .)
    SWITCH          reduce using rule 27 (sIf2 -> LLAVDER .)
    VAR             reduce using rule 27 (sIf2 -> LLAVDER .)
    CONST           reduce using rule 27 (sIf2 -> LLAVDER .)
    $end            reduce using rule 27 (sIf2 -> LLAVDER .)
    LLAVDER         reduce using rule 27 (sIf2 -> LLAVDER .)
    CASE            reduce using rule 27 (sIf2 -> LLAVDER .)
    DEFAULT         reduce using rule 27 (sIf2 -> LLAVDER .)


state 150

    (24) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 24 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)


state 151

    (23) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 158


state 152

    (14) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .

    CONSOLE         reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    ID              reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    IF              reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    WHILE           reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    FOR             reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CONTINUE        reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    BREAK           reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    RETURN          reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    SWITCH          reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    VAR             reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CONST           reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    $end            reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    LLAVDER         reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CASE            reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    DEFAULT         reduce using rule 14 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)


state 153

    (15) listCases -> listCases CASE . op_Ternario DOSPUNTOS instrucciones
    (50) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (51) op_Ternario -> . exp_Or
    (52) exp_Or -> . exp_Or OR exp_And
    (53) exp_Or -> . exp_And
    (54) exp_And -> . exp_And AND exp_Not
    (55) exp_And -> . exp_Not
    (56) exp_Not -> . lNot exp_Comp
    (57) exp_Not -> . exp_Comp
    (58) lNot -> . lNot NOT
    (59) lNot -> . NOT
    (60) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (61) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (62) exp_Comp -> . exp_rel
    (68) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (69) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (70) exp_Sum_Menos -> . exp_Mul_Div
    (63) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (64) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (65) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (66) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (67) exp_rel -> . exp_Sum_Menos
    (71) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (72) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (73) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (74) exp_Mul_Div -> . exp_Parentesis
    (75) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (76) exp_Parentesis -> . exp_Negativo
    (77) exp_Negativo -> . MENOS valor
    (78) exp_Negativo -> . valor
    (79) valor -> . ENTERO
    (80) valor -> . CADENA
    (81) valor -> . DECIMAL
    (82) valor -> . CARACTER
    (83) valor -> . TRUE
    (84) valor -> . FALSE
    (85) valor -> . NULL
    (86) valor -> . ID

    NOT             shift and go to state 45
    PARIZQ          shift and go to state 51
    MENOS           shift and go to state 49
    ENTERO          shift and go to state 54
    CADENA          shift and go to state 55
    DECIMAL         shift and go to state 56
    CARACTER        shift and go to state 57
    TRUE            shift and go to state 58
    FALSE           shift and go to state 59
    NULL            shift and go to state 60
    ID              shift and go to state 61

    op_Ternario                    shift and go to state 159
    exp_Or                         shift and go to state 40
    exp_And                        shift and go to state 41
    exp_Not                        shift and go to state 42
    lNot                           shift and go to state 43
    exp_Comp                       shift and go to state 44
    exp_Sum_Menos                  shift and go to state 46
    exp_rel                        shift and go to state 47
    exp_Mul_Div                    shift and go to state 48
    exp_Parentesis                 shift and go to state 50
    exp_Negativo                   shift and go to state 52
    valor                          shift and go to state 53

state 154

    (16) listCases -> listCases DEFAULT . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 160


state 155

    (17) listCases -> CASE op_Ternario . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 161


state 156

    (18) listCases -> DEFAULT DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instrucciones                  shift and go to state 162
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 157

    (26) sIf2 -> LLAVDER ELSE . sElse
    (28) sElse -> . LLAVIZQ instrucciones LLAVDER
    (29) sElse -> . sIf
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2

    LLAVIZQ         shift and go to state 164
    IF              shift and go to state 17

    sElse                          shift and go to state 163
    sIf                            shift and go to state 165

state 158

    (23) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    instrucciones                  shift and go to state 166
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 159

    (15) listCases -> listCases CASE op_Ternario . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 167


state 160

    (16) listCases -> listCases DEFAULT DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instrucciones                  shift and go to state 168
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 161

    (17) listCases -> CASE op_Ternario DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instrucciones                  shift and go to state 169
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 162

    (18) listCases -> DEFAULT DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    LLAVDER         reduce using rule 18 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    CASE            reduce using rule 18 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 18 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instruccion                    shift and go to state 26
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 163

    (26) sIf2 -> LLAVDER ELSE sElse .

    CONSOLE         reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    ID              reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    IF              reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    WHILE           reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    FOR             reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    CONTINUE        reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    BREAK           reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    RETURN          reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    SWITCH          reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    VAR             reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    CONST           reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    $end            reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    LLAVDER         reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    CASE            reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)
    DEFAULT         reduce using rule 26 (sIf2 -> LLAVDER ELSE sElse .)


state 164

    (28) sElse -> LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instrucciones                  shift and go to state 170
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 165

    (29) sElse -> sIf .

    CONSOLE         reduce using rule 29 (sElse -> sIf .)
    ID              reduce using rule 29 (sElse -> sIf .)
    IF              reduce using rule 29 (sElse -> sIf .)
    WHILE           reduce using rule 29 (sElse -> sIf .)
    FOR             reduce using rule 29 (sElse -> sIf .)
    CONTINUE        reduce using rule 29 (sElse -> sIf .)
    BREAK           reduce using rule 29 (sElse -> sIf .)
    RETURN          reduce using rule 29 (sElse -> sIf .)
    SWITCH          reduce using rule 29 (sElse -> sIf .)
    VAR             reduce using rule 29 (sElse -> sIf .)
    CONST           reduce using rule 29 (sElse -> sIf .)
    $end            reduce using rule 29 (sElse -> sIf .)
    LLAVDER         reduce using rule 29 (sElse -> sIf .)
    CASE            reduce using rule 29 (sElse -> sIf .)
    DEFAULT         reduce using rule 29 (sElse -> sIf .)


state 166

    (23) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    LLAVDER         shift and go to state 171
    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    instruccion                    shift and go to state 26
    imprimir_instr                 shift and go to state 4
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 167

    (15) listCases -> listCases CASE op_Ternario DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instrucciones                  shift and go to state 172
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 168

    (16) listCases -> listCases DEFAULT DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    LLAVDER         reduce using rule 16 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    CASE            reduce using rule 16 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 16 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instruccion                    shift and go to state 26
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 169

    (17) listCases -> CASE op_Ternario DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    LLAVDER         reduce using rule 17 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    CASE            reduce using rule 17 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 17 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instruccion                    shift and go to state 26
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 170

    (28) sElse -> LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    LLAVDER         shift and go to state 173
    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instruccion                    shift and go to state 26
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 171

    (23) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 23 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)


state 172

    (15) listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (47) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (35) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (36) declaracion -> . tipoVar ID declaracion_implicita
    (30) asignacion -> . ID IGUAL op_Ternario
    (31) asignacion -> . ID MAS IGUAL op_Ternario
    (32) asignacion -> . ID MENOS IGUAL op_Ternario
    (33) asignacion -> . ID MAS MAS
    (34) asignacion -> . ID MENOS MENOS
    (25) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (24) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (23) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (19) sContinue -> . CONTINUE PUNTOCOMA
    (20) sBreak -> . BREAK PUNTOCOMA
    (21) sReturn -> . RETURN PUNTOCOMA
    (22) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (14) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (40) tipoVar -> . VAR
    (41) tipoVar -> . CONST

    LLAVDER         reduce using rule 15 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    CASE            reduce using rule 15 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 15 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 14
    ID              shift and go to state 16
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    CONTINUE        shift and go to state 20
    BREAK           shift and go to state 21
    RETURN          shift and go to state 22
    SWITCH          shift and go to state 23
    VAR             shift and go to state 24
    CONST           shift and go to state 25

    instruccion                    shift and go to state 26
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    tipoVar                        shift and go to state 15

state 173

    (28) sElse -> LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 28 (sElse -> LLAVIZQ instrucciones LLAVDER .)

