Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENTBLOCK
    INTERFACE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> imprimir_instr
Rule 5     instruccion -> declaracion
Rule 6     instruccion -> asignacion PUNTOCOMA
Rule 7     instruccion -> sIf
Rule 8     instruccion -> sWhile
Rule 9     instruccion -> sFor
Rule 10    instruccion -> sContinue
Rule 11    instruccion -> sBreak
Rule 12    instruccion -> sReturn
Rule 13    instruccion -> sSwitch
Rule 14    instruccion -> declaracion_Funcion
Rule 15    instruccion -> callFuncion PUNTOCOMA
Rule 16    callFuncion -> ID PARIZQ venir_Expresiones
Rule 17    venir_Expresiones -> lista_Expresiones PARDER
Rule 18    venir_Expresiones -> PARDER
Rule 19    lista_Expresiones -> lista_Expresiones COMA op_Ternario
Rule 20    lista_Expresiones -> op_Ternario
Rule 21    declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
Rule 22    parametros -> PARDER
Rule 23    parametros -> lista_Parametros PARDER
Rule 24    lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo
Rule 25    lista_Parametros -> ID DOSPUNTOS tipo
Rule 26    tipoFuncion -> DOSPUNTOS tipo LLAVIZQ
Rule 27    tipoFuncion -> LLAVIZQ
Rule 28    sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
Rule 29    listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones
Rule 30    listCases -> listCases DEFAULT DOSPUNTOS instrucciones
Rule 31    listCases -> CASE op_Ternario DOSPUNTOS instrucciones
Rule 32    listCases -> DEFAULT DOSPUNTOS instrucciones
Rule 33    sContinue -> CONTINUE PUNTOCOMA
Rule 34    sBreak -> BREAK PUNTOCOMA
Rule 35    sReturn -> RETURN PUNTOCOMA
Rule 36    sReturn -> RETURN op_Ternario PUNTOCOMA
Rule 37    sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
Rule 38    sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
Rule 39    sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
Rule 40    sIf2 -> LLAVDER ELSE sElse
Rule 41    sIf2 -> LLAVDER
Rule 42    sElse -> LLAVIZQ instrucciones LLAVDER
Rule 43    sElse -> sIf
Rule 44    asignacion -> ID IGUAL op_Ternario
Rule 45    asignacion -> ID MAS IGUAL op_Ternario
Rule 46    asignacion -> ID MENOS IGUAL op_Ternario
Rule 47    asignacion -> ID MAS MAS
Rule 48    asignacion -> ID MENOS MENOS
Rule 49    declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita
Rule 50    declaracion -> tipoVar ID declaracion_implicita
Rule 51    declaracion_explicita -> PUNTOCOMA
Rule 52    declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA
Rule 53    declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA
Rule 54    tipoVar -> VAR
Rule 55    tipoVar -> CONST
Rule 56    tipo -> NUMBER
Rule 57    tipo -> FLOAT
Rule 58    tipo -> STRING
Rule 59    tipo -> BOOLEAN
Rule 60    tipo -> CHAR
Rule 61    imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
Rule 62    lista_exp -> lista_exp COMA op_Ternario
Rule 63    lista_exp -> op_Ternario
Rule 64    op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
Rule 65    op_Ternario -> exp_Or
Rule 66    exp_Or -> exp_Or OR exp_And
Rule 67    exp_Or -> exp_And
Rule 68    exp_And -> exp_And AND exp_Not
Rule 69    exp_And -> exp_Not
Rule 70    exp_Not -> lNot exp_Comp
Rule 71    exp_Not -> exp_Comp
Rule 72    lNot -> lNot NOT
Rule 73    lNot -> NOT
Rule 74    exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
Rule 75    exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos
Rule 76    exp_Comp -> exp_rel
Rule 77    exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos
Rule 78    exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos
Rule 79    exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
Rule 80    exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos
Rule 81    exp_rel -> exp_Sum_Menos
Rule 82    exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div
Rule 83    exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div
Rule 84    exp_Sum_Menos -> exp_Mul_Div
Rule 85    exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis
Rule 86    exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis
Rule 87    exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis
Rule 88    exp_Mul_Div -> exp_Parentesis
Rule 89    exp_Parentesis -> PARIZQ exp_Or PARDER
Rule 90    exp_Parentesis -> exp_Negativo
Rule 91    exp_Negativo -> MENOS valor
Rule 92    exp_Negativo -> valor
Rule 93    valor -> ENTERO
Rule 94    valor -> CADENA
Rule 95    valor -> DECIMAL
Rule 96    valor -> CARACTER
Rule 97    valor -> TRUE
Rule 98    valor -> FALSE
Rule 99    valor -> NULL
Rule 100   valor -> ID
Rule 101   valor -> callFuncion

Terminals, with rules where they appear

AND                  : 68
BOOLEAN              : 59
BREAK                : 34
CADENA               : 94
CARACTER             : 96
CASE                 : 29 31
CHAR                 : 60
COMA                 : 19 24 62
COMMENTBLOCK         : 
CONSOLE              : 61
CONST                : 55
CONTINUE             : 33
DECIMAL              : 95
DEFAULT              : 30 32
DISTINTO             : 75
DIVIDIDO             : 86
DOSPUNTOS            : 24 25 26 29 30 31 32 49 64
ELSE                 : 40
ENTERO               : 93
EQUIVALENTE          : 74
FALSE                : 98
FLOAT                : 57
FOR                  : 37
FUNCTION             : 21
ID                   : 16 21 24 25 44 45 46 47 48 49 50 100
IF                   : 39
IGUAL                : 44 45 46 52 53
INTERFACE            : 
INTERROGACION        : 64
LLAVDER              : 21 28 37 38 40 41 42
LLAVIZQ              : 26 27 28 37 38 39 42
LOG                  : 61
MAS                  : 45 47 47 82
MAYOR                : 77
MAYORIGUAL           : 79
MENOR                : 78
MENORIGUAL           : 80
MENOS                : 46 48 48 83 91
MODULO               : 87
NOT                  : 72 73
NULL                 : 99
NUMBER               : 56
OR                   : 66
PARDER               : 17 18 22 23 28 37 38 39 61 89
PARIZQ               : 16 21 28 37 38 39 61 89
POR                  : 85
PUNTO                : 61
PUNTOCOMA            : 6 15 33 34 35 36 37 51 52 53 61
RETURN               : 35 36
STRING               : 58
SWITCH               : 28
TRUE                 : 97
VAR                  : 54
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

asignacion           : 6 37
callFuncion          : 15 101
declaracion          : 5 37
declaracion_Funcion  : 14
declaracion_explicita : 49
declaracion_implicita : 50
exp_And              : 66 67 68
exp_Comp             : 70 71
exp_Mul_Div          : 82 83 84 85 86 87
exp_Negativo         : 90
exp_Not              : 68 69
exp_Or               : 64 64 64 65 66 89
exp_Parentesis       : 85 86 87 88
exp_Sum_Menos        : 74 74 75 75 77 77 78 78 79 79 80 80 81 82 83
exp_rel              : 76
imprimir_instr       : 4
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 21 29 30 31 32 37 38 39 42
lNot                 : 70 72
listCases            : 28 29 30
lista_Expresiones    : 17 19
lista_Parametros     : 23 24
lista_exp            : 61 62
op_Ternario          : 19 20 28 29 31 36 37 38 39 44 45 46 52 53 62 63
parametros           : 21
sBreak               : 11
sContinue            : 10
sElse                : 40
sFor                 : 9
sIf                  : 7 43
sIf2                 : 39
sReturn              : 12
sSwitch              : 13
sWhile               : 8
tipo                 : 24 25 26 49
tipoFuncion          : 21
tipoVar              : 49 50
valor                : 91 92
venir_Expresiones    : 16

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    $end            reduce using rule 1 (init -> instrucciones .)
    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instruccion                    shift and go to state 29
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 3

    (3) instrucciones -> instruccion .

    CONSOLE         reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    CONTINUE        reduce using rule 3 (instrucciones -> instruccion .)
    BREAK           reduce using rule 3 (instrucciones -> instruccion .)
    RETURN          reduce using rule 3 (instrucciones -> instruccion .)
    SWITCH          reduce using rule 3 (instrucciones -> instruccion .)
    FUNCTION        reduce using rule 3 (instrucciones -> instruccion .)
    VAR             reduce using rule 3 (instrucciones -> instruccion .)
    CONST           reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    LLAVDER         reduce using rule 3 (instrucciones -> instruccion .)
    CASE            reduce using rule 3 (instrucciones -> instruccion .)
    DEFAULT         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> imprimir_instr .

    CONSOLE         reduce using rule 4 (instruccion -> imprimir_instr .)
    ID              reduce using rule 4 (instruccion -> imprimir_instr .)
    IF              reduce using rule 4 (instruccion -> imprimir_instr .)
    WHILE           reduce using rule 4 (instruccion -> imprimir_instr .)
    FOR             reduce using rule 4 (instruccion -> imprimir_instr .)
    CONTINUE        reduce using rule 4 (instruccion -> imprimir_instr .)
    BREAK           reduce using rule 4 (instruccion -> imprimir_instr .)
    RETURN          reduce using rule 4 (instruccion -> imprimir_instr .)
    SWITCH          reduce using rule 4 (instruccion -> imprimir_instr .)
    FUNCTION        reduce using rule 4 (instruccion -> imprimir_instr .)
    VAR             reduce using rule 4 (instruccion -> imprimir_instr .)
    CONST           reduce using rule 4 (instruccion -> imprimir_instr .)
    $end            reduce using rule 4 (instruccion -> imprimir_instr .)
    LLAVDER         reduce using rule 4 (instruccion -> imprimir_instr .)
    CASE            reduce using rule 4 (instruccion -> imprimir_instr .)
    DEFAULT         reduce using rule 4 (instruccion -> imprimir_instr .)


state 5

    (5) instruccion -> declaracion .

    CONSOLE         reduce using rule 5 (instruccion -> declaracion .)
    ID              reduce using rule 5 (instruccion -> declaracion .)
    IF              reduce using rule 5 (instruccion -> declaracion .)
    WHILE           reduce using rule 5 (instruccion -> declaracion .)
    FOR             reduce using rule 5 (instruccion -> declaracion .)
    CONTINUE        reduce using rule 5 (instruccion -> declaracion .)
    BREAK           reduce using rule 5 (instruccion -> declaracion .)
    RETURN          reduce using rule 5 (instruccion -> declaracion .)
    SWITCH          reduce using rule 5 (instruccion -> declaracion .)
    FUNCTION        reduce using rule 5 (instruccion -> declaracion .)
    VAR             reduce using rule 5 (instruccion -> declaracion .)
    CONST           reduce using rule 5 (instruccion -> declaracion .)
    $end            reduce using rule 5 (instruccion -> declaracion .)
    LLAVDER         reduce using rule 5 (instruccion -> declaracion .)
    CASE            reduce using rule 5 (instruccion -> declaracion .)
    DEFAULT         reduce using rule 5 (instruccion -> declaracion .)


state 6

    (6) instruccion -> asignacion . PUNTOCOMA

    PUNTOCOMA       shift and go to state 30


state 7

    (7) instruccion -> sIf .

    CONSOLE         reduce using rule 7 (instruccion -> sIf .)
    ID              reduce using rule 7 (instruccion -> sIf .)
    IF              reduce using rule 7 (instruccion -> sIf .)
    WHILE           reduce using rule 7 (instruccion -> sIf .)
    FOR             reduce using rule 7 (instruccion -> sIf .)
    CONTINUE        reduce using rule 7 (instruccion -> sIf .)
    BREAK           reduce using rule 7 (instruccion -> sIf .)
    RETURN          reduce using rule 7 (instruccion -> sIf .)
    SWITCH          reduce using rule 7 (instruccion -> sIf .)
    FUNCTION        reduce using rule 7 (instruccion -> sIf .)
    VAR             reduce using rule 7 (instruccion -> sIf .)
    CONST           reduce using rule 7 (instruccion -> sIf .)
    $end            reduce using rule 7 (instruccion -> sIf .)
    LLAVDER         reduce using rule 7 (instruccion -> sIf .)
    CASE            reduce using rule 7 (instruccion -> sIf .)
    DEFAULT         reduce using rule 7 (instruccion -> sIf .)


state 8

    (8) instruccion -> sWhile .

    CONSOLE         reduce using rule 8 (instruccion -> sWhile .)
    ID              reduce using rule 8 (instruccion -> sWhile .)
    IF              reduce using rule 8 (instruccion -> sWhile .)
    WHILE           reduce using rule 8 (instruccion -> sWhile .)
    FOR             reduce using rule 8 (instruccion -> sWhile .)
    CONTINUE        reduce using rule 8 (instruccion -> sWhile .)
    BREAK           reduce using rule 8 (instruccion -> sWhile .)
    RETURN          reduce using rule 8 (instruccion -> sWhile .)
    SWITCH          reduce using rule 8 (instruccion -> sWhile .)
    FUNCTION        reduce using rule 8 (instruccion -> sWhile .)
    VAR             reduce using rule 8 (instruccion -> sWhile .)
    CONST           reduce using rule 8 (instruccion -> sWhile .)
    $end            reduce using rule 8 (instruccion -> sWhile .)
    LLAVDER         reduce using rule 8 (instruccion -> sWhile .)
    CASE            reduce using rule 8 (instruccion -> sWhile .)
    DEFAULT         reduce using rule 8 (instruccion -> sWhile .)


state 9

    (9) instruccion -> sFor .

    CONSOLE         reduce using rule 9 (instruccion -> sFor .)
    ID              reduce using rule 9 (instruccion -> sFor .)
    IF              reduce using rule 9 (instruccion -> sFor .)
    WHILE           reduce using rule 9 (instruccion -> sFor .)
    FOR             reduce using rule 9 (instruccion -> sFor .)
    CONTINUE        reduce using rule 9 (instruccion -> sFor .)
    BREAK           reduce using rule 9 (instruccion -> sFor .)
    RETURN          reduce using rule 9 (instruccion -> sFor .)
    SWITCH          reduce using rule 9 (instruccion -> sFor .)
    FUNCTION        reduce using rule 9 (instruccion -> sFor .)
    VAR             reduce using rule 9 (instruccion -> sFor .)
    CONST           reduce using rule 9 (instruccion -> sFor .)
    $end            reduce using rule 9 (instruccion -> sFor .)
    LLAVDER         reduce using rule 9 (instruccion -> sFor .)
    CASE            reduce using rule 9 (instruccion -> sFor .)
    DEFAULT         reduce using rule 9 (instruccion -> sFor .)


state 10

    (10) instruccion -> sContinue .

    CONSOLE         reduce using rule 10 (instruccion -> sContinue .)
    ID              reduce using rule 10 (instruccion -> sContinue .)
    IF              reduce using rule 10 (instruccion -> sContinue .)
    WHILE           reduce using rule 10 (instruccion -> sContinue .)
    FOR             reduce using rule 10 (instruccion -> sContinue .)
    CONTINUE        reduce using rule 10 (instruccion -> sContinue .)
    BREAK           reduce using rule 10 (instruccion -> sContinue .)
    RETURN          reduce using rule 10 (instruccion -> sContinue .)
    SWITCH          reduce using rule 10 (instruccion -> sContinue .)
    FUNCTION        reduce using rule 10 (instruccion -> sContinue .)
    VAR             reduce using rule 10 (instruccion -> sContinue .)
    CONST           reduce using rule 10 (instruccion -> sContinue .)
    $end            reduce using rule 10 (instruccion -> sContinue .)
    LLAVDER         reduce using rule 10 (instruccion -> sContinue .)
    CASE            reduce using rule 10 (instruccion -> sContinue .)
    DEFAULT         reduce using rule 10 (instruccion -> sContinue .)


state 11

    (11) instruccion -> sBreak .

    CONSOLE         reduce using rule 11 (instruccion -> sBreak .)
    ID              reduce using rule 11 (instruccion -> sBreak .)
    IF              reduce using rule 11 (instruccion -> sBreak .)
    WHILE           reduce using rule 11 (instruccion -> sBreak .)
    FOR             reduce using rule 11 (instruccion -> sBreak .)
    CONTINUE        reduce using rule 11 (instruccion -> sBreak .)
    BREAK           reduce using rule 11 (instruccion -> sBreak .)
    RETURN          reduce using rule 11 (instruccion -> sBreak .)
    SWITCH          reduce using rule 11 (instruccion -> sBreak .)
    FUNCTION        reduce using rule 11 (instruccion -> sBreak .)
    VAR             reduce using rule 11 (instruccion -> sBreak .)
    CONST           reduce using rule 11 (instruccion -> sBreak .)
    $end            reduce using rule 11 (instruccion -> sBreak .)
    LLAVDER         reduce using rule 11 (instruccion -> sBreak .)
    CASE            reduce using rule 11 (instruccion -> sBreak .)
    DEFAULT         reduce using rule 11 (instruccion -> sBreak .)


state 12

    (12) instruccion -> sReturn .

    CONSOLE         reduce using rule 12 (instruccion -> sReturn .)
    ID              reduce using rule 12 (instruccion -> sReturn .)
    IF              reduce using rule 12 (instruccion -> sReturn .)
    WHILE           reduce using rule 12 (instruccion -> sReturn .)
    FOR             reduce using rule 12 (instruccion -> sReturn .)
    CONTINUE        reduce using rule 12 (instruccion -> sReturn .)
    BREAK           reduce using rule 12 (instruccion -> sReturn .)
    RETURN          reduce using rule 12 (instruccion -> sReturn .)
    SWITCH          reduce using rule 12 (instruccion -> sReturn .)
    FUNCTION        reduce using rule 12 (instruccion -> sReturn .)
    VAR             reduce using rule 12 (instruccion -> sReturn .)
    CONST           reduce using rule 12 (instruccion -> sReturn .)
    $end            reduce using rule 12 (instruccion -> sReturn .)
    LLAVDER         reduce using rule 12 (instruccion -> sReturn .)
    CASE            reduce using rule 12 (instruccion -> sReturn .)
    DEFAULT         reduce using rule 12 (instruccion -> sReturn .)


state 13

    (13) instruccion -> sSwitch .

    CONSOLE         reduce using rule 13 (instruccion -> sSwitch .)
    ID              reduce using rule 13 (instruccion -> sSwitch .)
    IF              reduce using rule 13 (instruccion -> sSwitch .)
    WHILE           reduce using rule 13 (instruccion -> sSwitch .)
    FOR             reduce using rule 13 (instruccion -> sSwitch .)
    CONTINUE        reduce using rule 13 (instruccion -> sSwitch .)
    BREAK           reduce using rule 13 (instruccion -> sSwitch .)
    RETURN          reduce using rule 13 (instruccion -> sSwitch .)
    SWITCH          reduce using rule 13 (instruccion -> sSwitch .)
    FUNCTION        reduce using rule 13 (instruccion -> sSwitch .)
    VAR             reduce using rule 13 (instruccion -> sSwitch .)
    CONST           reduce using rule 13 (instruccion -> sSwitch .)
    $end            reduce using rule 13 (instruccion -> sSwitch .)
    LLAVDER         reduce using rule 13 (instruccion -> sSwitch .)
    CASE            reduce using rule 13 (instruccion -> sSwitch .)
    DEFAULT         reduce using rule 13 (instruccion -> sSwitch .)


state 14

    (14) instruccion -> declaracion_Funcion .

    CONSOLE         reduce using rule 14 (instruccion -> declaracion_Funcion .)
    ID              reduce using rule 14 (instruccion -> declaracion_Funcion .)
    IF              reduce using rule 14 (instruccion -> declaracion_Funcion .)
    WHILE           reduce using rule 14 (instruccion -> declaracion_Funcion .)
    FOR             reduce using rule 14 (instruccion -> declaracion_Funcion .)
    CONTINUE        reduce using rule 14 (instruccion -> declaracion_Funcion .)
    BREAK           reduce using rule 14 (instruccion -> declaracion_Funcion .)
    RETURN          reduce using rule 14 (instruccion -> declaracion_Funcion .)
    SWITCH          reduce using rule 14 (instruccion -> declaracion_Funcion .)
    FUNCTION        reduce using rule 14 (instruccion -> declaracion_Funcion .)
    VAR             reduce using rule 14 (instruccion -> declaracion_Funcion .)
    CONST           reduce using rule 14 (instruccion -> declaracion_Funcion .)
    $end            reduce using rule 14 (instruccion -> declaracion_Funcion .)
    LLAVDER         reduce using rule 14 (instruccion -> declaracion_Funcion .)
    CASE            reduce using rule 14 (instruccion -> declaracion_Funcion .)
    DEFAULT         reduce using rule 14 (instruccion -> declaracion_Funcion .)


state 15

    (15) instruccion -> callFuncion . PUNTOCOMA

    PUNTOCOMA       shift and go to state 31


state 16

    (61) imprimir_instr -> CONSOLE . PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA

    PUNTO           shift and go to state 32


state 17

    (49) declaracion -> tipoVar . ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> tipoVar . ID declaracion_implicita

    ID              shift and go to state 33


state 18

    (44) asignacion -> ID . IGUAL op_Ternario
    (45) asignacion -> ID . MAS IGUAL op_Ternario
    (46) asignacion -> ID . MENOS IGUAL op_Ternario
    (47) asignacion -> ID . MAS MAS
    (48) asignacion -> ID . MENOS MENOS
    (16) callFuncion -> ID . PARIZQ venir_Expresiones

    IGUAL           shift and go to state 34
    MAS             shift and go to state 35
    MENOS           shift and go to state 36
    PARIZQ          shift and go to state 37


state 19

    (39) sIf -> IF . PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2

    PARIZQ          shift and go to state 38


state 20

    (38) sWhile -> WHILE . PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 39


state 21

    (37) sFor -> FOR . PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER

    PARIZQ          shift and go to state 40


state 22

    (33) sContinue -> CONTINUE . PUNTOCOMA

    PUNTOCOMA       shift and go to state 41


state 23

    (34) sBreak -> BREAK . PUNTOCOMA

    PUNTOCOMA       shift and go to state 42


state 24

    (35) sReturn -> RETURN . PUNTOCOMA
    (36) sReturn -> RETURN . op_Ternario PUNTOCOMA
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PUNTOCOMA       shift and go to state 43
    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 44
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 25

    (28) sSwitch -> SWITCH . PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER

    PARIZQ          shift and go to state 68


state 26

    (21) declaracion_Funcion -> FUNCTION . ID PARIZQ parametros tipoFuncion instrucciones LLAVDER

    ID              shift and go to state 69


state 27

    (54) tipoVar -> VAR .

    ID              reduce using rule 54 (tipoVar -> VAR .)


state 28

    (55) tipoVar -> CONST .

    ID              reduce using rule 55 (tipoVar -> CONST .)


state 29

    (2) instrucciones -> instrucciones instruccion .

    CONSOLE         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONTINUE        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    BREAK           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RETURN          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    SWITCH          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNCTION        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    VAR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CONST           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LLAVDER         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    CASE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    DEFAULT         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 30

    (6) instruccion -> asignacion PUNTOCOMA .

    CONSOLE         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    ID              reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    IF              reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    WHILE           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    FOR             reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CONTINUE        reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    BREAK           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    RETURN          reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    SWITCH          reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    FUNCTION        reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    VAR             reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CONST           reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    $end            reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    LLAVDER         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    CASE            reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)
    DEFAULT         reduce using rule 6 (instruccion -> asignacion PUNTOCOMA .)


state 31

    (15) instruccion -> callFuncion PUNTOCOMA .

    CONSOLE         reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    ID              reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    IF              reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    WHILE           reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    FOR             reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    CONTINUE        reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    BREAK           reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    RETURN          reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    SWITCH          reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    FUNCTION        reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    VAR             reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    CONST           reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    $end            reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    LLAVDER         reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    CASE            reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)
    DEFAULT         reduce using rule 15 (instruccion -> callFuncion PUNTOCOMA .)


state 32

    (61) imprimir_instr -> CONSOLE PUNTO . LOG PARIZQ lista_exp PARDER PUNTOCOMA

    LOG             shift and go to state 70


state 33

    (49) declaracion -> tipoVar ID . DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> tipoVar ID . declaracion_implicita
    (53) declaracion_implicita -> . IGUAL op_Ternario PUNTOCOMA

    DOSPUNTOS       shift and go to state 71
    IGUAL           shift and go to state 73

    declaracion_implicita          shift and go to state 72

state 34

    (44) asignacion -> ID IGUAL . op_Ternario
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 74
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 35

    (45) asignacion -> ID MAS . IGUAL op_Ternario
    (47) asignacion -> ID MAS . MAS

    IGUAL           shift and go to state 76
    MAS             shift and go to state 75


state 36

    (46) asignacion -> ID MENOS . IGUAL op_Ternario
    (48) asignacion -> ID MENOS . MENOS

    IGUAL           shift and go to state 78
    MENOS           shift and go to state 77


state 37

    (16) callFuncion -> ID PARIZQ . venir_Expresiones
    (17) venir_Expresiones -> . lista_Expresiones PARDER
    (18) venir_Expresiones -> . PARDER
    (19) lista_Expresiones -> . lista_Expresiones COMA op_Ternario
    (20) lista_Expresiones -> . op_Ternario
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARDER          shift and go to state 81
    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    venir_Expresiones              shift and go to state 79
    lista_Expresiones              shift and go to state 80
    op_Ternario                    shift and go to state 82
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 38

    (39) sIf -> IF PARIZQ . op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 83
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 39

    (38) sWhile -> WHILE PARIZQ . op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 84
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 40

    (37) sFor -> FOR PARIZQ . declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    VAR             shift and go to state 27
    CONST           shift and go to state 28

    declaracion                    shift and go to state 85
    tipoVar                        shift and go to state 17

state 41

    (33) sContinue -> CONTINUE PUNTOCOMA .

    CONSOLE         reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    ID              reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    IF              reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    WHILE           reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    FOR             reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    CONTINUE        reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    BREAK           reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    RETURN          reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    SWITCH          reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    FUNCTION        reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    VAR             reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    CONST           reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    $end            reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    LLAVDER         reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    CASE            reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)
    DEFAULT         reduce using rule 33 (sContinue -> CONTINUE PUNTOCOMA .)


state 42

    (34) sBreak -> BREAK PUNTOCOMA .

    CONSOLE         reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    ID              reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    IF              reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    WHILE           reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    FOR             reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    CONTINUE        reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    BREAK           reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    RETURN          reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    SWITCH          reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    FUNCTION        reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    VAR             reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    CONST           reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    $end            reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    LLAVDER         reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    CASE            reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)
    DEFAULT         reduce using rule 34 (sBreak -> BREAK PUNTOCOMA .)


state 43

    (35) sReturn -> RETURN PUNTOCOMA .

    CONSOLE         reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    ID              reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    IF              reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    WHILE           reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    FOR             reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    CONTINUE        reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    BREAK           reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    RETURN          reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    SWITCH          reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    FUNCTION        reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    VAR             reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    CONST           reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    $end            reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    LLAVDER         reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    CASE            reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)
    DEFAULT         reduce using rule 35 (sReturn -> RETURN PUNTOCOMA .)


state 44

    (36) sReturn -> RETURN op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 86


state 45

    (64) op_Ternario -> exp_Or . INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> exp_Or .
    (66) exp_Or -> exp_Or . OR exp_And

    INTERROGACION   shift and go to state 87
    PUNTOCOMA       reduce using rule 65 (op_Ternario -> exp_Or .)
    PARDER          reduce using rule 65 (op_Ternario -> exp_Or .)
    COMA            reduce using rule 65 (op_Ternario -> exp_Or .)
    DOSPUNTOS       reduce using rule 65 (op_Ternario -> exp_Or .)
    OR              shift and go to state 88


state 46

    (67) exp_Or -> exp_And .
    (68) exp_And -> exp_And . AND exp_Not

    INTERROGACION   reduce using rule 67 (exp_Or -> exp_And .)
    OR              reduce using rule 67 (exp_Or -> exp_And .)
    PUNTOCOMA       reduce using rule 67 (exp_Or -> exp_And .)
    PARDER          reduce using rule 67 (exp_Or -> exp_And .)
    COMA            reduce using rule 67 (exp_Or -> exp_And .)
    DOSPUNTOS       reduce using rule 67 (exp_Or -> exp_And .)
    AND             shift and go to state 89


state 47

    (69) exp_And -> exp_Not .

    AND             reduce using rule 69 (exp_And -> exp_Not .)
    INTERROGACION   reduce using rule 69 (exp_And -> exp_Not .)
    OR              reduce using rule 69 (exp_And -> exp_Not .)
    PUNTOCOMA       reduce using rule 69 (exp_And -> exp_Not .)
    PARDER          reduce using rule 69 (exp_And -> exp_Not .)
    COMA            reduce using rule 69 (exp_And -> exp_Not .)
    DOSPUNTOS       reduce using rule 69 (exp_And -> exp_Not .)


state 48

    (70) exp_Not -> lNot . exp_Comp
    (72) lNot -> lNot . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 91
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Comp                       shift and go to state 90
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 49

    (71) exp_Not -> exp_Comp .

    AND             reduce using rule 71 (exp_Not -> exp_Comp .)
    INTERROGACION   reduce using rule 71 (exp_Not -> exp_Comp .)
    OR              reduce using rule 71 (exp_Not -> exp_Comp .)
    PUNTOCOMA       reduce using rule 71 (exp_Not -> exp_Comp .)
    PARDER          reduce using rule 71 (exp_Not -> exp_Comp .)
    COMA            reduce using rule 71 (exp_Not -> exp_Comp .)
    DOSPUNTOS       reduce using rule 71 (exp_Not -> exp_Comp .)


state 50

    (73) lNot -> NOT .

    NOT             reduce using rule 73 (lNot -> NOT .)
    PARIZQ          reduce using rule 73 (lNot -> NOT .)
    MENOS           reduce using rule 73 (lNot -> NOT .)
    ENTERO          reduce using rule 73 (lNot -> NOT .)
    CADENA          reduce using rule 73 (lNot -> NOT .)
    DECIMAL         reduce using rule 73 (lNot -> NOT .)
    CARACTER        reduce using rule 73 (lNot -> NOT .)
    TRUE            reduce using rule 73 (lNot -> NOT .)
    FALSE           reduce using rule 73 (lNot -> NOT .)
    NULL            reduce using rule 73 (lNot -> NOT .)
    ID              reduce using rule 73 (lNot -> NOT .)


state 51

    (74) exp_Comp -> exp_Sum_Menos . EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> exp_Sum_Menos . DISTINTO exp_Sum_Menos
    (82) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (83) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div
    (77) exp_rel -> exp_Sum_Menos . MAYOR exp_Sum_Menos
    (78) exp_rel -> exp_Sum_Menos . MENOR exp_Sum_Menos
    (79) exp_rel -> exp_Sum_Menos . MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> exp_Sum_Menos . MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> exp_Sum_Menos .

    EQUIVALENTE     shift and go to state 92
    DISTINTO        shift and go to state 93
    MAS             shift and go to state 94
    MENOS           shift and go to state 95
    MAYOR           shift and go to state 96
    MENOR           shift and go to state 97
    MAYORIGUAL      shift and go to state 98
    MENORIGUAL      shift and go to state 99
    AND             reduce using rule 81 (exp_rel -> exp_Sum_Menos .)
    INTERROGACION   reduce using rule 81 (exp_rel -> exp_Sum_Menos .)
    OR              reduce using rule 81 (exp_rel -> exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 81 (exp_rel -> exp_Sum_Menos .)
    PARDER          reduce using rule 81 (exp_rel -> exp_Sum_Menos .)
    COMA            reduce using rule 81 (exp_rel -> exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 81 (exp_rel -> exp_Sum_Menos .)


state 52

    (76) exp_Comp -> exp_rel .

    AND             reduce using rule 76 (exp_Comp -> exp_rel .)
    INTERROGACION   reduce using rule 76 (exp_Comp -> exp_rel .)
    OR              reduce using rule 76 (exp_Comp -> exp_rel .)
    PUNTOCOMA       reduce using rule 76 (exp_Comp -> exp_rel .)
    PARDER          reduce using rule 76 (exp_Comp -> exp_rel .)
    COMA            reduce using rule 76 (exp_Comp -> exp_rel .)
    DOSPUNTOS       reduce using rule 76 (exp_Comp -> exp_rel .)


state 53

    (84) exp_Sum_Menos -> exp_Mul_Div .
    (85) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (86) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    DISTINTO        reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    MAS             reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    MENOS           reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    MAYOR           reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    MENOR           reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    MENORIGUAL      reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    AND             reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    INTERROGACION   reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    OR              reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    PARDER          reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    COMA            reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 84 (exp_Sum_Menos -> exp_Mul_Div .)
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    MODULO          shift and go to state 102


state 54

    (91) exp_Negativo -> MENOS . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    valor                          shift and go to state 103
    callFuncion                    shift and go to state 67

state 55

    (88) exp_Mul_Div -> exp_Parentesis .

    POR             reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    DIVIDIDO        reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    MODULO          reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    EQUIVALENTE     reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    DISTINTO        reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    MAS             reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    MENOS           reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    MAYOR           reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    MENOR           reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    MAYORIGUAL      reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    MENORIGUAL      reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    AND             reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    INTERROGACION   reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    OR              reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    PUNTOCOMA       reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    PARDER          reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    COMA            reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)
    DOSPUNTOS       reduce using rule 88 (exp_Mul_Div -> exp_Parentesis .)


state 56

    (89) exp_Parentesis -> PARIZQ . exp_Or PARDER
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Or                         shift and go to state 104
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 57

    (90) exp_Parentesis -> exp_Negativo .

    POR             reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    DIVIDIDO        reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    MODULO          reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    EQUIVALENTE     reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    DISTINTO        reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    MAS             reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    MENOS           reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    MAYOR           reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    MENOR           reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    MAYORIGUAL      reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    MENORIGUAL      reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    AND             reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    INTERROGACION   reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    OR              reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    PUNTOCOMA       reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    PARDER          reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    COMA            reduce using rule 90 (exp_Parentesis -> exp_Negativo .)
    DOSPUNTOS       reduce using rule 90 (exp_Parentesis -> exp_Negativo .)


state 58

    (92) exp_Negativo -> valor .

    POR             reduce using rule 92 (exp_Negativo -> valor .)
    DIVIDIDO        reduce using rule 92 (exp_Negativo -> valor .)
    MODULO          reduce using rule 92 (exp_Negativo -> valor .)
    EQUIVALENTE     reduce using rule 92 (exp_Negativo -> valor .)
    DISTINTO        reduce using rule 92 (exp_Negativo -> valor .)
    MAS             reduce using rule 92 (exp_Negativo -> valor .)
    MENOS           reduce using rule 92 (exp_Negativo -> valor .)
    MAYOR           reduce using rule 92 (exp_Negativo -> valor .)
    MENOR           reduce using rule 92 (exp_Negativo -> valor .)
    MAYORIGUAL      reduce using rule 92 (exp_Negativo -> valor .)
    MENORIGUAL      reduce using rule 92 (exp_Negativo -> valor .)
    AND             reduce using rule 92 (exp_Negativo -> valor .)
    INTERROGACION   reduce using rule 92 (exp_Negativo -> valor .)
    OR              reduce using rule 92 (exp_Negativo -> valor .)
    PUNTOCOMA       reduce using rule 92 (exp_Negativo -> valor .)
    PARDER          reduce using rule 92 (exp_Negativo -> valor .)
    COMA            reduce using rule 92 (exp_Negativo -> valor .)
    DOSPUNTOS       reduce using rule 92 (exp_Negativo -> valor .)


state 59

    (93) valor -> ENTERO .

    POR             reduce using rule 93 (valor -> ENTERO .)
    DIVIDIDO        reduce using rule 93 (valor -> ENTERO .)
    MODULO          reduce using rule 93 (valor -> ENTERO .)
    EQUIVALENTE     reduce using rule 93 (valor -> ENTERO .)
    DISTINTO        reduce using rule 93 (valor -> ENTERO .)
    MAS             reduce using rule 93 (valor -> ENTERO .)
    MENOS           reduce using rule 93 (valor -> ENTERO .)
    MAYOR           reduce using rule 93 (valor -> ENTERO .)
    MENOR           reduce using rule 93 (valor -> ENTERO .)
    MAYORIGUAL      reduce using rule 93 (valor -> ENTERO .)
    MENORIGUAL      reduce using rule 93 (valor -> ENTERO .)
    AND             reduce using rule 93 (valor -> ENTERO .)
    INTERROGACION   reduce using rule 93 (valor -> ENTERO .)
    OR              reduce using rule 93 (valor -> ENTERO .)
    PUNTOCOMA       reduce using rule 93 (valor -> ENTERO .)
    PARDER          reduce using rule 93 (valor -> ENTERO .)
    COMA            reduce using rule 93 (valor -> ENTERO .)
    DOSPUNTOS       reduce using rule 93 (valor -> ENTERO .)


state 60

    (94) valor -> CADENA .

    POR             reduce using rule 94 (valor -> CADENA .)
    DIVIDIDO        reduce using rule 94 (valor -> CADENA .)
    MODULO          reduce using rule 94 (valor -> CADENA .)
    EQUIVALENTE     reduce using rule 94 (valor -> CADENA .)
    DISTINTO        reduce using rule 94 (valor -> CADENA .)
    MAS             reduce using rule 94 (valor -> CADENA .)
    MENOS           reduce using rule 94 (valor -> CADENA .)
    MAYOR           reduce using rule 94 (valor -> CADENA .)
    MENOR           reduce using rule 94 (valor -> CADENA .)
    MAYORIGUAL      reduce using rule 94 (valor -> CADENA .)
    MENORIGUAL      reduce using rule 94 (valor -> CADENA .)
    AND             reduce using rule 94 (valor -> CADENA .)
    INTERROGACION   reduce using rule 94 (valor -> CADENA .)
    OR              reduce using rule 94 (valor -> CADENA .)
    PUNTOCOMA       reduce using rule 94 (valor -> CADENA .)
    PARDER          reduce using rule 94 (valor -> CADENA .)
    COMA            reduce using rule 94 (valor -> CADENA .)
    DOSPUNTOS       reduce using rule 94 (valor -> CADENA .)


state 61

    (95) valor -> DECIMAL .

    POR             reduce using rule 95 (valor -> DECIMAL .)
    DIVIDIDO        reduce using rule 95 (valor -> DECIMAL .)
    MODULO          reduce using rule 95 (valor -> DECIMAL .)
    EQUIVALENTE     reduce using rule 95 (valor -> DECIMAL .)
    DISTINTO        reduce using rule 95 (valor -> DECIMAL .)
    MAS             reduce using rule 95 (valor -> DECIMAL .)
    MENOS           reduce using rule 95 (valor -> DECIMAL .)
    MAYOR           reduce using rule 95 (valor -> DECIMAL .)
    MENOR           reduce using rule 95 (valor -> DECIMAL .)
    MAYORIGUAL      reduce using rule 95 (valor -> DECIMAL .)
    MENORIGUAL      reduce using rule 95 (valor -> DECIMAL .)
    AND             reduce using rule 95 (valor -> DECIMAL .)
    INTERROGACION   reduce using rule 95 (valor -> DECIMAL .)
    OR              reduce using rule 95 (valor -> DECIMAL .)
    PUNTOCOMA       reduce using rule 95 (valor -> DECIMAL .)
    PARDER          reduce using rule 95 (valor -> DECIMAL .)
    COMA            reduce using rule 95 (valor -> DECIMAL .)
    DOSPUNTOS       reduce using rule 95 (valor -> DECIMAL .)


state 62

    (96) valor -> CARACTER .

    POR             reduce using rule 96 (valor -> CARACTER .)
    DIVIDIDO        reduce using rule 96 (valor -> CARACTER .)
    MODULO          reduce using rule 96 (valor -> CARACTER .)
    EQUIVALENTE     reduce using rule 96 (valor -> CARACTER .)
    DISTINTO        reduce using rule 96 (valor -> CARACTER .)
    MAS             reduce using rule 96 (valor -> CARACTER .)
    MENOS           reduce using rule 96 (valor -> CARACTER .)
    MAYOR           reduce using rule 96 (valor -> CARACTER .)
    MENOR           reduce using rule 96 (valor -> CARACTER .)
    MAYORIGUAL      reduce using rule 96 (valor -> CARACTER .)
    MENORIGUAL      reduce using rule 96 (valor -> CARACTER .)
    AND             reduce using rule 96 (valor -> CARACTER .)
    INTERROGACION   reduce using rule 96 (valor -> CARACTER .)
    OR              reduce using rule 96 (valor -> CARACTER .)
    PUNTOCOMA       reduce using rule 96 (valor -> CARACTER .)
    PARDER          reduce using rule 96 (valor -> CARACTER .)
    COMA            reduce using rule 96 (valor -> CARACTER .)
    DOSPUNTOS       reduce using rule 96 (valor -> CARACTER .)


state 63

    (97) valor -> TRUE .

    POR             reduce using rule 97 (valor -> TRUE .)
    DIVIDIDO        reduce using rule 97 (valor -> TRUE .)
    MODULO          reduce using rule 97 (valor -> TRUE .)
    EQUIVALENTE     reduce using rule 97 (valor -> TRUE .)
    DISTINTO        reduce using rule 97 (valor -> TRUE .)
    MAS             reduce using rule 97 (valor -> TRUE .)
    MENOS           reduce using rule 97 (valor -> TRUE .)
    MAYOR           reduce using rule 97 (valor -> TRUE .)
    MENOR           reduce using rule 97 (valor -> TRUE .)
    MAYORIGUAL      reduce using rule 97 (valor -> TRUE .)
    MENORIGUAL      reduce using rule 97 (valor -> TRUE .)
    AND             reduce using rule 97 (valor -> TRUE .)
    INTERROGACION   reduce using rule 97 (valor -> TRUE .)
    OR              reduce using rule 97 (valor -> TRUE .)
    PUNTOCOMA       reduce using rule 97 (valor -> TRUE .)
    PARDER          reduce using rule 97 (valor -> TRUE .)
    COMA            reduce using rule 97 (valor -> TRUE .)
    DOSPUNTOS       reduce using rule 97 (valor -> TRUE .)


state 64

    (98) valor -> FALSE .

    POR             reduce using rule 98 (valor -> FALSE .)
    DIVIDIDO        reduce using rule 98 (valor -> FALSE .)
    MODULO          reduce using rule 98 (valor -> FALSE .)
    EQUIVALENTE     reduce using rule 98 (valor -> FALSE .)
    DISTINTO        reduce using rule 98 (valor -> FALSE .)
    MAS             reduce using rule 98 (valor -> FALSE .)
    MENOS           reduce using rule 98 (valor -> FALSE .)
    MAYOR           reduce using rule 98 (valor -> FALSE .)
    MENOR           reduce using rule 98 (valor -> FALSE .)
    MAYORIGUAL      reduce using rule 98 (valor -> FALSE .)
    MENORIGUAL      reduce using rule 98 (valor -> FALSE .)
    AND             reduce using rule 98 (valor -> FALSE .)
    INTERROGACION   reduce using rule 98 (valor -> FALSE .)
    OR              reduce using rule 98 (valor -> FALSE .)
    PUNTOCOMA       reduce using rule 98 (valor -> FALSE .)
    PARDER          reduce using rule 98 (valor -> FALSE .)
    COMA            reduce using rule 98 (valor -> FALSE .)
    DOSPUNTOS       reduce using rule 98 (valor -> FALSE .)


state 65

    (99) valor -> NULL .

    POR             reduce using rule 99 (valor -> NULL .)
    DIVIDIDO        reduce using rule 99 (valor -> NULL .)
    MODULO          reduce using rule 99 (valor -> NULL .)
    EQUIVALENTE     reduce using rule 99 (valor -> NULL .)
    DISTINTO        reduce using rule 99 (valor -> NULL .)
    MAS             reduce using rule 99 (valor -> NULL .)
    MENOS           reduce using rule 99 (valor -> NULL .)
    MAYOR           reduce using rule 99 (valor -> NULL .)
    MENOR           reduce using rule 99 (valor -> NULL .)
    MAYORIGUAL      reduce using rule 99 (valor -> NULL .)
    MENORIGUAL      reduce using rule 99 (valor -> NULL .)
    AND             reduce using rule 99 (valor -> NULL .)
    INTERROGACION   reduce using rule 99 (valor -> NULL .)
    OR              reduce using rule 99 (valor -> NULL .)
    PUNTOCOMA       reduce using rule 99 (valor -> NULL .)
    PARDER          reduce using rule 99 (valor -> NULL .)
    COMA            reduce using rule 99 (valor -> NULL .)
    DOSPUNTOS       reduce using rule 99 (valor -> NULL .)


state 66

    (100) valor -> ID .
    (16) callFuncion -> ID . PARIZQ venir_Expresiones

    POR             reduce using rule 100 (valor -> ID .)
    DIVIDIDO        reduce using rule 100 (valor -> ID .)
    MODULO          reduce using rule 100 (valor -> ID .)
    EQUIVALENTE     reduce using rule 100 (valor -> ID .)
    DISTINTO        reduce using rule 100 (valor -> ID .)
    MAS             reduce using rule 100 (valor -> ID .)
    MENOS           reduce using rule 100 (valor -> ID .)
    MAYOR           reduce using rule 100 (valor -> ID .)
    MENOR           reduce using rule 100 (valor -> ID .)
    MAYORIGUAL      reduce using rule 100 (valor -> ID .)
    MENORIGUAL      reduce using rule 100 (valor -> ID .)
    AND             reduce using rule 100 (valor -> ID .)
    INTERROGACION   reduce using rule 100 (valor -> ID .)
    OR              reduce using rule 100 (valor -> ID .)
    PUNTOCOMA       reduce using rule 100 (valor -> ID .)
    PARDER          reduce using rule 100 (valor -> ID .)
    COMA            reduce using rule 100 (valor -> ID .)
    DOSPUNTOS       reduce using rule 100 (valor -> ID .)
    PARIZQ          shift and go to state 37


state 67

    (101) valor -> callFuncion .

    POR             reduce using rule 101 (valor -> callFuncion .)
    DIVIDIDO        reduce using rule 101 (valor -> callFuncion .)
    MODULO          reduce using rule 101 (valor -> callFuncion .)
    EQUIVALENTE     reduce using rule 101 (valor -> callFuncion .)
    DISTINTO        reduce using rule 101 (valor -> callFuncion .)
    MAS             reduce using rule 101 (valor -> callFuncion .)
    MENOS           reduce using rule 101 (valor -> callFuncion .)
    MAYOR           reduce using rule 101 (valor -> callFuncion .)
    MENOR           reduce using rule 101 (valor -> callFuncion .)
    MAYORIGUAL      reduce using rule 101 (valor -> callFuncion .)
    MENORIGUAL      reduce using rule 101 (valor -> callFuncion .)
    AND             reduce using rule 101 (valor -> callFuncion .)
    INTERROGACION   reduce using rule 101 (valor -> callFuncion .)
    OR              reduce using rule 101 (valor -> callFuncion .)
    PUNTOCOMA       reduce using rule 101 (valor -> callFuncion .)
    PARDER          reduce using rule 101 (valor -> callFuncion .)
    COMA            reduce using rule 101 (valor -> callFuncion .)
    DOSPUNTOS       reduce using rule 101 (valor -> callFuncion .)


state 68

    (28) sSwitch -> SWITCH PARIZQ . op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 105
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 69

    (21) declaracion_Funcion -> FUNCTION ID . PARIZQ parametros tipoFuncion instrucciones LLAVDER

    PARIZQ          shift and go to state 106


state 70

    (61) imprimir_instr -> CONSOLE PUNTO LOG . PARIZQ lista_exp PARDER PUNTOCOMA

    PARIZQ          shift and go to state 107


state 71

    (49) declaracion -> tipoVar ID DOSPUNTOS . tipo declaracion_explicita
    (56) tipo -> . NUMBER
    (57) tipo -> . FLOAT
    (58) tipo -> . STRING
    (59) tipo -> . BOOLEAN
    (60) tipo -> . CHAR

    NUMBER          shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111
    BOOLEAN         shift and go to state 112
    CHAR            shift and go to state 113

    tipo                           shift and go to state 108

state 72

    (50) declaracion -> tipoVar ID declaracion_implicita .

    CONSOLE         reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    ID              reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    IF              reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    WHILE           reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    FOR             reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    CONTINUE        reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    BREAK           reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    RETURN          reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    SWITCH          reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    FUNCTION        reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    VAR             reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    CONST           reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    $end            reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    NOT             reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    PARIZQ          reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    MENOS           reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    ENTERO          reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    CADENA          reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    DECIMAL         reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    CARACTER        reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    TRUE            reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    FALSE           reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    NULL            reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    LLAVDER         reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    CASE            reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)
    DEFAULT         reduce using rule 50 (declaracion -> tipoVar ID declaracion_implicita .)


state 73

    (53) declaracion_implicita -> IGUAL . op_Ternario PUNTOCOMA
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 114
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 74

    (44) asignacion -> ID IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 44 (asignacion -> ID IGUAL op_Ternario .)
    PARDER          reduce using rule 44 (asignacion -> ID IGUAL op_Ternario .)


state 75

    (47) asignacion -> ID MAS MAS .

    PUNTOCOMA       reduce using rule 47 (asignacion -> ID MAS MAS .)
    PARDER          reduce using rule 47 (asignacion -> ID MAS MAS .)


state 76

    (45) asignacion -> ID MAS IGUAL . op_Ternario
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 115
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 77

    (48) asignacion -> ID MENOS MENOS .

    PUNTOCOMA       reduce using rule 48 (asignacion -> ID MENOS MENOS .)
    PARDER          reduce using rule 48 (asignacion -> ID MENOS MENOS .)


state 78

    (46) asignacion -> ID MENOS IGUAL . op_Ternario
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 116
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 79

    (16) callFuncion -> ID PARIZQ venir_Expresiones .

    PUNTOCOMA       reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    POR             reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    DIVIDIDO        reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MODULO          reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    EQUIVALENTE     reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    DISTINTO        reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MAS             reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MENOS           reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MAYOR           reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MENOR           reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MAYORIGUAL      reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    MENORIGUAL      reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    AND             reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    INTERROGACION   reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    OR              reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    PARDER          reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    COMA            reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)
    DOSPUNTOS       reduce using rule 16 (callFuncion -> ID PARIZQ venir_Expresiones .)


state 80

    (17) venir_Expresiones -> lista_Expresiones . PARDER
    (19) lista_Expresiones -> lista_Expresiones . COMA op_Ternario

    PARDER          shift and go to state 117
    COMA            shift and go to state 118


state 81

    (18) venir_Expresiones -> PARDER .

    PUNTOCOMA       reduce using rule 18 (venir_Expresiones -> PARDER .)
    POR             reduce using rule 18 (venir_Expresiones -> PARDER .)
    DIVIDIDO        reduce using rule 18 (venir_Expresiones -> PARDER .)
    MODULO          reduce using rule 18 (venir_Expresiones -> PARDER .)
    EQUIVALENTE     reduce using rule 18 (venir_Expresiones -> PARDER .)
    DISTINTO        reduce using rule 18 (venir_Expresiones -> PARDER .)
    MAS             reduce using rule 18 (venir_Expresiones -> PARDER .)
    MENOS           reduce using rule 18 (venir_Expresiones -> PARDER .)
    MAYOR           reduce using rule 18 (venir_Expresiones -> PARDER .)
    MENOR           reduce using rule 18 (venir_Expresiones -> PARDER .)
    MAYORIGUAL      reduce using rule 18 (venir_Expresiones -> PARDER .)
    MENORIGUAL      reduce using rule 18 (venir_Expresiones -> PARDER .)
    AND             reduce using rule 18 (venir_Expresiones -> PARDER .)
    INTERROGACION   reduce using rule 18 (venir_Expresiones -> PARDER .)
    OR              reduce using rule 18 (venir_Expresiones -> PARDER .)
    PARDER          reduce using rule 18 (venir_Expresiones -> PARDER .)
    COMA            reduce using rule 18 (venir_Expresiones -> PARDER .)
    DOSPUNTOS       reduce using rule 18 (venir_Expresiones -> PARDER .)


state 82

    (20) lista_Expresiones -> op_Ternario .

    PARDER          reduce using rule 20 (lista_Expresiones -> op_Ternario .)
    COMA            reduce using rule 20 (lista_Expresiones -> op_Ternario .)


state 83

    (39) sIf -> IF PARIZQ op_Ternario . PARDER LLAVIZQ instrucciones sIf2

    PARDER          shift and go to state 119


state 84

    (38) sWhile -> WHILE PARIZQ op_Ternario . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 120


state 85

    (37) sFor -> FOR PARIZQ declaracion . op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 121
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 86

    (36) sReturn -> RETURN op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    ID              reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    IF              reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    FUNCTION        reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    $end            reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 36 (sReturn -> RETURN op_Ternario PUNTOCOMA .)


state 87

    (64) op_Ternario -> exp_Or INTERROGACION . exp_Or DOSPUNTOS exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Or                         shift and go to state 122
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 88

    (66) exp_Or -> exp_Or OR . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_And                        shift and go to state 123
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 89

    (68) exp_And -> exp_And AND . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Not                        shift and go to state 124
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 90

    (70) exp_Not -> lNot exp_Comp .

    AND             reduce using rule 70 (exp_Not -> lNot exp_Comp .)
    INTERROGACION   reduce using rule 70 (exp_Not -> lNot exp_Comp .)
    OR              reduce using rule 70 (exp_Not -> lNot exp_Comp .)
    PUNTOCOMA       reduce using rule 70 (exp_Not -> lNot exp_Comp .)
    PARDER          reduce using rule 70 (exp_Not -> lNot exp_Comp .)
    COMA            reduce using rule 70 (exp_Not -> lNot exp_Comp .)
    DOSPUNTOS       reduce using rule 70 (exp_Not -> lNot exp_Comp .)


state 91

    (72) lNot -> lNot NOT .

    NOT             reduce using rule 72 (lNot -> lNot NOT .)
    PARIZQ          reduce using rule 72 (lNot -> lNot NOT .)
    MENOS           reduce using rule 72 (lNot -> lNot NOT .)
    ENTERO          reduce using rule 72 (lNot -> lNot NOT .)
    CADENA          reduce using rule 72 (lNot -> lNot NOT .)
    DECIMAL         reduce using rule 72 (lNot -> lNot NOT .)
    CARACTER        reduce using rule 72 (lNot -> lNot NOT .)
    TRUE            reduce using rule 72 (lNot -> lNot NOT .)
    FALSE           reduce using rule 72 (lNot -> lNot NOT .)
    NULL            reduce using rule 72 (lNot -> lNot NOT .)
    ID              reduce using rule 72 (lNot -> lNot NOT .)


state 92

    (74) exp_Comp -> exp_Sum_Menos EQUIVALENTE . exp_Sum_Menos
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Sum_Menos                  shift and go to state 125
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 93

    (75) exp_Comp -> exp_Sum_Menos DISTINTO . exp_Sum_Menos
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Sum_Menos                  shift and go to state 126
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 94

    (82) exp_Sum_Menos -> exp_Sum_Menos MAS . exp_Mul_Div
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Mul_Div                    shift and go to state 127
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 95

    (83) exp_Sum_Menos -> exp_Sum_Menos MENOS . exp_Mul_Div
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Mul_Div                    shift and go to state 128
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 96

    (77) exp_rel -> exp_Sum_Menos MAYOR . exp_Sum_Menos
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Sum_Menos                  shift and go to state 129
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 97

    (78) exp_rel -> exp_Sum_Menos MENOR . exp_Sum_Menos
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Sum_Menos                  shift and go to state 130
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 98

    (79) exp_rel -> exp_Sum_Menos MAYORIGUAL . exp_Sum_Menos
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Sum_Menos                  shift and go to state 131
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 99

    (80) exp_rel -> exp_Sum_Menos MENORIGUAL . exp_Sum_Menos
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Sum_Menos                  shift and go to state 132
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 100

    (85) exp_Mul_Div -> exp_Mul_Div POR . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Parentesis                 shift and go to state 133
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 101

    (86) exp_Mul_Div -> exp_Mul_Div DIVIDIDO . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Parentesis                 shift and go to state 134
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 102

    (87) exp_Mul_Div -> exp_Mul_Div MODULO . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Parentesis                 shift and go to state 135
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 103

    (91) exp_Negativo -> MENOS valor .

    POR             reduce using rule 91 (exp_Negativo -> MENOS valor .)
    DIVIDIDO        reduce using rule 91 (exp_Negativo -> MENOS valor .)
    MODULO          reduce using rule 91 (exp_Negativo -> MENOS valor .)
    EQUIVALENTE     reduce using rule 91 (exp_Negativo -> MENOS valor .)
    DISTINTO        reduce using rule 91 (exp_Negativo -> MENOS valor .)
    MAS             reduce using rule 91 (exp_Negativo -> MENOS valor .)
    MENOS           reduce using rule 91 (exp_Negativo -> MENOS valor .)
    MAYOR           reduce using rule 91 (exp_Negativo -> MENOS valor .)
    MENOR           reduce using rule 91 (exp_Negativo -> MENOS valor .)
    MAYORIGUAL      reduce using rule 91 (exp_Negativo -> MENOS valor .)
    MENORIGUAL      reduce using rule 91 (exp_Negativo -> MENOS valor .)
    AND             reduce using rule 91 (exp_Negativo -> MENOS valor .)
    INTERROGACION   reduce using rule 91 (exp_Negativo -> MENOS valor .)
    OR              reduce using rule 91 (exp_Negativo -> MENOS valor .)
    PUNTOCOMA       reduce using rule 91 (exp_Negativo -> MENOS valor .)
    PARDER          reduce using rule 91 (exp_Negativo -> MENOS valor .)
    COMA            reduce using rule 91 (exp_Negativo -> MENOS valor .)
    DOSPUNTOS       reduce using rule 91 (exp_Negativo -> MENOS valor .)


state 104

    (89) exp_Parentesis -> PARIZQ exp_Or . PARDER
    (66) exp_Or -> exp_Or . OR exp_And

    PARDER          shift and go to state 136
    OR              shift and go to state 88


state 105

    (28) sSwitch -> SWITCH PARIZQ op_Ternario . PARDER LLAVIZQ listCases LLAVDER

    PARDER          shift and go to state 137


state 106

    (21) declaracion_Funcion -> FUNCTION ID PARIZQ . parametros tipoFuncion instrucciones LLAVDER
    (22) parametros -> . PARDER
    (23) parametros -> . lista_Parametros PARDER
    (24) lista_Parametros -> . lista_Parametros COMA ID DOSPUNTOS tipo
    (25) lista_Parametros -> . ID DOSPUNTOS tipo

    PARDER          shift and go to state 140
    ID              shift and go to state 138

    parametros                     shift and go to state 139
    lista_Parametros               shift and go to state 141

state 107

    (61) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ . lista_exp PARDER PUNTOCOMA
    (62) lista_exp -> . lista_exp COMA op_Ternario
    (63) lista_exp -> . op_Ternario
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    lista_exp                      shift and go to state 142
    op_Ternario                    shift and go to state 143
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 108

    (49) declaracion -> tipoVar ID DOSPUNTOS tipo . declaracion_explicita
    (51) declaracion_explicita -> . PUNTOCOMA
    (52) declaracion_explicita -> . IGUAL op_Ternario PUNTOCOMA

    PUNTOCOMA       shift and go to state 145
    IGUAL           shift and go to state 146

    declaracion_explicita          shift and go to state 144

state 109

    (56) tipo -> NUMBER .

    PUNTOCOMA       reduce using rule 56 (tipo -> NUMBER .)
    IGUAL           reduce using rule 56 (tipo -> NUMBER .)
    PARDER          reduce using rule 56 (tipo -> NUMBER .)
    COMA            reduce using rule 56 (tipo -> NUMBER .)
    LLAVIZQ         reduce using rule 56 (tipo -> NUMBER .)


state 110

    (57) tipo -> FLOAT .

    PUNTOCOMA       reduce using rule 57 (tipo -> FLOAT .)
    IGUAL           reduce using rule 57 (tipo -> FLOAT .)
    PARDER          reduce using rule 57 (tipo -> FLOAT .)
    COMA            reduce using rule 57 (tipo -> FLOAT .)
    LLAVIZQ         reduce using rule 57 (tipo -> FLOAT .)


state 111

    (58) tipo -> STRING .

    PUNTOCOMA       reduce using rule 58 (tipo -> STRING .)
    IGUAL           reduce using rule 58 (tipo -> STRING .)
    PARDER          reduce using rule 58 (tipo -> STRING .)
    COMA            reduce using rule 58 (tipo -> STRING .)
    LLAVIZQ         reduce using rule 58 (tipo -> STRING .)


state 112

    (59) tipo -> BOOLEAN .

    PUNTOCOMA       reduce using rule 59 (tipo -> BOOLEAN .)
    IGUAL           reduce using rule 59 (tipo -> BOOLEAN .)
    PARDER          reduce using rule 59 (tipo -> BOOLEAN .)
    COMA            reduce using rule 59 (tipo -> BOOLEAN .)
    LLAVIZQ         reduce using rule 59 (tipo -> BOOLEAN .)


state 113

    (60) tipo -> CHAR .

    PUNTOCOMA       reduce using rule 60 (tipo -> CHAR .)
    IGUAL           reduce using rule 60 (tipo -> CHAR .)
    PARDER          reduce using rule 60 (tipo -> CHAR .)
    COMA            reduce using rule 60 (tipo -> CHAR .)
    LLAVIZQ         reduce using rule 60 (tipo -> CHAR .)


state 114

    (53) declaracion_implicita -> IGUAL op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 147


state 115

    (45) asignacion -> ID MAS IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 45 (asignacion -> ID MAS IGUAL op_Ternario .)
    PARDER          reduce using rule 45 (asignacion -> ID MAS IGUAL op_Ternario .)


state 116

    (46) asignacion -> ID MENOS IGUAL op_Ternario .

    PUNTOCOMA       reduce using rule 46 (asignacion -> ID MENOS IGUAL op_Ternario .)
    PARDER          reduce using rule 46 (asignacion -> ID MENOS IGUAL op_Ternario .)


state 117

    (17) venir_Expresiones -> lista_Expresiones PARDER .

    PUNTOCOMA       reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    POR             reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    DIVIDIDO        reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    MODULO          reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    EQUIVALENTE     reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    DISTINTO        reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    MAS             reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    MENOS           reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    MAYOR           reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    MENOR           reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    MAYORIGUAL      reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    MENORIGUAL      reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    AND             reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    INTERROGACION   reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    OR              reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    PARDER          reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    COMA            reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)
    DOSPUNTOS       reduce using rule 17 (venir_Expresiones -> lista_Expresiones PARDER .)


state 118

    (19) lista_Expresiones -> lista_Expresiones COMA . op_Ternario
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 148
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 119

    (39) sIf -> IF PARIZQ op_Ternario PARDER . LLAVIZQ instrucciones sIf2

    LLAVIZQ         shift and go to state 149


state 120

    (38) sWhile -> WHILE PARIZQ op_Ternario PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 150


state 121

    (37) sFor -> FOR PARIZQ declaracion op_Ternario . PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER

    PUNTOCOMA       shift and go to state 151


state 122

    (64) op_Ternario -> exp_Or INTERROGACION exp_Or . DOSPUNTOS exp_Or
    (66) exp_Or -> exp_Or . OR exp_And

    DOSPUNTOS       shift and go to state 152
    OR              shift and go to state 88


state 123

    (66) exp_Or -> exp_Or OR exp_And .
    (68) exp_And -> exp_And . AND exp_Not

    INTERROGACION   reduce using rule 66 (exp_Or -> exp_Or OR exp_And .)
    OR              reduce using rule 66 (exp_Or -> exp_Or OR exp_And .)
    PUNTOCOMA       reduce using rule 66 (exp_Or -> exp_Or OR exp_And .)
    PARDER          reduce using rule 66 (exp_Or -> exp_Or OR exp_And .)
    COMA            reduce using rule 66 (exp_Or -> exp_Or OR exp_And .)
    DOSPUNTOS       reduce using rule 66 (exp_Or -> exp_Or OR exp_And .)
    AND             shift and go to state 89


state 124

    (68) exp_And -> exp_And AND exp_Not .

    AND             reduce using rule 68 (exp_And -> exp_And AND exp_Not .)
    INTERROGACION   reduce using rule 68 (exp_And -> exp_And AND exp_Not .)
    OR              reduce using rule 68 (exp_And -> exp_And AND exp_Not .)
    PUNTOCOMA       reduce using rule 68 (exp_And -> exp_And AND exp_Not .)
    PARDER          reduce using rule 68 (exp_And -> exp_And AND exp_Not .)
    COMA            reduce using rule 68 (exp_And -> exp_And AND exp_Not .)
    DOSPUNTOS       reduce using rule 68 (exp_And -> exp_And AND exp_Not .)


state 125

    (74) exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .
    (82) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (83) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 74 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    INTERROGACION   reduce using rule 74 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    OR              reduce using rule 74 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 74 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    PARDER          reduce using rule 74 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    COMA            reduce using rule 74 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 74 (exp_Comp -> exp_Sum_Menos EQUIVALENTE exp_Sum_Menos .)
    MAS             shift and go to state 94
    MENOS           shift and go to state 95


state 126

    (75) exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .
    (82) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (83) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 75 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    INTERROGACION   reduce using rule 75 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    OR              reduce using rule 75 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 75 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    PARDER          reduce using rule 75 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    COMA            reduce using rule 75 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 75 (exp_Comp -> exp_Sum_Menos DISTINTO exp_Sum_Menos .)
    MAS             shift and go to state 94
    MENOS           shift and go to state 95


state 127

    (82) exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .
    (85) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (86) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    DISTINTO        reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAS             reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENOS           reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAYOR           reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENOR           reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    MENORIGUAL      reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    AND             reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    INTERROGACION   reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    OR              reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    PARDER          reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    COMA            reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 82 (exp_Sum_Menos -> exp_Sum_Menos MAS exp_Mul_Div .)
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    MODULO          shift and go to state 102


state 128

    (83) exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .
    (85) exp_Mul_Div -> exp_Mul_Div . POR exp_Parentesis
    (86) exp_Mul_Div -> exp_Mul_Div . DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> exp_Mul_Div . MODULO exp_Parentesis

    EQUIVALENTE     reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    DISTINTO        reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAS             reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENOS           reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAYOR           reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENOR           reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MAYORIGUAL      reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    MENORIGUAL      reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    AND             reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    INTERROGACION   reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    OR              reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    PUNTOCOMA       reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    PARDER          reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    COMA            reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    DOSPUNTOS       reduce using rule 83 (exp_Sum_Menos -> exp_Sum_Menos MENOS exp_Mul_Div .)
    POR             shift and go to state 100
    DIVIDIDO        shift and go to state 101
    MODULO          shift and go to state 102


state 129

    (77) exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .
    (82) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (83) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 77 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    INTERROGACION   reduce using rule 77 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    OR              reduce using rule 77 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 77 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    PARDER          reduce using rule 77 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    COMA            reduce using rule 77 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 77 (exp_rel -> exp_Sum_Menos MAYOR exp_Sum_Menos .)
    MAS             shift and go to state 94
    MENOS           shift and go to state 95


state 130

    (78) exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .
    (82) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (83) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 78 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    INTERROGACION   reduce using rule 78 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    OR              reduce using rule 78 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 78 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    PARDER          reduce using rule 78 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    COMA            reduce using rule 78 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 78 (exp_rel -> exp_Sum_Menos MENOR exp_Sum_Menos .)
    MAS             shift and go to state 94
    MENOS           shift and go to state 95


state 131

    (79) exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .
    (82) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (83) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 79 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    INTERROGACION   reduce using rule 79 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    OR              reduce using rule 79 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 79 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    PARDER          reduce using rule 79 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    COMA            reduce using rule 79 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 79 (exp_rel -> exp_Sum_Menos MAYORIGUAL exp_Sum_Menos .)
    MAS             shift and go to state 94
    MENOS           shift and go to state 95


state 132

    (80) exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .
    (82) exp_Sum_Menos -> exp_Sum_Menos . MAS exp_Mul_Div
    (83) exp_Sum_Menos -> exp_Sum_Menos . MENOS exp_Mul_Div

    AND             reduce using rule 80 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    INTERROGACION   reduce using rule 80 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    OR              reduce using rule 80 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    PUNTOCOMA       reduce using rule 80 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    PARDER          reduce using rule 80 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    COMA            reduce using rule 80 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    DOSPUNTOS       reduce using rule 80 (exp_rel -> exp_Sum_Menos MENORIGUAL exp_Sum_Menos .)
    MAS             shift and go to state 94
    MENOS           shift and go to state 95


state 133

    (85) exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .

    POR             reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DIVIDIDO        reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MODULO          reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    EQUIVALENTE     reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DISTINTO        reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAS             reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENOS           reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAYOR           reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENOR           reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MAYORIGUAL      reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    MENORIGUAL      reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    AND             reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    INTERROGACION   reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    OR              reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    PUNTOCOMA       reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    PARDER          reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    COMA            reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)
    DOSPUNTOS       reduce using rule 85 (exp_Mul_Div -> exp_Mul_Div POR exp_Parentesis .)


state 134

    (86) exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .

    POR             reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DIVIDIDO        reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MODULO          reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    EQUIVALENTE     reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DISTINTO        reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAS             reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENOS           reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAYOR           reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENOR           reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MAYORIGUAL      reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    MENORIGUAL      reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    AND             reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    INTERROGACION   reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    OR              reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    PUNTOCOMA       reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    PARDER          reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    COMA            reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)
    DOSPUNTOS       reduce using rule 86 (exp_Mul_Div -> exp_Mul_Div DIVIDIDO exp_Parentesis .)


state 135

    (87) exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .

    POR             reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DIVIDIDO        reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MODULO          reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    EQUIVALENTE     reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DISTINTO        reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAS             reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENOS           reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAYOR           reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENOR           reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MAYORIGUAL      reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    MENORIGUAL      reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    AND             reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    INTERROGACION   reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    OR              reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    PUNTOCOMA       reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    PARDER          reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    COMA            reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)
    DOSPUNTOS       reduce using rule 87 (exp_Mul_Div -> exp_Mul_Div MODULO exp_Parentesis .)


state 136

    (89) exp_Parentesis -> PARIZQ exp_Or PARDER .

    POR             reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DIVIDIDO        reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MODULO          reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    EQUIVALENTE     reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DISTINTO        reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAS             reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENOS           reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAYOR           reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENOR           reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MAYORIGUAL      reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    MENORIGUAL      reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    AND             reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    INTERROGACION   reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    OR              reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    PUNTOCOMA       reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    PARDER          reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    COMA            reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)
    DOSPUNTOS       reduce using rule 89 (exp_Parentesis -> PARIZQ exp_Or PARDER .)


state 137

    (28) sSwitch -> SWITCH PARIZQ op_Ternario PARDER . LLAVIZQ listCases LLAVDER

    LLAVIZQ         shift and go to state 153


state 138

    (25) lista_Parametros -> ID . DOSPUNTOS tipo

    DOSPUNTOS       shift and go to state 154


state 139

    (21) declaracion_Funcion -> FUNCTION ID PARIZQ parametros . tipoFuncion instrucciones LLAVDER
    (26) tipoFuncion -> . DOSPUNTOS tipo LLAVIZQ
    (27) tipoFuncion -> . LLAVIZQ

    DOSPUNTOS       shift and go to state 156
    LLAVIZQ         shift and go to state 157

    tipoFuncion                    shift and go to state 155

state 140

    (22) parametros -> PARDER .

    DOSPUNTOS       reduce using rule 22 (parametros -> PARDER .)
    LLAVIZQ         reduce using rule 22 (parametros -> PARDER .)


state 141

    (23) parametros -> lista_Parametros . PARDER
    (24) lista_Parametros -> lista_Parametros . COMA ID DOSPUNTOS tipo

    PARDER          shift and go to state 158
    COMA            shift and go to state 159


state 142

    (61) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp . PARDER PUNTOCOMA
    (62) lista_exp -> lista_exp . COMA op_Ternario

    PARDER          shift and go to state 160
    COMA            shift and go to state 161


state 143

    (63) lista_exp -> op_Ternario .

    PARDER          reduce using rule 63 (lista_exp -> op_Ternario .)
    COMA            reduce using rule 63 (lista_exp -> op_Ternario .)


state 144

    (49) declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .

    CONSOLE         reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    ID              reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    IF              reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    WHILE           reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FOR             reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CONTINUE        reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    BREAK           reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    RETURN          reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    SWITCH          reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FUNCTION        reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    VAR             reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CONST           reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    $end            reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    NOT             reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    PARIZQ          reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    MENOS           reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    ENTERO          reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CADENA          reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    DECIMAL         reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CARACTER        reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    TRUE            reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    FALSE           reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    NULL            reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    LLAVDER         reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    CASE            reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)
    DEFAULT         reduce using rule 49 (declaracion -> tipoVar ID DOSPUNTOS tipo declaracion_explicita .)


state 145

    (51) declaracion_explicita -> PUNTOCOMA .

    CONSOLE         reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    ID              reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    IF              reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    WHILE           reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    FOR             reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    CONTINUE        reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    BREAK           reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    RETURN          reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    SWITCH          reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    FUNCTION        reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    VAR             reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    CONST           reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    $end            reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    NOT             reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    PARIZQ          reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    MENOS           reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    ENTERO          reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    CADENA          reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    DECIMAL         reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    CARACTER        reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    TRUE            reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    FALSE           reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    NULL            reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    LLAVDER         reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    CASE            reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)
    DEFAULT         reduce using rule 51 (declaracion_explicita -> PUNTOCOMA .)


state 146

    (52) declaracion_explicita -> IGUAL . op_Ternario PUNTOCOMA
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 162
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 147

    (53) declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    ID              reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    IF              reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FUNCTION        reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    $end            reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    NOT             reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    PARIZQ          reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    MENOS           reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    ENTERO          reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CADENA          reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    DECIMAL         reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CARACTER        reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    TRUE            reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    FALSE           reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    NULL            reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 53 (declaracion_implicita -> IGUAL op_Ternario PUNTOCOMA .)


state 148

    (19) lista_Expresiones -> lista_Expresiones COMA op_Ternario .

    PARDER          reduce using rule 19 (lista_Expresiones -> lista_Expresiones COMA op_Ternario .)
    COMA            reduce using rule 19 (lista_Expresiones -> lista_Expresiones COMA op_Ternario .)


state 149

    (39) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ . instrucciones sIf2
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instrucciones                  shift and go to state 163
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 150

    (38) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instrucciones                  shift and go to state 164
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 151

    (37) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA . asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS

    ID              shift and go to state 166

    asignacion                     shift and go to state 165

state 152

    (64) op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    exp_Or                         shift and go to state 167
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 153

    (28) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ . listCases LLAVDER
    (29) listCases -> . listCases CASE op_Ternario DOSPUNTOS instrucciones
    (30) listCases -> . listCases DEFAULT DOSPUNTOS instrucciones
    (31) listCases -> . CASE op_Ternario DOSPUNTOS instrucciones
    (32) listCases -> . DEFAULT DOSPUNTOS instrucciones

    CASE            shift and go to state 169
    DEFAULT         shift and go to state 170

    listCases                      shift and go to state 168

state 154

    (25) lista_Parametros -> ID DOSPUNTOS . tipo
    (56) tipo -> . NUMBER
    (57) tipo -> . FLOAT
    (58) tipo -> . STRING
    (59) tipo -> . BOOLEAN
    (60) tipo -> . CHAR

    NUMBER          shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111
    BOOLEAN         shift and go to state 112
    CHAR            shift and go to state 113

    tipo                           shift and go to state 171

state 155

    (21) declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instrucciones                  shift and go to state 172
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 156

    (26) tipoFuncion -> DOSPUNTOS . tipo LLAVIZQ
    (56) tipo -> . NUMBER
    (57) tipo -> . FLOAT
    (58) tipo -> . STRING
    (59) tipo -> . BOOLEAN
    (60) tipo -> . CHAR

    NUMBER          shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111
    BOOLEAN         shift and go to state 112
    CHAR            shift and go to state 113

    tipo                           shift and go to state 173

state 157

    (27) tipoFuncion -> LLAVIZQ .

    CONSOLE         reduce using rule 27 (tipoFuncion -> LLAVIZQ .)
    ID              reduce using rule 27 (tipoFuncion -> LLAVIZQ .)
    IF              reduce using rule 27 (tipoFuncion -> LLAVIZQ .)
    WHILE           reduce using rule 27 (tipoFuncion -> LLAVIZQ .)
    FOR             reduce using rule 27 (tipoFuncion -> LLAVIZQ .)
    CONTINUE        reduce using rule 27 (tipoFuncion -> LLAVIZQ .)
    BREAK           reduce using rule 27 (tipoFuncion -> LLAVIZQ .)
    RETURN          reduce using rule 27 (tipoFuncion -> LLAVIZQ .)
    SWITCH          reduce using rule 27 (tipoFuncion -> LLAVIZQ .)
    FUNCTION        reduce using rule 27 (tipoFuncion -> LLAVIZQ .)
    VAR             reduce using rule 27 (tipoFuncion -> LLAVIZQ .)
    CONST           reduce using rule 27 (tipoFuncion -> LLAVIZQ .)


state 158

    (23) parametros -> lista_Parametros PARDER .

    DOSPUNTOS       reduce using rule 23 (parametros -> lista_Parametros PARDER .)
    LLAVIZQ         reduce using rule 23 (parametros -> lista_Parametros PARDER .)


state 159

    (24) lista_Parametros -> lista_Parametros COMA . ID DOSPUNTOS tipo

    ID              shift and go to state 174


state 160

    (61) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER . PUNTOCOMA

    PUNTOCOMA       shift and go to state 175


state 161

    (62) lista_exp -> lista_exp COMA . op_Ternario
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 176
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 162

    (52) declaracion_explicita -> IGUAL op_Ternario . PUNTOCOMA

    PUNTOCOMA       shift and go to state 177


state 163

    (39) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones . sIf2
    (2) instrucciones -> instrucciones . instruccion
    (40) sIf2 -> . LLAVDER ELSE sElse
    (41) sIf2 -> . LLAVDER
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    LLAVDER         shift and go to state 179
    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    sIf2                           shift and go to state 178
    instruccion                    shift and go to state 29
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 164

    (38) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    LLAVDER         shift and go to state 180
    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instruccion                    shift and go to state 29
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 165

    (37) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion . PARDER LLAVIZQ instrucciones LLAVDER

    PARDER          shift and go to state 181


state 166

    (44) asignacion -> ID . IGUAL op_Ternario
    (45) asignacion -> ID . MAS IGUAL op_Ternario
    (46) asignacion -> ID . MENOS IGUAL op_Ternario
    (47) asignacion -> ID . MAS MAS
    (48) asignacion -> ID . MENOS MENOS

    IGUAL           shift and go to state 34
    MAS             shift and go to state 35
    MENOS           shift and go to state 36


state 167

    (64) op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .
    (66) exp_Or -> exp_Or . OR exp_And

    PUNTOCOMA       reduce using rule 64 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    PARDER          reduce using rule 64 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    COMA            reduce using rule 64 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    DOSPUNTOS       reduce using rule 64 (op_Ternario -> exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or .)
    OR              shift and go to state 88


state 168

    (28) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases . LLAVDER
    (29) listCases -> listCases . CASE op_Ternario DOSPUNTOS instrucciones
    (30) listCases -> listCases . DEFAULT DOSPUNTOS instrucciones

    LLAVDER         shift and go to state 182
    CASE            shift and go to state 183
    DEFAULT         shift and go to state 184


state 169

    (31) listCases -> CASE . op_Ternario DOSPUNTOS instrucciones
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 185
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 170

    (32) listCases -> DEFAULT . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 186


state 171

    (25) lista_Parametros -> ID DOSPUNTOS tipo .

    PARDER          reduce using rule 25 (lista_Parametros -> ID DOSPUNTOS tipo .)
    COMA            reduce using rule 25 (lista_Parametros -> ID DOSPUNTOS tipo .)


state 172

    (21) declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    LLAVDER         shift and go to state 187
    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instruccion                    shift and go to state 29
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 173

    (26) tipoFuncion -> DOSPUNTOS tipo . LLAVIZQ

    LLAVIZQ         shift and go to state 188


state 174

    (24) lista_Parametros -> lista_Parametros COMA ID . DOSPUNTOS tipo

    DOSPUNTOS       shift and go to state 189


state 175

    (61) imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .

    CONSOLE         reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    ID              reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    IF              reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    WHILE           reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    FOR             reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CONTINUE        reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    BREAK           reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    RETURN          reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    SWITCH          reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    FUNCTION        reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    VAR             reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CONST           reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    $end            reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    LLAVDER         reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    CASE            reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)
    DEFAULT         reduce using rule 61 (imprimir_instr -> CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA .)


state 176

    (62) lista_exp -> lista_exp COMA op_Ternario .

    PARDER          reduce using rule 62 (lista_exp -> lista_exp COMA op_Ternario .)
    COMA            reduce using rule 62 (lista_exp -> lista_exp COMA op_Ternario .)


state 177

    (52) declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .

    CONSOLE         reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    ID              reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    IF              reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    WHILE           reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FOR             reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONTINUE        reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    BREAK           reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    RETURN          reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    SWITCH          reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FUNCTION        reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    VAR             reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CONST           reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    $end            reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    NOT             reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    PARIZQ          reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    MENOS           reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    ENTERO          reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CADENA          reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    DECIMAL         reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CARACTER        reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    TRUE            reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    FALSE           reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    NULL            reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    LLAVDER         reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    CASE            reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)
    DEFAULT         reduce using rule 52 (declaracion_explicita -> IGUAL op_Ternario PUNTOCOMA .)


state 178

    (39) sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .

    CONSOLE         reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    ID              reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    IF              reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    WHILE           reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    FOR             reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CONTINUE        reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    BREAK           reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    RETURN          reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    SWITCH          reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    FUNCTION        reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    VAR             reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CONST           reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    $end            reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    LLAVDER         reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    CASE            reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)
    DEFAULT         reduce using rule 39 (sIf -> IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2 .)


state 179

    (40) sIf2 -> LLAVDER . ELSE sElse
    (41) sIf2 -> LLAVDER .

    ELSE            shift and go to state 190
    CONSOLE         reduce using rule 41 (sIf2 -> LLAVDER .)
    ID              reduce using rule 41 (sIf2 -> LLAVDER .)
    IF              reduce using rule 41 (sIf2 -> LLAVDER .)
    WHILE           reduce using rule 41 (sIf2 -> LLAVDER .)
    FOR             reduce using rule 41 (sIf2 -> LLAVDER .)
    CONTINUE        reduce using rule 41 (sIf2 -> LLAVDER .)
    BREAK           reduce using rule 41 (sIf2 -> LLAVDER .)
    RETURN          reduce using rule 41 (sIf2 -> LLAVDER .)
    SWITCH          reduce using rule 41 (sIf2 -> LLAVDER .)
    FUNCTION        reduce using rule 41 (sIf2 -> LLAVDER .)
    VAR             reduce using rule 41 (sIf2 -> LLAVDER .)
    CONST           reduce using rule 41 (sIf2 -> LLAVDER .)
    $end            reduce using rule 41 (sIf2 -> LLAVDER .)
    LLAVDER         reduce using rule 41 (sIf2 -> LLAVDER .)
    CASE            reduce using rule 41 (sIf2 -> LLAVDER .)
    DEFAULT         reduce using rule 41 (sIf2 -> LLAVDER .)


state 180

    (38) sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNCTION        reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 38 (sWhile -> WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER .)


state 181

    (37) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER . LLAVIZQ instrucciones LLAVDER

    LLAVIZQ         shift and go to state 191


state 182

    (28) sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .

    CONSOLE         reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    ID              reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    IF              reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    WHILE           reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    FOR             reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CONTINUE        reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    BREAK           reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    RETURN          reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    SWITCH          reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    FUNCTION        reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    VAR             reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CONST           reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    $end            reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    LLAVDER         reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    CASE            reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)
    DEFAULT         reduce using rule 28 (sSwitch -> SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER .)


state 183

    (29) listCases -> listCases CASE . op_Ternario DOSPUNTOS instrucciones
    (64) op_Ternario -> . exp_Or INTERROGACION exp_Or DOSPUNTOS exp_Or
    (65) op_Ternario -> . exp_Or
    (66) exp_Or -> . exp_Or OR exp_And
    (67) exp_Or -> . exp_And
    (68) exp_And -> . exp_And AND exp_Not
    (69) exp_And -> . exp_Not
    (70) exp_Not -> . lNot exp_Comp
    (71) exp_Not -> . exp_Comp
    (72) lNot -> . lNot NOT
    (73) lNot -> . NOT
    (74) exp_Comp -> . exp_Sum_Menos EQUIVALENTE exp_Sum_Menos
    (75) exp_Comp -> . exp_Sum_Menos DISTINTO exp_Sum_Menos
    (76) exp_Comp -> . exp_rel
    (82) exp_Sum_Menos -> . exp_Sum_Menos MAS exp_Mul_Div
    (83) exp_Sum_Menos -> . exp_Sum_Menos MENOS exp_Mul_Div
    (84) exp_Sum_Menos -> . exp_Mul_Div
    (77) exp_rel -> . exp_Sum_Menos MAYOR exp_Sum_Menos
    (78) exp_rel -> . exp_Sum_Menos MENOR exp_Sum_Menos
    (79) exp_rel -> . exp_Sum_Menos MAYORIGUAL exp_Sum_Menos
    (80) exp_rel -> . exp_Sum_Menos MENORIGUAL exp_Sum_Menos
    (81) exp_rel -> . exp_Sum_Menos
    (85) exp_Mul_Div -> . exp_Mul_Div POR exp_Parentesis
    (86) exp_Mul_Div -> . exp_Mul_Div DIVIDIDO exp_Parentesis
    (87) exp_Mul_Div -> . exp_Mul_Div MODULO exp_Parentesis
    (88) exp_Mul_Div -> . exp_Parentesis
    (89) exp_Parentesis -> . PARIZQ exp_Or PARDER
    (90) exp_Parentesis -> . exp_Negativo
    (91) exp_Negativo -> . MENOS valor
    (92) exp_Negativo -> . valor
    (93) valor -> . ENTERO
    (94) valor -> . CADENA
    (95) valor -> . DECIMAL
    (96) valor -> . CARACTER
    (97) valor -> . TRUE
    (98) valor -> . FALSE
    (99) valor -> . NULL
    (100) valor -> . ID
    (101) valor -> . callFuncion
    (16) callFuncion -> . ID PARIZQ venir_Expresiones

    NOT             shift and go to state 50
    PARIZQ          shift and go to state 56
    MENOS           shift and go to state 54
    ENTERO          shift and go to state 59
    CADENA          shift and go to state 60
    DECIMAL         shift and go to state 61
    CARACTER        shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    NULL            shift and go to state 65
    ID              shift and go to state 66

    op_Ternario                    shift and go to state 192
    exp_Or                         shift and go to state 45
    exp_And                        shift and go to state 46
    exp_Not                        shift and go to state 47
    lNot                           shift and go to state 48
    exp_Comp                       shift and go to state 49
    exp_Sum_Menos                  shift and go to state 51
    exp_rel                        shift and go to state 52
    exp_Mul_Div                    shift and go to state 53
    exp_Parentesis                 shift and go to state 55
    exp_Negativo                   shift and go to state 57
    valor                          shift and go to state 58
    callFuncion                    shift and go to state 67

state 184

    (30) listCases -> listCases DEFAULT . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 193


state 185

    (31) listCases -> CASE op_Ternario . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 194


state 186

    (32) listCases -> DEFAULT DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instrucciones                  shift and go to state 195
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 187

    (21) declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .

    CONSOLE         reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    ID              reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    IF              reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    WHILE           reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    FOR             reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    CONTINUE        reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    BREAK           reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    RETURN          reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    SWITCH          reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    FUNCTION        reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    VAR             reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    CONST           reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    $end            reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    LLAVDER         reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    CASE            reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)
    DEFAULT         reduce using rule 21 (declaracion_Funcion -> FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER .)


state 188

    (26) tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .

    CONSOLE         reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    ID              reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    IF              reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    WHILE           reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    FOR             reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    CONTINUE        reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    BREAK           reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    RETURN          reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    SWITCH          reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    FUNCTION        reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    VAR             reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)
    CONST           reduce using rule 26 (tipoFuncion -> DOSPUNTOS tipo LLAVIZQ .)


state 189

    (24) lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS . tipo
    (56) tipo -> . NUMBER
    (57) tipo -> . FLOAT
    (58) tipo -> . STRING
    (59) tipo -> . BOOLEAN
    (60) tipo -> . CHAR

    NUMBER          shift and go to state 109
    FLOAT           shift and go to state 110
    STRING          shift and go to state 111
    BOOLEAN         shift and go to state 112
    CHAR            shift and go to state 113

    tipo                           shift and go to state 196

state 190

    (40) sIf2 -> LLAVDER ELSE . sElse
    (42) sElse -> . LLAVIZQ instrucciones LLAVDER
    (43) sElse -> . sIf
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2

    LLAVIZQ         shift and go to state 198
    IF              shift and go to state 19

    sElse                          shift and go to state 197
    sIf                            shift and go to state 199

state 191

    (37) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    instrucciones                  shift and go to state 200
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 192

    (29) listCases -> listCases CASE op_Ternario . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 201


state 193

    (30) listCases -> listCases DEFAULT DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instrucciones                  shift and go to state 202
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 194

    (31) listCases -> CASE op_Ternario DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instrucciones                  shift and go to state 203
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 195

    (32) listCases -> DEFAULT DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    LLAVDER         reduce using rule 32 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    CASE            reduce using rule 32 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 32 (listCases -> DEFAULT DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instruccion                    shift and go to state 29
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 196

    (24) lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo .

    PARDER          reduce using rule 24 (lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo .)
    COMA            reduce using rule 24 (lista_Parametros -> lista_Parametros COMA ID DOSPUNTOS tipo .)


state 197

    (40) sIf2 -> LLAVDER ELSE sElse .

    CONSOLE         reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    ID              reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    IF              reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    WHILE           reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    FOR             reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    CONTINUE        reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    BREAK           reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    RETURN          reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    SWITCH          reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    FUNCTION        reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    VAR             reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    CONST           reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    $end            reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    LLAVDER         reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    CASE            reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)
    DEFAULT         reduce using rule 40 (sIf2 -> LLAVDER ELSE sElse .)


state 198

    (42) sElse -> LLAVIZQ . instrucciones LLAVDER
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instrucciones                  shift and go to state 204
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 199

    (43) sElse -> sIf .

    CONSOLE         reduce using rule 43 (sElse -> sIf .)
    ID              reduce using rule 43 (sElse -> sIf .)
    IF              reduce using rule 43 (sElse -> sIf .)
    WHILE           reduce using rule 43 (sElse -> sIf .)
    FOR             reduce using rule 43 (sElse -> sIf .)
    CONTINUE        reduce using rule 43 (sElse -> sIf .)
    BREAK           reduce using rule 43 (sElse -> sIf .)
    RETURN          reduce using rule 43 (sElse -> sIf .)
    SWITCH          reduce using rule 43 (sElse -> sIf .)
    FUNCTION        reduce using rule 43 (sElse -> sIf .)
    VAR             reduce using rule 43 (sElse -> sIf .)
    CONST           reduce using rule 43 (sElse -> sIf .)
    $end            reduce using rule 43 (sElse -> sIf .)
    LLAVDER         reduce using rule 43 (sElse -> sIf .)
    CASE            reduce using rule 43 (sElse -> sIf .)
    DEFAULT         reduce using rule 43 (sElse -> sIf .)


state 200

    (37) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    LLAVDER         shift and go to state 205
    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    instruccion                    shift and go to state 29
    imprimir_instr                 shift and go to state 4
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 201

    (29) listCases -> listCases CASE op_Ternario DOSPUNTOS . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instrucciones                  shift and go to state 206
    instruccion                    shift and go to state 3
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 202

    (30) listCases -> listCases DEFAULT DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    LLAVDER         reduce using rule 30 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    CASE            reduce using rule 30 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 30 (listCases -> listCases DEFAULT DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instruccion                    shift and go to state 29
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 203

    (31) listCases -> CASE op_Ternario DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    LLAVDER         reduce using rule 31 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    CASE            reduce using rule 31 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 31 (listCases -> CASE op_Ternario DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instruccion                    shift and go to state 29
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 204

    (42) sElse -> LLAVIZQ instrucciones . LLAVDER
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    LLAVDER         shift and go to state 207
    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instruccion                    shift and go to state 29
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 205

    (37) sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    FUNCTION        reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 37 (sFor -> FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER .)


state 206

    (29) listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . imprimir_instr
    (5) instruccion -> . declaracion
    (6) instruccion -> . asignacion PUNTOCOMA
    (7) instruccion -> . sIf
    (8) instruccion -> . sWhile
    (9) instruccion -> . sFor
    (10) instruccion -> . sContinue
    (11) instruccion -> . sBreak
    (12) instruccion -> . sReturn
    (13) instruccion -> . sSwitch
    (14) instruccion -> . declaracion_Funcion
    (15) instruccion -> . callFuncion PUNTOCOMA
    (61) imprimir_instr -> . CONSOLE PUNTO LOG PARIZQ lista_exp PARDER PUNTOCOMA
    (49) declaracion -> . tipoVar ID DOSPUNTOS tipo declaracion_explicita
    (50) declaracion -> . tipoVar ID declaracion_implicita
    (44) asignacion -> . ID IGUAL op_Ternario
    (45) asignacion -> . ID MAS IGUAL op_Ternario
    (46) asignacion -> . ID MENOS IGUAL op_Ternario
    (47) asignacion -> . ID MAS MAS
    (48) asignacion -> . ID MENOS MENOS
    (39) sIf -> . IF PARIZQ op_Ternario PARDER LLAVIZQ instrucciones sIf2
    (38) sWhile -> . WHILE PARIZQ op_Ternario PARDER LLAVIZQ instrucciones LLAVDER
    (37) sFor -> . FOR PARIZQ declaracion op_Ternario PUNTOCOMA asignacion PARDER LLAVIZQ instrucciones LLAVDER
    (33) sContinue -> . CONTINUE PUNTOCOMA
    (34) sBreak -> . BREAK PUNTOCOMA
    (35) sReturn -> . RETURN PUNTOCOMA
    (36) sReturn -> . RETURN op_Ternario PUNTOCOMA
    (28) sSwitch -> . SWITCH PARIZQ op_Ternario PARDER LLAVIZQ listCases LLAVDER
    (21) declaracion_Funcion -> . FUNCTION ID PARIZQ parametros tipoFuncion instrucciones LLAVDER
    (16) callFuncion -> . ID PARIZQ venir_Expresiones
    (54) tipoVar -> . VAR
    (55) tipoVar -> . CONST

    LLAVDER         reduce using rule 29 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    CASE            reduce using rule 29 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    DEFAULT         reduce using rule 29 (listCases -> listCases CASE op_Ternario DOSPUNTOS instrucciones .)
    CONSOLE         shift and go to state 16
    ID              shift and go to state 18
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    FOR             shift and go to state 21
    CONTINUE        shift and go to state 22
    BREAK           shift and go to state 23
    RETURN          shift and go to state 24
    SWITCH          shift and go to state 25
    FUNCTION        shift and go to state 26
    VAR             shift and go to state 27
    CONST           shift and go to state 28

    instruccion                    shift and go to state 29
    imprimir_instr                 shift and go to state 4
    declaracion                    shift and go to state 5
    asignacion                     shift and go to state 6
    sIf                            shift and go to state 7
    sWhile                         shift and go to state 8
    sFor                           shift and go to state 9
    sContinue                      shift and go to state 10
    sBreak                         shift and go to state 11
    sReturn                        shift and go to state 12
    sSwitch                        shift and go to state 13
    declaracion_Funcion            shift and go to state 14
    callFuncion                    shift and go to state 15
    tipoVar                        shift and go to state 17

state 207

    (42) sElse -> LLAVIZQ instrucciones LLAVDER .

    CONSOLE         reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    ID              reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    IF              reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    WHILE           reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    FOR             reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CONTINUE        reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    BREAK           reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    RETURN          reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    SWITCH          reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    FUNCTION        reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    VAR             reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CONST           reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    $end            reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    LLAVDER         reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    CASE            reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)
    DEFAULT         reduce using rule 42 (sElse -> LLAVIZQ instrucciones LLAVDER .)

